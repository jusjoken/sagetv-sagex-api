{
  "swagger": 3.0,
  "host": "localhost:8080",
  "basePath": "/sagex/api",
  "schemes": [
    "http",
    "https"
  ],
  "produces": [
    "application/json",
    "application/xml"
  ],
  "consumes": [
    "application/json"
  ],
  "info": {
    "version": "9.0",
    "title": "SageTV REST API",
    "description": "Access SageTV core features over http",
    "contact": {
      "name": "SageTV Team",
      "url": "https://github.com/google/sagetv"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://github.com/google/sagetv/blob/master/LICENSE"
    }
  },
  "externalDocs": {
    "description": "SageTV Forums",
    "url": "https://forums.sagetv.com/forums/"
  },
  "tags": [
    {
      "name": "AiringAPI",
      "description": "Airing is the \u0027meta\u0027 object used to access content.\n  \u003cp\u003e\n  An Airing can represent a specific time and Channel that a television Show is broadcast on.\n  Uniquely identified by its time-Channel overlap because only one thing can be broadcast on a Channel at any given time.\n  Airing\u0027s also represent the metadata that identify individual files.\n \u003cp\u003e\n  SageTV will automatically convert the following types to Airing if used for a parameter that requires the Airing type:\u003cp\u003e\n  MediaFile - the Airing that represents the content is used\u003cp\u003e\n  java.io.File - the corresponding MediaFile (if it exists) is resolved and then its Airing is used"
    },
    {
      "name": "AlbumAPI",
      "description": "Represents an Album of music."
    },
    {
      "name": "CaptureDeviceAPI",
      "description": "Represents a capture card or network encoder which is used to record TV."
    },
    {
      "name": "CaptureDeviceInputAPI",
      "description": "Represents an specific input on a CaptureDevice such as the TV Tuner, Composite or S-Video inputs"
    },
    {
      "name": "ChannelAPI",
      "description": "A Channel represents a logical station on a broadcast, cable or satellite lineup.\n  \u003cp\u003e\n  Channel numbers always refer to logical channel numbers EXCEPT when they are explicitly stated to refer\n  to physical channel numbers.\n  \u003cp\u003e\n  SageTV will automatically convert the following types to Channel if used for a parameter that requires the Channel type:\u003cp\u003e\n  Airing - every Airing has an associated Channel, that Channel is used\u003cp\u003e\n  MediaFile - due to the 1:1 mapping between MediaFiles and Airings, the MediaFile is resolved to an Airing and then to a Channel"
    },
    {
      "name": "Configuration",
      "description": "Configuration and properties for the whole system"
    },
    {
      "name": "Database",
      "description": "Contains methods for manipulating database objects in SageTV as well as doing general database queries\n \n  NOTE: All of the \u0027Search\u0027 methods will be limited to 1000 results."
    },
    {
      "name": "FavoriteAPI",
      "description": "Favorites are objects which are used for repeated recording in SageTV"
    },
    {
      "name": "Global",
      "description": "System methods used for dealing with Sage specifics"
    },
    {
      "name": "MediaFileAPI",
      "description": "A MediaFile represents a physical file or a group of files that represent the same content. Every MediaFile has an Airing associated with it\n  that describes the metadata information for the content through the use of a Show object. There are also special MediaFiles that represent\n  streams from capture devices directly or other playback hardware such as CD/DVD drives.\n  \u003cp\u003e\n  SageTV will automatically convert the following types to MediaFile if used for a parameter that requires the MediaFile type:\u003cp\u003e\n  Airing - if an Airing has an associated MediaFile then it will be used, otherwise the conversion results in null\n  java.io.File - if the specified physical file has an assoicated MediaFile, then it will be used"
    },
    {
      "name": "MediaNodeAPI",
      "description": "Virtual content directory abstraction."
    },
    {
      "name": "MediaPlayerAPI",
      "description": "Calls for playing back media in SageTV and for controlling that playback"
    },
    {
      "name": "PersonAPI",
      "description": "Person is an object that corresponds to an actual Person (or Team). It depends on the EPG implementation\n  for whether this is solely based on a name or an actual name + ID set which would then possibly also\n  include all the additional information about a Person as well as imagery for them.\n  \u003cp\u003e\n  SageTV will automatically convert the following types to Person if used for a parameter that requires the Person type:\u003cp\u003e\n  String - this may not be exact since multiple Person objects can have the same name, but it will resolve to one\u003cp\u003e"
    },
    {
      "name": "PlaylistAPI",
      "description": "Calls for creating, editing, removing and querying playlists in the system"
    },
    {
      "name": "PluginAPI",
      "description": "API calls to be used for downloading, enabling and disabling of SageTV Plugins from the central repository.\n  Also contains methods for configuring them and for interacting with the SageTV Plugin Event system."
    },
    {
      "name": "Security",
      "description": "Calls for dealing with permission based access to various capabilities in the SageTV platform and UI."
    },
    {
      "name": "SeriesInfoAPI",
      "description": "@author Narflex"
    },
    {
      "name": "ShowAPI",
      "description": "Show represents detailed information about content. This is where the actual metadata information is stored.\n  Show is separated from Airing because there can be multiple Airings of the same Show.\n  \u003cp\u003e\n  SageTV will automatically convert the following types to Show if used for a parameter that requires the Show type:\u003cp\u003e\n  Airing - every Airing corresponds to a single Show which describes the Airing\u0027s content in more detail, so the Airing\u0027s Show is used\u003cp\u003e\n  MediaFile - this is resolved to an Airing by the 1:1 relationship between MediaFiles and Airings, and then the Airing is resolved to a Show"
    },
    {
      "name": "SystemMessageAPI",
      "description": "@author Narflex"
    },
    {
      "name": "TVEditorialAPI",
      "description": "@author Narflex"
    },
    {
      "name": "TranscodeAPI",
      "description": "@author Narflex"
    },
    {
      "name": "UserRecordAPI",
      "description": "API for plugins and other utilities to be able to store arbitrary name-value pairs in the database under a keyed object system."
    },
    {
      "name": "Utility",
      "description": "Contains miscellaneous methods useful for a variety of purposes"
    },
    {
      "name": "WidgetAPI",
      "description": "Widget reflection API"
    }
  ],
  "definitions": {
    "ErrorModel": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "ResponseModel": {
      "type": "object",
      "properties": {
        "Result": {
          "type": "object"
        }
      }
    },
    "Airing": {
      "type": "object",
      "properties": {
        "AttributeList": {
          "type": "string"
        },
        "ChannelName": {
          "type": "string"
        },
        "ChannelNumber": {
          "type": "string"
        },
        "Duration": {
          "type": "integer"
        },
        "EndTime": {
          "type": "integer"
        },
        "AiringID": {
          "type": "integer"
        },
        "OnAfter": {
          "type": "integer"
        },
        "OnBefore": {
          "type": "integer"
        },
        "PartNumber": {
          "type": "integer"
        },
        "PremiereFinaleInfo": {
          "type": "string"
        },
        "Ratings": {
          "type": "string"
        },
        "StartTime": {
          "type": "integer"
        },
        "Title": {
          "type": "string"
        },
        "TotalParts": {
          "type": "integer"
        },
        "Channel": {
          "$ref": "#/definitions/Channel"
        },
        "ExtraAiringDetails": {
          "type": "string"
        },
        "LatestWatchedTime": {
          "type": "integer"
        },
        "MediaFileForAiring": {
          "type": "integer"
        },
        "ParentalLimitsExceeded": {
          "type": "string"
        },
        "ParentalRating": {
          "type": "string"
        },
        "PlayableAiring": {
          "type": "integer"
        },
        "RealWatchedEndTime": {
          "type": "integer"
        },
        "RealWatchedStartTime": {
          "type": "integer"
        },
        "RecordingName": {
          "type": "string"
        },
        "RecordingQuality": {
          "type": "string"
        },
        "ScheduleDuration": {
          "type": "integer"
        },
        "ScheduleEndTime": {
          "type": "integer"
        },
        "ScheduleRecordingRecurrence": {
          "type": "string"
        },
        "ScheduleStartTime": {
          "type": "integer"
        },
        "Show": {
          "$ref": "#/definitions/Show"
        },
        "TrackNumber": {
          "type": "integer"
        },
        "WatchedDuration": {
          "type": "integer"
        },
        "WatchedEndTime": {
          "type": "integer"
        },
        "WatchedStartTime": {
          "type": "integer"
        },
        "IsHDTV": {
          "type": "boolean"
        },
        "IsDontLike": {
          "type": "boolean"
        },
        "IsFavorite": {
          "type": "boolean"
        },
        "IsManualRecord": {
          "type": "boolean"
        },
        "IsNotManualOrFavorite": {
          "type": "boolean"
        },
        "IsWatched": {
          "type": "boolean"
        },
        "IsWatchedCompletely": {
          "type": "boolean"
        }
      }
    },
    "Album": {
      "type": "object",
      "properties": {
        "Art": {
          "$ref": "#/definitions/MetaImage"
        },
        "Artist": {
          "type": "string"
        },
        "Genre": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Tracks": {
          "$ref": "#/definitions/Airing"
        },
        "Year": {
          "type": "string"
        },
        "NumberOfTracks": {
          "type": "integer"
        },
        "IsArt": {
          "type": "boolean"
        }
      }
    },
    "Channel": {
      "type": "object",
      "properties": {
        "Description": {
          "type": "string"
        },
        "Logo": {
          "$ref": "#/definitions/MetaImage"
        },
        "LogoCount": {
          "type": "integer"
        },
        "LogoURL": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Network": {
          "type": "string"
        },
        "Number": {
          "type": "string"
        },
        "StationID": {
          "type": "integer"
        },
        "IsViewable": {
          "type": "boolean"
        }
      }
    },
    "Favorite": {
      "type": "object",
      "properties": {
        "Airings": {
          "$ref": "#/definitions/Airing"
        },
        "AutomaticConversionDestination": {
          "$ref": "#/definitions/java.io.File"
        },
        "AutomaticConversionFormat": {
          "type": "string"
        },
        "Category": {
          "type": "string"
        },
        "Channel": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "FavoriteID": {
          "type": "integer"
        },
        "Keyword": {
          "type": "string"
        },
        "Network": {
          "type": "string"
        },
        "ParentalRating": {
          "type": "string"
        },
        "Person": {
          "type": "string"
        },
        "PersonRole": {
          "type": "string"
        },
        "PresentationName": {
          "type": "string"
        },
        "PresentationPrefix": {
          "type": "string"
        },
        "Properties": {
          "$ref": "#/definitions/java.util.Properties"
        },
        "Quality": {
          "type": "string"
        },
        "Rated": {
          "type": "string"
        },
        "SubCategory": {
          "type": "string"
        },
        "Timeslot": {
          "type": "string"
        },
        "Title": {
          "type": "string"
        },
        "Year": {
          "type": "string"
        },
        "KeepAtMost": {
          "type": "integer"
        },
        "StartPadding": {
          "type": "integer"
        },
        "StopPadding": {
          "type": "integer"
        },
        "IsAutoDelete": {
          "type": "boolean"
        },
        "IsDeleteAfterAutomaticConversion": {
          "type": "boolean"
        },
        "IsEnabled": {
          "type": "boolean"
        },
        "IsFirstRuns": {
          "type": "boolean"
        },
        "IsFirstRunsAndReRuns": {
          "type": "boolean"
        },
        "IsFirstRunsOnly": {
          "type": "boolean"
        },
        "IsReRuns": {
          "type": "boolean"
        },
        "IsReRunsOnly": {
          "type": "boolean"
        }
      }
    },
    "MediaFile": {
      "type": "object",
      "properties": {
        "IsAutorotatePictureFile": {
          "type": "boolean"
        },
        "AlbumForFile": {
          "$ref": "#/definitions/Album"
        },
        "FileDuration": {
          "type": "integer"
        },
        "FileEndTime": {
          "type": "integer"
        },
        "FileStartTime": {
          "type": "integer"
        },
        "FullImage": {
          "$ref": "#/definitions/MetaImage"
        },
        "Airing": {
          "$ref": "#/definitions/Airing"
        },
        "Encoding": {
          "type": "string"
        },
        "FormatDescription": {
          "type": "string"
        },
        "MediaFileID": {
          "type": "integer"
        },
        "MediaFileMetadataProperties": {
          "$ref": "#/definitions/MetadataProperties"
        },
        "RelativePath": {
          "type": "string"
        },
        "MediaTitle": {
          "type": "string"
        },
        "NumberOfSegments": {
          "type": "integer"
        },
        "ParentDirectory": {
          "$ref": "#/definitions/java.io.File"
        },
        "SegmentFiles": {
          "$ref": "#/definitions/java.io.File"
        },
        "Size": {
          "type": "integer"
        },
        "StartTimesForSegments": {
          "type": "integer"
        },
        "Thumbnail": {
          "$ref": "#/definitions/MetaImage"
        },
        "IsAnyThumbnail": {
          "type": "boolean"
        },
        "IsSpecificThumbnail": {
          "type": "boolean"
        },
        "IsBluRay": {
          "type": "boolean"
        },
        "IsCompleteRecording": {
          "type": "boolean"
        },
        "IsDVD": {
          "type": "boolean"
        },
        "IsDVDDrive": {
          "type": "boolean"
        },
        "IsFileCurrentlyRecording": {
          "type": "boolean"
        },
        "IsLibraryFile": {
          "type": "boolean"
        },
        "IsLocalFile": {
          "type": "boolean"
        },
        "IsMusicFile": {
          "type": "boolean"
        },
        "IsPictureFile": {
          "type": "boolean"
        },
        "IsTVFile": {
          "type": "boolean"
        },
        "IsThumbnailLoaded": {
          "type": "boolean"
        },
        "IsVideoFile": {
          "type": "boolean"
        }
      }
    },
    "MediaNode": {
      "type": "object",
      "properties": {
        "AllNodeDescendants": {
          "$ref": "#/definitions/java.util.Collection"
        },
        "NodeChildren": {
          "type": "integer"
        },
        "NodeDataObject": {
          "$ref": "#/definitions/Object"
        },
        "NodeDataType": {
          "type": "string"
        },
        "NodeFullPath": {
          "type": "string"
        },
        "NodeIcon": {
          "$ref": "#/definitions/Object"
        },
        "NodeNumChildren": {
          "type": "integer"
        },
        "NodeNumFilters": {
          "type": "integer"
        },
        "NodeParent": {
          "type": "integer"
        },
        "NodePrimaryLabel": {
          "type": "string"
        },
        "NodeSecondaryLabel": {
          "type": "string"
        },
        "NodeSortTechnique": {
          "type": "string"
        },
        "NodeThumbnail": {
          "$ref": "#/definitions/Object"
        },
        "NodeTypePath": {
          "type": "string"
        },
        "IsNodeFolder": {
          "type": "boolean"
        },
        "IsNodeHierarchyRealized": {
          "type": "boolean"
        },
        "IsNodePlayable": {
          "type": "boolean"
        },
        "IsNodeSortAscending": {
          "type": "boolean"
        },
        "IsNodeVirtual": {
          "type": "boolean"
        }
      }
    },
    "Person": {
      "type": "object",
      "properties": {
        "Birthplace": {
          "type": "string"
        },
        "DateOfBirth": {
          "type": "string"
        },
        "DateOfDeath": {
          "type": "string"
        },
        "PersonID": {
          "type": "integer"
        },
        "IsImage": {
          "type": "boolean"
        }
      }
    },
    "Playlist": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "NumberOfPlaylistItems": {
          "type": "integer"
        },
        "Items": {
          "$ref": "#/definitions/Object"
        },
        "Properties": {
          "$ref": "#/definitions/java.util.Properties"
        }
      }
    },
    "Plugin": {
      "type": "object",
      "properties": {
        "IsBeDisabled": {
          "type": "boolean"
        },
        "AllPluginVersions": {
          "type": "integer"
        },
        "ClientPluginIncompatabilityReason": {
          "type": "string"
        },
        "Author": {
          "type": "string"
        },
        "ConfigSettings": {
          "type": "string"
        },
        "CreationDate": {
          "type": "integer"
        },
        "DemoVideos": {
          "type": "string"
        },
        "Dependencies": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "Identifier": {
          "type": "string"
        },
        "Implementation": {
          "$ref": "#/definitions/sage.SageTVPlugin"
        },
        "IncompatabilityReason": {
          "type": "string"
        },
        "InstallDate": {
          "type": "integer"
        },
        "ModificationDate": {
          "type": "integer"
        },
        "Name": {
          "type": "string"
        },
        "ReleaseNotes": {
          "type": "string"
        },
        "ResourcePath": {
          "type": "string"
        },
        "Screenshots": {
          "type": "string"
        },
        "Type": {
          "type": "string"
        },
        "Version": {
          "type": "string"
        },
        "Websites": {
          "type": "string"
        },
        "IsClientPluginCompatible": {
          "type": "boolean"
        },
        "IsClientPluginInstalled": {
          "type": "boolean"
        },
        "IsClientPluginInstalledSameVersion": {
          "type": "boolean"
        },
        "IsBeta": {
          "type": "boolean"
        },
        "IsCompatible": {
          "type": "boolean"
        },
        "IsConfigurable": {
          "type": "boolean"
        },
        "IsDesktopOnly": {
          "type": "boolean"
        },
        "IsEnabled": {
          "type": "boolean"
        },
        "IsFailed": {
          "type": "boolean"
        },
        "IsInstalled": {
          "type": "boolean"
        },
        "IsInstalledSameVersion": {
          "type": "boolean"
        }
      }
    },
    "SeriesInfo": {
      "type": "object",
      "properties": {
        "NumberOfCharactersInSeries": {
          "type": "integer"
        },
        "SeriesActorList": {
          "$ref": "#/definitions/Person"
        },
        "SeriesCategory": {
          "type": "string"
        },
        "SeriesCharacterList": {
          "type": "string"
        },
        "SeriesDayOfWeek": {
          "type": "string"
        },
        "SeriesDescription": {
          "type": "string"
        },
        "SeriesFinaleDate": {
          "type": "string"
        },
        "SeriesHistory": {
          "type": "string"
        },
        "SeriesHourAndMinuteTimeslot": {
          "type": "string"
        },
        "SeriesID": {
          "type": "string"
        },
        "SeriesImage": {
          "$ref": "#/definitions/MetaImage"
        },
        "SeriesImageCount": {
          "type": "integer"
        },
        "SeriesImageURL": {
          "type": "string"
        },
        "SeriesNetwork": {
          "type": "string"
        },
        "SeriesPremiereDate": {
          "type": "string"
        },
        "SeriesSubCategory": {
          "type": "string"
        },
        "SeriesTitle": {
          "type": "string"
        },
        "IsSeriesImage": {
          "type": "boolean"
        }
      }
    },
    "Show": {
      "type": "object",
      "properties": {
        "MovieImageCount": {
          "type": "integer"
        },
        "MovieStarRating": {
          "type": "float"
        },
        "OriginalAiringDate": {
          "type": "integer"
        },
        "PeopleAndCharacterListInShow": {
          "type": "string"
        },
        "PeopleInShow": {
          "type": "string"
        },
        "PeopleListInShow": {
          "type": "string"
        },
        "PersonListInShow": {
          "$ref": "#/definitions/Person"
        },
        "RolesInShow": {
          "type": "string"
        },
        "CategoriesList": {
          "type": "string"
        },
        "CategoriesString": {
          "type": "string"
        },
        "Category": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "Duration": {
          "type": "integer"
        },
        "Episode": {
          "type": "string"
        },
        "EpisodeNumber": {
          "type": "integer"
        },
        "ExpandedRatings": {
          "type": "string"
        },
        "ExternalID": {
          "type": "string"
        },
        "Language": {
          "type": "string"
        },
        "Misc": {
          "type": "string"
        },
        "ParentalRating": {
          "type": "string"
        },
        "Rated": {
          "type": "string"
        },
        "SeasonNumber": {
          "type": "integer"
        },
        "SeriesInfo": {
          "$ref": "#/definitions/SeriesInfo"
        },
        "SubCategory": {
          "type": "string"
        },
        "Title": {
          "type": "string"
        },
        "Year": {
          "type": "string"
        },
        "IsMovieImage": {
          "type": "boolean"
        },
        "IsMovie": {
          "type": "boolean"
        },
        "IsEPGDataUnique": {
          "type": "boolean"
        }
      }
    },
    "SystemMessage": {
      "type": "object",
      "properties": {
        "EndTime": {
          "type": "integer"
        },
        "Level": {
          "type": "integer"
        },
        "RepeatCount": {
          "type": "integer"
        },
        "String": {
          "type": "string"
        },
        "Time": {
          "type": "integer"
        },
        "TypeCode": {
          "type": "integer"
        },
        "TypeName": {
          "type": "string"
        },
        "VariableNames": {
          "type": "string"
        }
      }
    },
    "TVEditorial": {
      "type": "object",
      "properties": {
        "EditorialAirDate": {
          "type": "string"
        },
        "EditorialImage": {
          "$ref": "#/definitions/MetaImage"
        },
        "EditorialNetwork": {
          "type": "string"
        },
        "EditorialShow": {
          "type": "string"
        },
        "EditorialText": {
          "type": "string"
        },
        "EditorialTitle": {
          "type": "string"
        },
        "IsEditorialImage": {
          "type": "boolean"
        }
      }
    },
    "UserRecord": {
      "type": "object",
      "properties": {
        "Names": {
          "type": "string"
        }
      }
    },
    "Widget": {
      "type": "object",
      "properties": {
        "Children": {
          "type": "integer"
        },
        "Name": {
          "type": "string"
        },
        "Parents": {
          "type": "integer"
        },
        "Symbol": {
          "type": "string"
        },
        "Type": {
          "type": "string"
        }
      }
    },
    "MetadataProperties": {
      "type": "object",
      "properties": {
        "Title": {
          "type": "string"
        },
        "EpisodeName": {
          "type": "string"
        },
        "Genre": {
          "type": "array"
        },
        "GenreID": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "Year": {
          "type": "integer"
        },
        "Language": {
          "type": "string"
        },
        "Rated": {
          "type": "string"
        },
        "ParentalRating": {
          "type": "string"
        },
        "RunningTime": {
          "type": "string"
        },
        "OriginalAirDate": {
          "type": "integer"
        },
        "ExtendedRatings": {
          "type": "string"
        },
        "Misc": {
          "type": "string"
        },
        "PartNumber": {
          "type": "integer"
        },
        "TotalParts": {
          "type": "integer"
        },
        "HDTV": {
          "type": "boolean"
        },
        "CC": {
          "type": "boolean"
        },
        "Stereo": {
          "type": "boolean"
        },
        "Subtitled": {
          "type": "boolean"
        },
        "Premiere": {
          "type": "boolean"
        },
        "SeasonPremiere": {
          "type": "boolean"
        },
        "SeriesPremiere": {
          "type": "boolean"
        },
        "ChannelPremiere": {
          "type": "boolean"
        },
        "SeasonFinal": {
          "type": "boolean"
        },
        "SeriesFinale": {
          "type": "boolean"
        },
        "SAP": {
          "type": "boolean"
        },
        "ExternalID": {
          "type": "string"
        },
        "Width": {
          "type": "integer"
        },
        "Height": {
          "type": "integer"
        },
        "Track": {
          "type": "integer"
        },
        "TotalTracks": {
          "type": "integer"
        },
        "Comment": {
          "type": "string"
        },
        "AiringTime": {
          "type": "date"
        },
        "ThumbnailOffset": {
          "type": "integer"
        },
        "ThumbnailSize": {
          "type": "integer"
        },
        "ThumbnailDesc": {
          "type": "string"
        },
        "Duration": {
          "type": "integer"
        },
        "Picture.Resolution": {
          "type": "string"
        },
        "MediaTitle": {
          "type": "string"
        },
        "MediaType": {
          "type": "string"
        },
        "SeasonNumber": {
          "type": "integer"
        },
        "EpisodeNumber": {
          "type": "string"
        },
        "IMDBID": {
          "type": "string"
        },
        "DiscNumber": {
          "type": "string"
        },
        "MediaProviderID": {
          "type": "string"
        },
        "MediaProviderDataID": {
          "type": "string"
        },
        "UserRating": {
          "type": "integer"
        },
        "Fanart": {
          "type": "array"
        },
        "TrailerUrl": {
          "type": "string"
        },
        "SeriesInfoID": {
          "type": "integer"
        },
        "EpisodeCount": {
          "type": "integer"
        },
        "CollectionName": {
          "type": "string"
        },
        "CollectionID": {
          "type": "integer"
        },
        "CollectionOverview": {
          "type": "string"
        },
        "DefaultPoster": {
          "type": "string"
        },
        "DefaultBanner": {
          "type": "string"
        },
        "DefaultBackground": {
          "type": "string"
        },
        "ScrapedBy": {
          "type": "string"
        },
        "ScrapedDate": {
          "type": "long"
        },
        "TagLine": {
          "type": "string"
        },
        "Quotes": {
          "type": "string"
        },
        "Trivia": {
          "type": "string"
        }
      }
    },
    "Object": {
      "type": "object"
    },
    "any": {
      "type": "object"
    },
    "MetaImage": {
      "type": "object"
    },
    "java.util.Vector": {
      "type": "object"
    },
    "java.io.File": {
      "type": "object"
    },
    "java.awt.Color": {
      "type": "object"
    },
    "java.util.Map": {
      "type": "object"
    },
    "java.util.Properties": {
      "type": "object"
    },
    "java.util.Collection": {
      "type": "object"
    },
    "java.awt.image.BufferedImage": {
      "type": "object"
    },
    "sage.SageTVPlugin": {
      "type": "object"
    },
    "sage.SageTVPluginRegistry": {
      "type": "object"
    },
    "Process": {
      "type": "object"
    },
    "java.awt.Panel": {
      "type": "object"
    }
  },
  "parameters": {
    "filter": {
      "in": "query",
      "name": "filter",
      "description": "Pipe (|) separated list of fields to ONLY include in the reply",
      "required": false,
      "type": "string"
    },
    "context": {
      "in": "query",
      "name": "context",
      "description": "SageTV UI Context",
      "required": false,
      "type": "string"
    },
    "encoder": {
      "in": "query",
      "name": "encoder",
      "type": "string",
      "enum": [
        "json",
        "xml",
        "nielm",
        "image",
        "raw"
      ],
      "default": "json"
    }
  },
  "paths": {
    "?c\u003dAddAiring": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Adds a new Airing object to the database. This call should be used with caution.\n        @param ShowExternalID a GUID which uniquely identifies the Show that correlates with this Airing, this Show should already have been added\n        @param StationID the GUID which uniquely identifies a \"Station\" (sort of like a Channel)\n        @param StartTime the time at which the new Airing starts\n        @param Duration the duration of the new Airing in milliseconds\n        @return the newly added Airing",
        "operationId": "AddAiring",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "ShowExternalID",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "StationID",
            "in": "query"
          },
          {
            "name": "3",
            "type": "integer",
            "required": true,
            "description": "StartTime",
            "in": "query"
          },
          {
            "name": "4",
            "type": "integer",
            "required": true,
            "description": "Duration",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Airing)",
            "schema": {
              "$ref": "#/definitions/Airing"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dAddAiringDetailed": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Adds a new Airing object to the database. This call should be used with caution. (it has more details you can specify than the\n        standard AddAiring API call)\n        @param ShowExternalID a GUID which uniquely identifies the Show that correlates with this Airing, this Show should already have been added\n        @param StationID the GUID which uniquely identifies a \"Station\" (sort of like a Channel)\n        @param StartTime the time at which the new Airing starts\n        @param Duration the duration of the new Airing in milliseconds\n        @param PartNumber for music files, the track number; for TV shows if it is a multipart show this is the part number, otherwise this should be 0\n        @param TotalParts for multipart TV shows, this is the total number of parts otherwise this should be zero; for music files it should be zero\n        @param ParentalRating the parental rating for the show, should be a localized value from \"TVY\", \"TVY7\", \"TVG\", \"TVPG\", \"TV14\", \"TVM\" or the empty string\n        @param Attributes a list of attributes for this Airing, the following values may be used: HDTV, Stereo, CC, SAP, Subtitled, 3D, DD5.1, Dolby, Letterbox, Live, New, Widescreen, Surround, Dubbed or Taped\n        @param PremierFinale should be the empty string or a localized value from the list \"Premiere\", \"Channel Premiere\", \"Season Premiere\", \"Series Premiere\", \"Season Finale\", \"Series Finale\"\n        @return the newly added Airing\n       \n        @since 7.1",
        "operationId": "AddAiringDetailed",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "ShowExternalID",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "StationID",
            "in": "query"
          },
          {
            "name": "3",
            "type": "integer",
            "required": true,
            "description": "StartTime",
            "in": "query"
          },
          {
            "name": "4",
            "type": "integer",
            "required": true,
            "description": "Duration",
            "in": "query"
          },
          {
            "name": "5",
            "type": "integer",
            "required": true,
            "description": "PartNumber",
            "in": "query"
          },
          {
            "name": "6",
            "type": "integer",
            "required": true,
            "description": "TotalParts",
            "in": "query"
          },
          {
            "name": "7",
            "type": "string",
            "required": true,
            "description": "ParentalRating",
            "in": "query"
          },
          {
            "name": "8",
            "type": "string",
            "required": true,
            "description": "Attributes",
            "in": "query"
          },
          {
            "name": "9",
            "type": "string",
            "required": true,
            "description": "PremierFinale",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Airing)",
            "schema": {
              "$ref": "#/definitions/Airing"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dCancelRecord": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Cancels a recording that was previously set with a call to {@link #Record Record()} or {@link #SetRecordingTimes SetRecordingTimes()}\n        @param Airing the Airing object",
        "operationId": "CancelRecord",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dClearDontLike": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Called to cancel the indication that the content in this Airing is \"Not Liked\" by the user\n        @param Airing the Airing object",
        "operationId": "ClearDontLike",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dClearWatched": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Clears the watched information for this Airing completely.\n        @param Airing the Airing object",
        "operationId": "ClearWatched",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAiringAttributeList": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Gets a list of attributes that are set for this Airing.\n        @param Airing the Airing object\n        @return a String array of the attributes set for this Airing, the following values may be in this array: HDTV, Stereo, CC, SAP, Subtitled, 3D, DD5.1, Dolby, Letterbox, Live, New, Widescreen, Surround, Dubbed or Taped\n        @since 7.1",
        "operationId": "GetAiringAttributeList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAiringChannelName": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Gets the name of the Channel that this Airing is on\n        @param Airing the Airing object\n        @return the name of the Channel that this Airing is on",
        "operationId": "GetAiringChannelName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAiringChannelNumber": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Gets the channel number that this Airing is on\n        @param Airing the Airing object\n        @return the channel number that this Airing is on",
        "operationId": "GetAiringChannelNumber",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAiringDuration": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Gets the duration of this Airing in milliseconds\n        @param Airing the Airing object\n        @return the duration of this Airing in milliseconds",
        "operationId": "GetAiringDuration",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAiringEndTime": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Gets the end time of this Airing. The time is in Java time units, which are milliseconds since Jan 1, 1970 GMT\n        @param Airing the Airing object\n        @return the end time of this Airing",
        "operationId": "GetAiringEndTime",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAiringForID": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Returns the Airing object that corresponds to the passed in ID. The ID should have been obtained from a call to {@link #GetAiringID GetAiringID()}\n        @param AiringID the Airing id\n        @return the Airing object that corresponds to the passed in ID",
        "operationId": "GetAiringForID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "integer",
            "required": true,
            "description": "AiringID",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Airing)",
            "schema": {
              "$ref": "#/definitions/Airing"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAiringID": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Returns the unique ID used to identify this Airing. Can get used later on a call to {@link #GetAiringForID GetAiringForID()}\n        @param Airing the Airing object\n        @return the unique ID used to identify this Airing",
        "operationId": "GetAiringID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAiringOnAfter": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Returns the Airing on the same Channel that is on immediately after the passed in Airing\n        @param Airing the Airing object\n        @return the Airing on the same Channel that is on immediately after the passed in Airing",
        "operationId": "GetAiringOnAfter",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Airing)",
            "schema": {
              "$ref": "#/definitions/Airing"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAiringOnBefore": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Returns the Airing on the same Channel that is on immediately before the passed in Airing\n        @param Airing the Airing object\n        @return the Airing on the same Channel that is on immediately before the passed in Airing",
        "operationId": "GetAiringOnBefore",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Airing)",
            "schema": {
              "$ref": "#/definitions/Airing"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAiringPartNumber": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Returns the part number for this Airing if it is a multi-part Airing.\n        @param Airing the Airing object\n        @return the part number for this Airing if it is a multi-part Airing, 1 otherwise\n        @since 7.1",
        "operationId": "GetAiringPartNumber",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAiringPremiereFinaleInfo": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Returns a String which describes any kind of Premiere, Finale info for this Airing\n        @param Airing the Airing object\n        @return a String which describes any kind of Premiere, Finale info for this Airing, can be one of: \"Premiere\", \"Channel Premiere\", \"Season Premiere\", \"Series Premiere\", \"Season Finale\", \"Series Finale\" or the empty String if none apply\n        @since 7.1",
        "operationId": "GetAiringPremiereFinaleInfo",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAiringRatings": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Gets the list of the field values which correspond to parental ratings control for this Airing\n        @param Airing the Airing object\n        @return the list of the field values which correspond to parental ratings control for this Airing",
        "operationId": "GetAiringRatings",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAiringStartTime": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Gets the start time of this Airing. The time is in Java time units, which are milliseconds since Jan 1, 1970 GMT\n        @param Airing the Airing object\n        @return the start time of this Airing",
        "operationId": "GetAiringStartTime",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAiringTitle": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Gets the title of this Airing. This will be the same as the title of the Airing\u0027s Show\n        @param Airing the Airing object\n        @return the title of this Airing",
        "operationId": "GetAiringTitle",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAiringTotalParts": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Returns the number of parts for this Airing if it is a multi-part Airing.\n        @param Airing the Airing object\n        @return the number of parts for this Airing if it is a multi-part Airing, 1 otherwise\n        @since 7.1",
        "operationId": "GetAiringTotalParts",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetChannel": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Gets the Channel that this Airing is on\n        @param Airing the Airing object\n        @return the Channel that this Airing is on",
        "operationId": "GetChannel",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Channel)",
            "schema": {
              "$ref": "#/definitions/Channel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetExtraAiringDetails": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Gets miscellaneous information about this Airing. This includes thing such as \"Part 1 of 2\", \"CC\", \"HDTV\", \"Series Premiere\", etc.\n        @param Airing the Airing object\n        @return miscellaneous information about this Airing",
        "operationId": "GetExtraAiringDetails",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetLatestWatchedTime": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Gets the time that viewing should resume from for this Airing if it is selected to view\n        @param Airing the Airing object\n        @return the time that viewing should resume from for this Airing if it is selected to view",
        "operationId": "GetLatestWatchedTime",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetManualRecordProperty": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Returns a property value for a specified ManualRecord. This must have been set using SetManualRecordProperty and\n        the specified Airing must be a ManualRecord.\n        Returns the empty string when the property is undefined.\n        @param Airing the Airing object which is a ManualRecord\n        @param PropertyName the name of the property\n        @return the property value for the specified ManualRecord, or the empty string if it is not defined\n        @since 7.0",
        "operationId": "GetManualRecordProperty",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "PropertyName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetMediaFileForAiring": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Gets the MediaFile object which corresponds to this Airing object\n        @param Airing the Airing object\n        @return the MediaFile object which corresponds to this Airing object, or null if it has no associated MediaFile",
        "operationId": "GetMediaFileForAiring",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is MediaFile)",
            "schema": {
              "$ref": "#/definitions/MediaFile"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetParentalLimitsExceeded": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Checks the airing for exceeding parental ratings and return a string array filled with each rating.\n        If parental ratings is disabled, or the airing exceeds no parental settings, return empty array.\n        @param Airing the Airing object to check against ratings\n        @return a String[] of the parental limits exceeded by this Airing\n        @since 8.1",
        "operationId": "GetParentalLimitsExceeded",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetParentalRating": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Gets the parental rating information associated with this Airing. This is information such as TVY, TVPG, TVMA, etc.\n        @param Airing the Airing object\n        @return the parental rating information associated with this Airing",
        "operationId": "GetParentalRating",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPlayableAiring": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Returns an Airing that correlates to the same content as the argument that is playable now.\n        This can only be from a completely recorded MediaFile (but could be extended beyond that).\n        @param Airing the Airing object to find a playable Airing for (for unique Shows, this can be linked to other Airings)\n        @return an Airing which represents playable content that is the same as this Airing\n        @since 8.0",
        "operationId": "GetPlayableAiring",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Airing)",
            "schema": {
              "$ref": "#/definitions/Airing"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetRealWatchedEndTime": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Gets the time the user finished watching this Airing, in real time.\n        @param Airing the Airing object\n        @return the time the user finished watching this Airing\n        @since 6.4",
        "operationId": "GetRealWatchedEndTime",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetRealWatchedStartTime": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Gets the time the user started watching this Airing, in real time.\n        @param Airing the Airing object\n        @return the time the user started watching this Airing in real time\n        @since 6.4",
        "operationId": "GetRealWatchedStartTime",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetRecordingName": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Gets the name for this recording that was set via {@link #SetRecordingName SetRecordingName(Airing, String)}\n        @param Airing the ManualRecord to get the name for\n        @return the name of the ManualRecord or the empty string if the argument was not a manual record",
        "operationId": "GetRecordingName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetRecordingQuality": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Returns the recording quality that this Airing has been specifically set to record at. This is only valid for user selected manual recordings {@link #Record Record()}\n        @param Airing the Airing object\n        @return the recording quality name that this Airing has been specifically set to record at; if no quality has been set it returns the empty string",
        "operationId": "GetRecordingQuality",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetScheduleDuration": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Get the duration for an airing accounting for any adjustments made due to Manual\n        Recording stop/start time adjustments or adjustments due to favorite padding.\n        @param Airing the Airing object\n        @return the scheduling duration of the Airing",
        "operationId": "GetScheduleDuration",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetScheduleEndTime": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Get the end time for an airing accounting for any adjustments made due to Manual Recording\n        stop/start time adjustments or adjustments due to favorite padding.\n        @param Airing the Airing object\n        @return the scheduling end time of the Airing",
        "operationId": "GetScheduleEndTime",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetScheduleRecordingRecurrence": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "If this Airing is a time-based recording this will get a description of the recurrence frequency for its recording recurrence\n        @param Airing the Airing object\n        @return a description of the recurrence frequency for this Airing\u0027s recording recurrence, or the empty string if this is not recurring time-based recording",
        "operationId": "GetScheduleRecordingRecurrence",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetScheduleStartTime": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Get the start time for an airing accounting for any adjustments made due to Manual Recording stop/start time adjustments or adjustments due to favorite padding.\n        @param Airing the Airing object\n        @return the scheduling end time of the Airing",
        "operationId": "GetScheduleStartTime",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetShow": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Gets the Show object for this Airing which describes it in further detail (Show contains the title, actors, category, description, etc.)\n        @param Airing the Airing object\n        @return the Show object for this Airing",
        "operationId": "GetShow",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Show)",
            "schema": {
              "$ref": "#/definitions/Show"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetTrackNumber": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Returns the track number for the Airing if it\u0027s from a Music Album. With music; each song (file) corresponds to an airing.\n        @param Airing the Airing object\n        @return the track number for the Airing if it\u0027s from a Music Album, 0 otherwise",
        "operationId": "GetTrackNumber",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetWatchedDuration": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Gets the duration of time of this Airing that has been watched already. This time is relative to the Airing itself; not real time.\n        @param Airing the Airing object\n        @return the duration of time of this Airing that has been watched already in milliseconds",
        "operationId": "GetWatchedDuration",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetWatchedEndTime": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Gets the time the user finished watching this Airing. This time is relative to the Airing itself; not real time.\n        If this Airing is currently being watched, this will be the maximum of any prior watch end time and the\n        current playback time in the Airing.\n        @param Airing the Airing object\n        @return the time the user finished watching this Airing",
        "operationId": "GetWatchedEndTime",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetWatchedStartTime": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Gets the time the user started watching this Airing. This time is relative to the Airing itself; not real time.\n        If this is the first time watching this Airing; then this will return the time the Airing started recording.\n        If this Airing has been watched previously; then the minimum value for this will be the Airing start time.\n        @param Airing the Airing object\n        @return the time the user started watching this Airing",
        "operationId": "GetWatchedStartTime",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsAiringAttributeSet": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Returns whether or not the specificed attibute is set for this Airing\n        @param Airing the Airing object\n        @param Attribute the following String values may be used: HDTV, Stereo, CC, SAP, Subtitled, 3D, DD5.1, Dolby, Letterbox, Live, New, Widescreen, Surround, Dubbed or Taped\n        @return true if the specified Attribute is set for this Airing, false otherwise\n        @since 7.1",
        "operationId": "IsAiringAttributeSet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Attribute",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsAiringHDTV": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Returns true if this Airing is in HDTV\n        @param Airing the Airing object\n        @return true if this Airing is in HDTV, false otherwise",
        "operationId": "IsAiringHDTV",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsAiringObject": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Returns true if the argument is an Airing object. Automatic type conversion is NOT done in this call.\n        @param Airing the object to test\n        @return true if the argument is an Airing object",
        "operationId": "IsAiringObject",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsDontLike": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Returns true if this Airing has been set as content the user \"Doesn\u0027t Like\"\n        @param Airing the Airing object\n        @return true if this Airing has been set as content the user \"Doesn\u0027t Like\"",
        "operationId": "IsDontLike",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsFavorite": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Returns true if this Airing matches one of the Favorites the user has setup\n        @param Airing the Airing object\n        @return true if this Airing matches one of the Favorites the user has setup",
        "operationId": "IsFavorite",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsManualRecord": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Returns true if this Airing has been selected by the user to manually record {@link #Record Record()}\n        @param Airing the Airing object\n        @return true if this Airing has been selected by the user to manually record {@link #Record Record()}",
        "operationId": "IsManualRecord",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsNotManualOrFavorite": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Returns true if this Airing has NOT been selected by the user to manually record {@link #Record Record()} and\n        is also NOT a Favorite (i.e. IsFavorite and IsManualRecord both return false)\n        @param Airing the Airing object\n        @return true if this Airing is not a ManualRecord or a Favorite\n       \n        @since 6.2",
        "operationId": "IsNotManualOrFavorite",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsWatched": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Returns true if this Airing\u0027s content has been completely watched already. This may also return true if this Airing itself was not watched; but an Airing with the same content (as determined by SageTV\u0027s AI) was watched\n        @param Airing the Airing object\n        @return true if this Airing\u0027s content has beeen watched completely before",
        "operationId": "IsWatched",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsWatchedCompletely": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Returns true if this Airing has been completely watched already. This is different then {@link #IsWatched IsWatched()}\n        @param Airing the Airing object\n        @return true if this Airing has beeen watched completely",
        "operationId": "IsWatchedCompletely",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dPrintAiringLong": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Returns a lengthy string which is suitable for displaying information about this Airing. This contains nearly all the details of the Airing \u0026amp; its Show\n        @param Airing the Airing object\n        @return a lengthy string which is suitable for displaying information about this Airing",
        "operationId": "PrintAiringLong",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dPrintAiringMedium": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Returns a string which is suitable for displaying information about this Airing. This contains the Airing\u0027s channel \u0026amp; a short time string as well as the title \u0026amp; episode name or a short description\n        @param Airing the Airing object\n        @return a string which is suitable for displaying information about this Airing",
        "operationId": "PrintAiringMedium",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dPrintAiringShort": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Returns a brief string which is suitable for displaying information about this Airing. This contains the Airing\u0027s channel \u0026amp; a short time string as well as the title\n        @param Airing the Airing object\n        @return a brief string which is suitable for displaying information about this Airing",
        "operationId": "PrintAiringShort",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dRecord": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Specifies that this Airing should be recorded. This is a Manul Recording.\n        @param Airing the Airing object\n        @return true if the call succeeds, otherwise a localized error message is returned",
        "operationId": "Record",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetDontLike": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Called to indicate that the content in this Airing is \"Not Liked\" by the user\n        @param Airing the Airing object",
        "operationId": "SetDontLike",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetManualRecordProperty": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Sets a property for a specified ManualRecord. This can be any name/value combination (but the name cannot be null). If the value is null;\n        then the specified property will be removed from this ManualRecord. This only impacts the return values from GetManualRecordProperty and has no other side effects.\n        @param Airing the Airing object which is a ManualRecord\n        @param PropertyName the name of the property\n        @param PropertyValue the value of the property\n        @since 7.0",
        "operationId": "SetManualRecordProperty",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "PropertyName",
            "in": "query"
          },
          {
            "name": "3",
            "type": "string",
            "required": true,
            "description": "PropertyValue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetRecordingName": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Sets the name for this recording. For Timed Recordings this will effect the title \u0026amp; associated attributes.\n        For ManualRecordings this will not have any side effects at all.\n        @param Airing the ManualRecord to set the name for\n        @param Name the name to set",
        "operationId": "SetRecordingName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetRecordingQuality": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Sets the recording quality for this Airing if it has been selected by the user as a manual record\n        @param Airing the Airing object\n        @param Quality the name of the recording quality",
        "operationId": "SetRecordingQuality",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Quality",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetRecordingTimes": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Modifies or creates a time-based recording that is associated with this Airing. This is also a type of Manual Record.\n        @param Airing the Airing object\n        @param StartTime the time the recording of this Airing should start\n        @param StopTime the time the recording of this Airing should stop\n        @return true if the call succeeds, otherwise a localized error message is returned",
        "operationId": "SetRecordingTimes",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "StartTime",
            "in": "query"
          },
          {
            "name": "3",
            "type": "integer",
            "required": true,
            "description": "StopTime",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetWatched": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Sets the watched flag for this Airing to true as if the user watched the show from start to finish\n        @param Airing the Airing object",
        "operationId": "SetWatched",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetWatchedTimes": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AiringAPI"
        ],
        "description": "Updates the Watched information for this airing. The AiringEndTime should be an airing-relative time which indicates the time the\n        user has watched the show up until. The new watched end time will be the maximum of this value and the current watched end time. The\n        RealStartTime is the time (in real time) the user started watching this program at. Internally SageTV will set the start time of the watched\n        data to be the minimum of the recording start time and the airing start time; and the \u0027real\u0027 end time to be the current time.\n        @param Airing the Airing object\n        @param WatchedEndTime an airing-relative time which indicates the time the user has watched the show up until\n        @param RealStartTime the time (in real time) the user started watching this program at\n        @since 7.0",
        "operationId": "SetWatchedTimes",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Airing",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "WatchedEndTime",
            "in": "query"
          },
          {
            "name": "3",
            "type": "integer",
            "required": true,
            "description": "RealStartTime",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAlbumArt": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AlbumAPI"
        ],
        "description": "Returns the album art for this Album.\n        @param Album the Album object\n        @return the album art for the specified Album, this can be fed into an Image Widget to display it",
        "operationId": "GetAlbumArt",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Album",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is MetaImage)",
            "schema": {
              "$ref": "#/definitions/MetaImage"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAlbumArtist": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AlbumAPI"
        ],
        "description": "Returns the artist for this Album. If there\u0027s more than one artist it will return the\n        localized string for the resource \"Various_Artists\". This defaults to \"Various\".\n        @param Album the Album object\n        @return the artist for the specified Album",
        "operationId": "GetAlbumArtist",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Album",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAlbumGenre": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AlbumAPI"
        ],
        "description": "Returns the genre for this Album\n        @param Album the Album object\n        @return the genre for the specified Album",
        "operationId": "GetAlbumGenre",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Album",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAlbumName": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AlbumAPI"
        ],
        "description": "Returns the name/title for this Album\n        @param Album the Album object\n        @return the name/title of the specified Album",
        "operationId": "GetAlbumName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Album",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAlbumTracks": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AlbumAPI"
        ],
        "description": "Gets all of the Airings (a \u0027meta\u0027 object referring to the music file in this case)\n        that are on this Album in the library. The returned list is sorted by the track number of each song.\n        @param Album the Album object to get the tracks for\n        @return an array of Airings which are the tracks on this Album",
        "operationId": "GetAlbumTracks",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Album",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Airing"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAlbumYear": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AlbumAPI"
        ],
        "description": "Returns the year this Album was recorded in\n        @param Album the Album object\n        @return the year the specified album was recorded in",
        "operationId": "GetAlbumYear",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Album",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAlbums": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AlbumAPI"
        ],
        "description": "Returns all of the Album objects in the library. This list is derived from the music files in the library.\n        @return an array of all of the Album objects in the library",
        "operationId": "GetAlbums",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Album"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAllMusicArtists": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AlbumAPI"
        ],
        "description": "Returns all of the artists for the music files in the library\n        @return an array of the artists for the music files in the library",
        "operationId": "GetAllMusicArtists",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAllMusicForArtist": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AlbumAPI"
        ],
        "description": "Gets all of the Airings (a \u0027meta\u0027 object referring to the music file in this case)\n        that have an artist that matches the passed in artist\n        @param Artist the name of the artist\n        @return an array of the Airings that correspond to music files by the specified artist",
        "operationId": "GetAllMusicForArtist",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Artist",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Airing"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAllMusicForGenre": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AlbumAPI"
        ],
        "description": "Gets all of the Airings (a \u0027meta\u0027 object referring to the music file in this case)\n        that have a genre that matches the passed in genre\n        @param Genre the name of the genre\n        @return an array of the Airings that correspond to music files by the specified genre",
        "operationId": "GetAllMusicForGenre",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Genre",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Airing"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAllMusicGenres": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AlbumAPI"
        ],
        "description": "Returns all of the genres for the music files in the library\n        @return an array of the genres for the music files in the library",
        "operationId": "GetAllMusicGenres",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetNumberOfTracks": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AlbumAPI"
        ],
        "description": "Returns the number of tracks that are on this Album\n        @param Album the Album object\n        @return the number of tracks that are on the specified Album",
        "operationId": "GetNumberOfTracks",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Album",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dHasAlbumArt": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AlbumAPI"
        ],
        "description": "Returns true if there is album art for this Album\n        @param Album the Album object\n        @return true if there is album art for this Album, false otherwise",
        "operationId": "HasAlbumArt",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Album",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsAlbumObject": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "AlbumAPI"
        ],
        "description": "Returns true if the argument is an Album object\n        @param Album the Object to test\n        @return true if the passed in object is an Album object, false otherwise",
        "operationId": "IsAlbumObject",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Album",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dAddInputForRFChannel": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceAPI"
        ],
        "description": "Returns a CaptureDeviceInput that corresponds to using the tuner input on the CaptureDevice locked to a certain channel.\n        For example, using the RF connection from your cable box to the capture card on channel 3 would required adding a new input this way.\n        @param CaptureDevice the name of the CaptureDevice to add the new input to\n        @param RFChannel the channel to tune to for this RF input\n        @return the name of the CaptureDeviceInput that was created which will act as an RF channel input",
        "operationId": "AddInputForRFChannel",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDevice",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "RFChannel",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetActiveCaptureDevices": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceAPI"
        ],
        "description": "Returns all of the CaptureDevices that are currently configured for use by SageTV\n        @return all of the CaptureDevices that are currently configured for use by SageTV",
        "operationId": "GetActiveCaptureDevices",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAudioCaptureSources": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceAPI"
        ],
        "description": "Returns an array of all the audio capture sources in the system, used with {@link #SetCaptureDeviceAudioSource SetCaptureDeviceAudioSource(CaptureDevice, AudioSource)}\n        @return an array of all the audio capture sources in the system",
        "operationId": "GetAudioCaptureSources",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetCaptureDeviceAudioSource": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceAPI"
        ],
        "description": "Gets the audio capture source for a corresponding CaptureDevice.\n        @param CaptureDevice the name of the CaptureDevice\n        @return the name of the audio capture source for the specified CaptureDevice; the empty string is returned if there is no separate audio capture source (i.e. multiplexed capture or video only capture)",
        "operationId": "GetCaptureDeviceAudioSource",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDevice",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetCaptureDeviceBroadcastStandard": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceAPI"
        ],
        "description": "Returns the name of the broadcast standard used for reception on this capture device.\n        NOTE: The method \u0027GetCaptureDeviceInputBroadcastStandard\u0027 should be used instead since the broadcast standard can change per-input\n        @param CaptureDevice the name of the CaptureDevice\n        @return the name of the broadcast standard used for reception on this capture device (i.e. NTSC, ATSC, DVB-S, etc.)\n        @since 5.1",
        "operationId": "GetCaptureDeviceBroadcastStandard",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDevice",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetCaptureDeviceCurrentRecordFile": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceAPI"
        ],
        "description": "Returns the file that is currently being recorded by this capture device\n        @param CaptureDevice the name of the CaptureDevice\n        @return the file that is currently being recorded by the specified capture device",
        "operationId": "GetCaptureDeviceCurrentRecordFile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDevice",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is MediaFile)",
            "schema": {
              "$ref": "#/definitions/MediaFile"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetCaptureDeviceDefaultQuality": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceAPI"
        ],
        "description": "Returns the default recording qualities for this CaptureDevice.\n        @param CaptureDevice the name of the CaptureDevice\n        @return the default recording quality for the specified CaptureDevice; if there is no default quality set it will return the empty string",
        "operationId": "GetCaptureDeviceDefaultQuality",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDevice",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetCaptureDeviceInputs": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceAPI"
        ],
        "description": "Returns all of the CaptureDeviceInputs for a given CaptureDevice.\n        @param CaptureDevice the name of the CaptureDevice\n        @return all of the CaptureDeviceInputs for the specified CaptureDevice.",
        "operationId": "GetCaptureDeviceInputs",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDevice",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetCaptureDeviceMerit": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceAPI"
        ],
        "description": "Gets the encoder merit for a CaptureDevice.\n        @param CaptureDevice the name of the CaptureDevice\n        @return The merit value for the specified CaptureDevice; If all else is equal, a capture device with a higher merit has higher priority.",
        "operationId": "GetCaptureDeviceMerit",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDevice",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetCaptureDeviceQualities": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceAPI"
        ],
        "description": "Returns the recording qualities which are supported by this CaptureDevice\n        @param CaptureDevice the name of the CaptureDevice\n        @return the recording qualities which are supported by the specified CaptureDevice",
        "operationId": "GetCaptureDeviceQualities",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDevice",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetCaptureDevices": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceAPI"
        ],
        "description": "Returns all of the CaptureDevices in the system that SageTV can use\n        @return the names of all of the CaptureDevices in the system that SageTV can use",
        "operationId": "GetCaptureDevices",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetConfiguredCaptureDeviceInputs": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceAPI"
        ],
        "description": "Returns all of the CaptureDeviceInputs that are currently configured for use by SageTV.\n        @return the names of all of the CaptureDeviceInputs that are currently configured for use by SageTV.",
        "operationId": "GetConfiguredCaptureDeviceInputs",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetLastUsedCaptureDevice": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceAPI"
        ],
        "description": "Returns the last CaptureDevice that was accessed by SageTV.\n        @return the name of the last CaptureDevice that was accessed by SageTV.",
        "operationId": "GetLastUsedCaptureDevice",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetLastUsedCaptureDeviceInput": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceAPI"
        ],
        "description": "Returns the last CaptureDeviceInput that was used by SageTV on the given CaptureDevice\n        @param CaptureDevice the name of the CaptureDevice\n        @return the name of the last CaptureDeviceInput that was used by SageTV on the given CaptureDevice",
        "operationId": "GetLastUsedCaptureDeviceInput",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDevice",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsCaptureDeviceANetworkEncoder": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceAPI"
        ],
        "description": "Returns true if a CaptureDevice is a Network Encoder\n        @param CaptureDevice the name of the CaptureDevice\n        @return true if the specified CaptureDevice is a Network Encoder",
        "operationId": "IsCaptureDeviceANetworkEncoder",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDevice",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsCaptureDeviceFunctioning": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceAPI"
        ],
        "description": "Returns whether or not a CaptureDevice is functioning (i.e. the device is offline)\n        @param CaptureDevice the name of the CaptureDevice\n        @return false if a CaptureDevice is NOT functioning (i.e. the device is offline), otherwise true",
        "operationId": "IsCaptureDeviceFunctioning",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDevice",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsCaptureDeviceHardwareEncoder": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceAPI"
        ],
        "description": "Returns true if the CaptureDevice is a hardware encoder\n        @param CaptureDevice the name of the CaptureDevice\n        @return true if the specified CaptureDevice is a hardware encoder",
        "operationId": "IsCaptureDeviceHardwareEncoder",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDevice",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsCaptureDeviceInUseByALiveClient": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceAPI"
        ],
        "description": "Returns true if the CaptureDevice is currently under control of a client who is (or was) watching live TV\n        @param CaptureDevice the name of the CaptureDevice\n        @return true if the specified CaptureDevice is currently under control of a client who is watching live/delayed TV",
        "operationId": "IsCaptureDeviceInUseByALiveClient",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDevice",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetCaptureDeviceAudioSource": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceAPI"
        ],
        "description": "Sets the audio capture source for a corresponding CaptureDevice\n        @param CaptureDevice the name of the CaptureDevice\n        @param AudioSource the name of the audio capture source, should be one of the values from {@link #GetAudioCaptureSources GetAudioCaptureSources()}",
        "operationId": "SetCaptureDeviceAudioSource",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDevice",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "AudioSource",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetCaptureDeviceDTVStandard": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceAPI"
        ],
        "description": "Sets the TV standard to use for a capture device for devices that support multiple digital TV standards. The only current\n        example of this is the Hauppauge HVR-4000 which support DVB-T, DVB-S and DVB-C.\n        @param CaptureDevice the name of the CaptureDevice\n        @param DTVStandard the DTV standard to use for this capture device, should be one of \"DVB-T\", \"DVB-S\" or \"DVB-C\"\n        @since 7.0",
        "operationId": "SetCaptureDeviceDTVStandard",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDevice",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "DTVStandard",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetCaptureDeviceDefaultQuality": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceAPI"
        ],
        "description": "Sets the default recording quality for a CaptureDevice\n        @param CaptureDevice the name of the CaptureDevice\n        @param Quality the default quality setting to use for the specified capture device, use null or the empty string to clear the setting",
        "operationId": "SetCaptureDeviceDefaultQuality",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDevice",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Quality",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetCaptureDeviceMerit": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceAPI"
        ],
        "description": "Sets the encoder merit for a CaptureDevice.\n        @param Merit The new merit value for the specified CaptureDevice",
        "operationId": "SetCaptureDeviceMerit",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDevice",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "Merit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dAutoScanChannelInfo": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceInputAPI"
        ],
        "description": "Tunes the CaptureDeviceInput to the specified physical channel and returns a list of the available channels. This call should only\n        be used if the CaptureDeviceInput is already under live control (i.e. {@link MediaPlayerAPI#WatchLive WatchLive()} or {@link MediaPlayerAPI#LockTuner LockTuner()} was called on it) or\n        if the input has not been configured for use yet. Otherwise this call may interfere with what is currently being recorded.\n        @param CaptureDeviceInput the name of the CaptureDeviceInput\n        @param ChannelNumber the channel string to tune to\n        @return a string describing the subchannels found scanning this channel, if no channels were found an empty or null string will be returned",
        "operationId": "AutoScanChannelInfo",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDeviceInput",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "ChannelNumber",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dAutoTuneChannelTest": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceInputAPI"
        ],
        "description": "Tunes the CaptureDeviceInput to the specified physical channel and indicates whether or not a signal is present. This call should only\n        be used if the CaptureDeviceInput is already under live control (i.e. {@link MediaPlayerAPI#WatchLive WatchLive()} or {@link MediaPlayerAPI#LockTuner LockTuner()} was called on it) or\n        if the input has not been configured for use yet. Otherwise this call may interfere with what is currently being recorded.\n        @param CaptureDeviceInput the name of the CaptureDeviceInput\n        @param ChannelNumber the channel string to tune to\n        @return true if the hardware detected a signal on the specified channel",
        "operationId": "AutoTuneChannelTest",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDeviceInput",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "ChannelNumber",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dConfigureInputForEPGDataLineup": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceInputAPI"
        ],
        "description": "Configures this CaptureDeviceInput to use the specified EPG Lineup.\n        @param CaptureDeviceInput the name of the CaptureDeviceInput to set the lineup on\n        @param Lineup the name of the Lineup to configure this CaptureDeviceInput for. This name should be obtained from a call to the EPG server\n        @return true if the Lineup was successfully configured for the specified CaptureDeviceInput",
        "operationId": "ConfigureInputForEPGDataLineup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDeviceInput",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Lineup",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dConfigureInputWithoutEPGData": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceInputAPI"
        ],
        "description": "Configures this CaptureDeviceInput to not use an EPG data source. It will instead create a generic lineup with numeric channels that\n        @param CaptureDeviceInput the name of the CaptureDeviceInput to use\n        @return true (the call will always succeed)",
        "operationId": "ConfigureInputWithoutEPGData",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDeviceInput",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetCaptureBrightness": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceInputAPI"
        ],
        "description": "Gets the brightness level for this CaptureDeviceInput. This is only valid for analog capture devices.\n        @param CaptureDeviceInput the name of the CaptureDeviceInput\n        @return the brightness level for the specified CaptureDeviceInput in the inclusive range 0-255",
        "operationId": "GetCaptureBrightness",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDeviceInput",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetCaptureContrast": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceInputAPI"
        ],
        "description": "Gets the contrast level for this CaptureDeviceInput. This is only valid for analog capture devices.\n        @param CaptureDeviceInput the name of the CaptureDeviceInput\n        @return the contrast level for the specified CaptureDeviceInput in the inclusive range 0-255",
        "operationId": "GetCaptureContrast",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDeviceInput",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetCaptureDeviceForInput": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceInputAPI"
        ],
        "description": "Returns the CaptureDevice for this CaptureDeviceInput\n        @param CaptureDeviceInput the name of the CaptureDeviceInput to use\n        @return the name of the CaptureDevice for the specified CaptureDeviceInput",
        "operationId": "GetCaptureDeviceForInput",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDeviceInput",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetCaptureDeviceInputBeingViewed": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceInputAPI"
        ],
        "description": "Returns the CaptureDeviceInput that is recording the MediaFile that is currently loaded by the MediaPlayer\n        @return the CaptureDeviceInput that is recording the MediaFile that is currently loaded by the MediaPlayer",
        "operationId": "GetCaptureDeviceInputBeingViewed",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetCaptureDeviceInputBroadcastStandard": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceInputAPI"
        ],
        "description": "Returns the name of the broadcast standard used for reception on this capture device input (can be different per-input)\n        @param CaptureDeviceInput the name of the CaptureDeviceInput\n        @return the name of the broadcast standard used for reception on this capture device input (i.e. NTSC, ATSC, DVB-S, etc.)\n        @since 7.0",
        "operationId": "GetCaptureDeviceInputBroadcastStandard",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDeviceInput",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetCaptureDeviceInputName": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceInputAPI"
        ],
        "description": "Returns the name of this CaptureDeviceInput connection without the CaptureDevice name prefixing it. This is not the\n        same as the \u0027name\u0027 of the CaptureDeviceInput used as the parameter. The String that uniquely identifies a CaptureDeviceInput\n        must always have the CaptureDevice\u0027s name included in it. Only use this return value for display purposes; do not use\n        it for anything else.\n        @param CaptureDeviceInput the name of the CaptureDeviceInput\n        @return the name of the specified CaptureDeviceInput connection without the CaptureDevice name prefixing it",
        "operationId": "GetCaptureDeviceInputName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDeviceInput",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetCaptureDeviceInputRecordingMediaFile": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceInputAPI"
        ],
        "description": "Returns the CaptureDeviceInput that is recording the specified MediaFile\n        @param MediaFile the MediaFile who\u0027s recording CaptureDeviceInput should be returned\n        @return the CaptureDeviceInput that is recording the specified MediaFile; null if that file is not being recorded currently",
        "operationId": "GetCaptureDeviceInputRecordingMediaFile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/MediaFile",
            "required": true,
            "description": "MediaFile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetCaptureHue": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceInputAPI"
        ],
        "description": "Gets the hue level for this CaptureDeviceInput. This is only valid for analog capture devices.\n        @param CaptureDeviceInput the name of the CaptureDeviceInput\n        @return the hue level for the specified CaptureDeviceInput in the inclusive range 0-255",
        "operationId": "GetCaptureHue",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDeviceInput",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetCaptureSaturation": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceInputAPI"
        ],
        "description": "Gets the saturation level for this CaptureDeviceInput. This is only valid for analog capture devices.\n        @param CaptureDeviceInput the name of the CaptureDeviceInput\n        @return the saturation level for the specified CaptureDeviceInput in the inclusive range 0-255",
        "operationId": "GetCaptureSaturation",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDeviceInput",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetCaptureSharpness": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceInputAPI"
        ],
        "description": "Gets the sharpness level for this CaptureDeviceInput. This is only valid for analog capture devices.\n        NOTE: On Linux this gets the audio volume level\n        @param CaptureDeviceInput the name of the CaptureDeviceInput\n        @return the sharpness level for the specified CaptureDeviceInput in the inclusive range 0-255",
        "operationId": "GetCaptureSharpness",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDeviceInput",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetConstantRFChannelInput": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceInputAPI"
        ],
        "description": "Returns the RF channel number that is used to receive the source signal. This is set using {@link CaptureDeviceAPI#AddInputForRFChannel AddInputForRFChannel()}\n        @param CaptureDeviceInput the name of the CaptureDeviceInput\n        @return the RF channel number used to receive the source signal on the specified CaptureDeviceInput",
        "operationId": "GetConstantRFChannelInput",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDeviceInput",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetInfraredTunerRemoteName": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceInputAPI"
        ],
        "description": "Returns the name of the device that is passed to the IR Tuner plugin for tuning control. Corresponds to a .ir file for current IR transmitters.\n        @param CaptureDeviceInput the name of the CaptureDeviceInput\n        @return the name of the external device codes used for the tuner plugin on the specified CaptureDeviceInput",
        "operationId": "GetInfraredTunerRemoteName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDeviceInput",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetInfraredTuningPlugin": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceInputAPI"
        ],
        "description": "Gets the name of the tuning plugin used for this CaptureDeviceInput\n        @param CaptureDeviceInput the name of the CaptureDeviceInput\n        @return the name of the tuning plugin currently used for the specified CaptureDeviceInput",
        "operationId": "GetInfraredTuningPlugin",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDeviceInput",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetInfraredTuningPluginPortNumber": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceInputAPI"
        ],
        "description": "Gets the port number used by the tuning plugin for this CaptureDeviceInput\n        @param CaptureDeviceInput the name of the CaptureDeviceInput\n        @return the port number of the tuning plugin currently used for the specified CaptureDeviceInput",
        "operationId": "GetInfraredTuningPluginPortNumber",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDeviceInput",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetInputMaximumChannelNumber": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceInputAPI"
        ],
        "description": "Returns the maximum channel number that this CaptureDeviceInput can tune to\n        @param CaptureDeviceInput the name of the CaptureDeviceInput\n        @return the maximum channel number for the specified CaptureDeviceInput",
        "operationId": "GetInputMaximumChannelNumber",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDeviceInput",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetInputMinimumChannelNumber": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceInputAPI"
        ],
        "description": "Returns the minimum channel number that this CaptureDeviceInput can tune to\n        @param CaptureDeviceInput the name of the CaptureDeviceInput\n        @return the minimum channel number for the specified CaptureDeviceInput",
        "operationId": "GetInputMinimumChannelNumber",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDeviceInput",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetLineupForCaptureDeviceInput": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceInputAPI"
        ],
        "description": "Returns the name of the lineup that this CaptureDeviceInput is configured to use\n        @param CaptureDeviceInput the name of the CaptureDeviceInput to use\n        @return the name of the lineups that is configured for use on the specified CaptureDeviceInput; returns null if the input is not configured",
        "operationId": "GetLineupForCaptureDeviceInput",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDeviceInput",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPhysicalInputType": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceInputAPI"
        ],
        "description": "Returns the type of input this is, such as: S-Video, Composite, TV Tuner, etc.\n        @param CaptureDeviceInput the name of the CaptureDeviceInput\n        @return the type of physical connector used for the specified CaptureDeviceInput",
        "operationId": "GetPhysicalInputType",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDeviceInput",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSignalStrength": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceInputAPI"
        ],
        "description": "Returns the current signal strength for this CaptureDeviceInput. This is only valid for Digital TV inputs.\n        The returned value will be between 0 and 100 inclusive. 0 is no signal and 100 is maximum signal strength.\n        @param CaptureDeviceInput the name of the CaptureDeviceInput to use\n        @return the current signal strength on the specified CaptureDeviceInput",
        "operationId": "GetSignalStrength",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDeviceInput",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsCaptureDeviceInputAudioVideo": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceInputAPI"
        ],
        "description": "Returns whether or not this CaptureDeviceInput captures both audio and video\n        @param CaptureDeviceInput the name of the CaptureDeviceInput\n        @return true if this input captures both audio and video, false if it just captures video",
        "operationId": "IsCaptureDeviceInputAudioVideo",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDeviceInput",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsExternallyTunedRFInput": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceInputAPI"
        ],
        "description": "Returns true if this input was created using {@link CaptureDeviceAPI#AddInputForRFChannel AddInputForRFChannel()} method call\n        @param CaptureDeviceInput the name of the CaptureDeviceInput\n        @return true if this input was created using {@link CaptureDeviceAPI#AddInputForRFChannel AddInputForRFChannel()} method call",
        "operationId": "IsExternallyTunedRFInput",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDeviceInput",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsRFSignalCableTV": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceInputAPI"
        ],
        "description": "Returns whether or not this CaptureDeviceInput tunes for Antenna or Cable if it\u0027s a TV Tuner input\n        @param CaptureDeviceInput the name of the CaptureDeviceInput\n        @return true if this input is connected to a Cable source, false if it uses Broadcast/Over-the-Air (OTA)",
        "operationId": "IsRFSignalCableTV",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDeviceInput",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dReleaseCaptureDeviceInput": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceInputAPI"
        ],
        "description": "Releases this CaptureDeviceInput from its currently configured lineup. It will no longer be considered \"configured\" or \"active\".\n        If its lineup is no longer is in use, it will be cleaned up on the next EPG maintenance cycle.\n        @param CaptureDeviceInput the name of the CaptureDeviceInput to use",
        "operationId": "ReleaseCaptureDeviceInput",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDeviceInput",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetCaptureBrightness": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceInputAPI"
        ],
        "description": "Sets the brightness for capture on this CaptureDeviceInput. This only affects analog capture devices\n        @param CaptureDeviceInput the name of the CaptureDeviceInput\n        @param Value the new value to set the brightness to, in the inclusive range 0-255. Use -1 to set it to the default.",
        "operationId": "SetCaptureBrightness",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDeviceInput",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "Value",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetCaptureContrast": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceInputAPI"
        ],
        "description": "Sets the contrast for capture on this CaptureDeviceInput. This only affects analog capture devices.\n        @param CaptureDeviceInput the name of the CaptureDeviceInput\n        @param Value the new value to set the contrast to, in the inclusive range 0-255. Use -1 to set it to the default.",
        "operationId": "SetCaptureContrast",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDeviceInput",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "Value",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetCaptureHue": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceInputAPI"
        ],
        "description": "Sets the hue for capture on this CaptureDeviceInput. This only affects analog capture devices.\n        @param CaptureDeviceInput the name of the CaptureDeviceInput\n        @param Value the new value to set the hue to, in the inclusive range 0-255. Use -1 to set it to the default.",
        "operationId": "SetCaptureHue",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDeviceInput",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "Value",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetCaptureSaturation": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceInputAPI"
        ],
        "description": "Sets the saturation for capture on this CaptureDeviceInput. This only affects analog capture devices\n        @param CaptureDeviceInput the name of the CaptureDeviceInput\n        @param Value the new value to set the saturation to, in the inclusive range 0-255. Use -1 to set it to the default.",
        "operationId": "SetCaptureSaturation",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDeviceInput",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "Value",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetCaptureSharpness": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceInputAPI"
        ],
        "description": "Sets the sharpness for capture on this CaptureDeviceInput. This only affects analog capture devices.\n        NOTE: On Linux this currently sets the audio capture volume level\n        @param CaptureDeviceInput the name of the CaptureDeviceInput\n        @param Value the new value to set the sharpness to, in the inclusive range 0-255. Use -1 to set it to the default.",
        "operationId": "SetCaptureSharpness",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDeviceInput",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "Value",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetInfraredTunerRemoteName": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceInputAPI"
        ],
        "description": "Sets the name of the device that is passed to the IR Tuner plugin for tuning control. Corresponds to a .ir file for current IR transmitters\n        @param CaptureDeviceInput the name of the CaptureDeviceInput\n        @param ExternalDeviceName the name of the external device the IR tuning plugin is supposed to control This value should be obtained from a call to (@link Configuration#GetRemotesForInfraredTuningPlugin GetRemotesForInfraredTuningPlugin()}",
        "operationId": "SetInfraredTunerRemoteName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDeviceInput",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "ExternalDeviceName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetInfraredTuningPluginAndPort": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceInputAPI"
        ],
        "description": "Sets the name and port number for the tuning plugin for a CaptureDeviceInput\n        @param CaptureDeviceInput the name of the CaptureDeviceInput\n        @param PluginName the name of the tuning plugin to use on the specified CaptureDeviceInput. This should be a value from {@link Configuration#GetInfraredTuningPlugins GetInfraredTuningPlugins()} Use the emptry string \"\" to set the CaptureDeviceInput to not use a plugin\n        @param PluginPortNumber the port number to configure the specified tuning plugin to use on the specified CaptureDeviceInput. Use 0 for the USB port.\n        @return true if the plugin was setup (if it requires hardware this validates the hardware is connected)",
        "operationId": "SetInfraredTuningPluginAndPort",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDeviceInput",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "PluginName",
            "in": "query"
          },
          {
            "name": "3",
            "type": "integer",
            "required": true,
            "description": "PluginPortNumber",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetRFSignalIsCableTV": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "CaptureDeviceInputAPI"
        ],
        "description": "Sets whether or not this CaptureDeviceInput tunes for Antenna or Cable if it\u0027s a TV Tuner input\n        @param CaptureDeviceInput the name of the CaptureDeviceInput\n        @param Value true if this input is connected to a Cable source, false if it uses Broadcast/Over-the-Air (OTA)",
        "operationId": "SetRFSignalIsCableTV",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDeviceInput",
            "in": "query"
          },
          {
            "name": "2",
            "type": "boolean",
            "required": true,
            "description": "Value",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dAddChannel": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ChannelAPI"
        ],
        "description": "Adds a new Channel to the database. The CallSign should not match that of any other channel; but this rule is not enforced.\n        The StationID is what is used as the unique key to identify a station. Be sure that if you\u0027re creating new station IDs they do not conflict with existing ones.\n        The safest way to pick a station ID (if you need to at random) is to make it less than 10000 and ensure that no channel already exists with that station ID.\n        @param CallSign the \u0027Name\u0027 to assign to the new Channel\n        @param Name the \u0027Description\u0027 to assign to the new Channel\n        @param Network the \u0027Network\u0027 that the Channel is part of (can be \"\")\n        @param StationID the unique ID to give to this Channel\n        @return the newly created Channel object, if the station ID is already in use it will return the existing Channel object, but updated with the passed in values",
        "operationId": "AddChannel",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CallSign",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Name",
            "in": "query"
          },
          {
            "name": "3",
            "type": "string",
            "required": true,
            "description": "Network",
            "in": "query"
          },
          {
            "name": "4",
            "type": "integer",
            "required": true,
            "description": "StationID",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Channel)",
            "schema": {
              "$ref": "#/definitions/Channel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dClearChannelMappingOnLineup": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ChannelAPI"
        ],
        "description": "Clears any associated channel mappings that were created for this Channel on the specified Lineup\n        @param Channel the Channel object\n        @param Lineup the name of the Lineup",
        "operationId": "ClearChannelMappingOnLineup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Channel",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Lineup",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dClearPhysicalChannelMappingsOnLineup": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ChannelAPI"
        ],
        "description": "Clears any associated physical channel mappings that were created for this Channel on the specified Lineup\n        @param Channel the Channel object\n        @param Lineup the name of the Lineup\n       \n        @since 5.1",
        "operationId": "ClearPhysicalChannelMappingsOnLineup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Channel",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Lineup",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAllChannels": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ChannelAPI"
        ],
        "description": "Returns all of the Channels that are defined in the system\n        @return all of the Channel objects that are defined in the system",
        "operationId": "GetAllChannels",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Channel"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetChannelDescription": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ChannelAPI"
        ],
        "description": "Gets the descriptive name for this Channel. This is the longer text string.\n        @param Channel the Channel Object\n        @return the longer descriptive name for the specified Channel",
        "operationId": "GetChannelDescription",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Channel",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetChannelForStationID": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ChannelAPI"
        ],
        "description": "Returns the Channel object that has the corresponding station ID. The station ID is retrieved using {@link #GetStationID GetStationID()}\n        @param StationID the station ID to look up\n        @return the Channel with the specified station ID",
        "operationId": "GetChannelForStationID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "integer",
            "required": true,
            "description": "StationID",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Channel)",
            "schema": {
              "$ref": "#/definitions/Channel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetChannelLogo": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ChannelAPI"
        ],
        "description": "Returns a Channel logo for the requested Channel if one exists. This can provide more detailed requests then the single argument GetChannelLogo call.\n        @param Channel the Channel object\n        @param Type the type of image, can be one of \"Small\", \"Med\" or \"Large\" (all logos have all sizes available, w/ the exception of user-supplied logos)\n        @param Index the 0-based index of the image to retrieve when multiple images exist for a given Type (there are only ever 0, 1 or 2 logos for a channel)\n        @param Fallback should be true if an alternate image is allowed (this enables checking user-supplied logos first, as well as falling back to the primary logo if a secondary one is requested but does not exist)\n        @return a MetaImage corresponding to the requested image, or null if no image matching the requested parameters is found or an invalid Type is specified\n        @since 7.1",
        "operationId": "GetChannelLogo",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Channel",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Type",
            "in": "query"
          },
          {
            "name": "3",
            "type": "integer",
            "required": true,
            "description": "Index",
            "in": "query"
          },
          {
            "name": "4",
            "type": "boolean",
            "required": true,
            "description": "Fallback",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is MetaImage)",
            "schema": {
              "$ref": "#/definitions/MetaImage"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetChannelLogoCount": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ChannelAPI"
        ],
        "description": "Returns a count of logos for this channel. This will either be 0, 1 or 2. This does NOT include user-supplied channel logos.\n        Since all channel logos have all types, this does not require a type argument.\n        @param Channel the Channel object\n        @return the number of logos for the specified Channel (does NOT include user-supplied logos)\n        @since 7.1",
        "operationId": "GetChannelLogoCount",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Channel",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetChannelLogoURL": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ChannelAPI"
        ],
        "description": "Returns a Channel logo URL for the requested Channel if one exists. This can provide more detailed requests then the single argument GetChannelLogoURL call.\n        @param Channel the Channel object\n        @param Type the type of image, can be one of \"Small\", \"Med\" or \"Large\" (all logos have all sizes available, w/ the exception of user-supplied logos)\n        @param Index the 0-based index of the image to retrieve when multiple images exist for a given Type (there are only ever 0, 1 or 2 logos for a channel)\n        @param Fallback should be true if an alternate image is allowed (this enables checking user-supplied logos first, as well as falling back to the primary logo if a secondary one is requested but does not exist)\n        @return a URL corresponding to the requested image, or null if no image matching the requested parameters is found or an invalid Type is specified\n        @since 8.0",
        "operationId": "GetChannelLogoURL",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Channel",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Type",
            "in": "query"
          },
          {
            "name": "3",
            "type": "integer",
            "required": true,
            "description": "Index",
            "in": "query"
          },
          {
            "name": "4",
            "type": "boolean",
            "required": true,
            "description": "Fallback",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetChannelName": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ChannelAPI"
        ],
        "description": "Gets the name for this Channel. This is the Channel\u0027s call sign.\n        @param Channel the Channel Object\n        @return the name (call sign) for the specified Channel",
        "operationId": "GetChannelName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Channel",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetChannelNetwork": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ChannelAPI"
        ],
        "description": "Gets the name of the associated network for this Channel. This is a way of grouping kinds of Channels together.\n        @param Channel the Channel Object\n        @return the network name for the specified Channel",
        "operationId": "GetChannelNetwork",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Channel",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetChannelNumber": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ChannelAPI"
        ],
        "description": "Gets the channel number to tune to for this Channel. SageTV will return the first channel number it finds for this Channel since there may be multiple ones.\n        @param Channel the Channel Object\n        @return a channel number associated with this Channel",
        "operationId": "GetChannelNumber",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Channel",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetChannelNumberForLineup": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ChannelAPI"
        ],
        "description": "Gets the channel number to tune to for this Channel on the specified lineup.\n        SageTV will return the first channel number it finds for this Channel on the lineup since there may be multiple ones.\n        @param Channel the Channel object\n        @param Lineup the name of the Lineup\n        @return the channel number for the specified Channel on the specified Lineup",
        "operationId": "GetChannelNumberForLineup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Channel",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Lineup",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetChannelNumbersForLineup": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ChannelAPI"
        ],
        "description": "Gets the channel numbers which can be used to tune this Channel on the specified lineup.\n        @param Channel the Channel object\n        @param Lineup the name of the Lineup\n        @return the channel numbers for the specified Channel on the specified Lineup",
        "operationId": "GetChannelNumbersForLineup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Channel",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Lineup",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPhysicalChannelNumberForLineup": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ChannelAPI"
        ],
        "description": "Gets the physical channel number to tune to for this Channel on the specified lineup.\n        @param Channel the Channel object\n        @param Lineup the name of the Lineup\n        @return the physical channel number for the specified Channel on the specified Lineup\n       \n        @since 5.1",
        "operationId": "GetPhysicalChannelNumberForLineup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Channel",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Lineup",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetStationID": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ChannelAPI"
        ],
        "description": "Returns an ID which can be used with {@link #GetChannelForStationID GetChannelForStationID()} for doing keyed lookups of Channel objects\n        @param Channel the Channel object\n        @return the station ID for the specified Channel",
        "operationId": "GetStationID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Channel",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsChannelObject": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ChannelAPI"
        ],
        "description": "Returns true if the argument is a Channel object. Automatic type conversion is NOT done in this call.\n        @param Channel the object to test\n        @return true if the argument is a Channel object",
        "operationId": "IsChannelObject",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Channel",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsChannelRemappedOnLineup": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ChannelAPI"
        ],
        "description": "Returns true if the user has remapped this Channel to a different number than it\u0027s default on the specified Lineup\n        @param Channel the Channel object\n        @param Lineup the name of the Lineup\n        @return true if the user has remapped this Channel to a different number than it\u0027s default on the specified Lineup",
        "operationId": "IsChannelRemappedOnLineup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Channel",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Lineup",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsChannelViewable": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ChannelAPI"
        ],
        "description": "Returns true if there is a configured lineup for which this channel is viewable.\n        @param Channel the Channel object\n        @return true if there is a configured lineup for which this channel is viewable.",
        "operationId": "IsChannelViewable",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Channel",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsChannelViewableOnLineup": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ChannelAPI"
        ],
        "description": "Returns true if this Channel is viewable on the specified Lineup\n        @param Channel the Channel object\n        @param Lineup the name of the Lineup\n        @return true if this Channel is viewable on the specified Lineup",
        "operationId": "IsChannelViewableOnLineup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Channel",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Lineup",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsChannelViewableOnNumberOnLineup": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ChannelAPI"
        ],
        "description": "Returns true if this Channel is viewable on the specified Lineup on the specified channel number\n        @param Channel the Channel object\n        @param ChannelNumber the channel number to check\n        @param Lineup the name of the Lineup\n        @return true if this Channel is viewable on the specified Lineup on the specified channel number",
        "operationId": "IsChannelViewableOnNumberOnLineup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Channel",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "ChannelNumber",
            "in": "query"
          },
          {
            "name": "3",
            "type": "string",
            "required": true,
            "description": "Lineup",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsPhysicalChannelRemappedOnLineup": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ChannelAPI"
        ],
        "description": "Returns true if the user has remapped this physical Channel to a different physical number than it\u0027s default on the specified Lineup\n        @param Channel the Channel object\n        @param Lineup the name of the Lineup\n        @return true if the user has remapped this physical Channel to a different number than it\u0027s default on the specified Lineup\n       \n        @since 5.1",
        "operationId": "IsPhysicalChannelRemappedOnLineup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Channel",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Lineup",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetChannelMappingForLineup": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ChannelAPI"
        ],
        "description": "Maps a channel on a lineup to a new channel number.\n        @param Channel the Channel object\n        @param Lineup the name of the Lineup\n        @param NewNumber the new channel number to use for this Channel",
        "operationId": "SetChannelMappingForLineup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Channel",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Lineup",
            "in": "query"
          },
          {
            "name": "3",
            "type": "string",
            "required": true,
            "description": "NewNumber",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetChannelMappingsForLineup": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ChannelAPI"
        ],
        "description": "Maps a channel on a lineup to a new channel number(s).\n        @param Channel the Channel object\n        @param Lineup the name of the Lineup\n        @param NewNumbers the new channel numbers to use for this Channel\n        @since 6.4.3",
        "operationId": "SetChannelMappingsForLineup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Channel",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Lineup",
            "in": "query"
          },
          {
            "name": "3",
            "type": "string",
            "required": true,
            "description": "NewNumbers",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetChannelViewabilityForChannelNumberOnLineup": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ChannelAPI"
        ],
        "description": "Sets whether or not the specified Channel is viewable on the specified number on the specified Lineup\n        @param Channel the Channel object\n        @param ChannelNumber the channel number to set the viewability state for\n        @param Lineup the name of the Lineup\n        @param Viewable true if is viewable, false if it is not",
        "operationId": "SetChannelViewabilityForChannelNumberOnLineup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Channel",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "ChannelNumber",
            "in": "query"
          },
          {
            "name": "3",
            "type": "string",
            "required": true,
            "description": "Lineup",
            "in": "query"
          },
          {
            "name": "4",
            "type": "boolean",
            "required": true,
            "description": "Viewable",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetChannelViewabilityForChannelOnLineup": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ChannelAPI"
        ],
        "description": "Sets whether or not the specified Channel is viewable on the specified Lineup. This affects all channel numbers it appears on.\n        @param Channel the Channel object\n        @param Lineup the name of the Lineup\n        @param Viewable true if is viewable, false if it is not",
        "operationId": "SetChannelViewabilityForChannelOnLineup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Channel",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Lineup",
            "in": "query"
          },
          {
            "name": "3",
            "type": "boolean",
            "required": true,
            "description": "Viewable",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetPhysicalChannelMappingForLineup": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ChannelAPI"
        ],
        "description": "Maps a Channel on a lineup to a new physical channel number.\n        @param Channel the Channel object\n        @param Lineup the name of the Lineup\n        @param NewNumber the new phyical channel number to use for this Channel\n       \n        @since 5.1",
        "operationId": "SetPhysicalChannelMappingForLineup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Channel",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Lineup",
            "in": "query"
          },
          {
            "name": "3",
            "type": "string",
            "required": true,
            "description": "NewNumber",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dAddLibraryImportPath": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Adds a new file path to the list of paths that SageTV checks for library import files. This path will\n        be used to search for music, video and picture files.\n        @param NewPath the file path to add to the list of library import paths",
        "operationId": "AddLibraryImportPath",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "NewPath",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dAddMusicLibraryImportPath": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Adds a new file path to the list of paths that SageTV checks for library import files. This path will\n        be used to search for music files only.\n        @param NewPath the file path to add to the list of library import paths for music files",
        "operationId": "AddMusicLibraryImportPath",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "NewPath",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dAddPictureLibraryImportPath": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Adds a new file path to the list of paths that SageTV checks for library import files. This path will\n        be used to search for picture files only.\n        @param NewPath the file path to add to the list of library import paths for picture files",
        "operationId": "AddPictureLibraryImportPath",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "NewPath",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dAddRemoteForInfraredTuningPlugin": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Creates a new \u0027Remote Control\u0027 with the specified name for the specified plugin. Depending upon the plugin, this may require\n        the user to perform some interaction before it returns.\n        @param PluginName the name of the infrared tuning plugin\n        @param PluginPortNumber the port number of the tuning plugin, 0 if there is no port for it\n        @param RemoteName the name to use for the newly created \u0027Remote Control\u0027\n        @return the RemoteName parameter will be returned if a new \u0027Remote Control\u0027 is created, null will be returned if one already exists with that name",
        "operationId": "AddRemoteForInfraredTuningPlugin",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "PluginName",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "PluginPortNumber",
            "in": "query"
          },
          {
            "name": "3",
            "type": "string",
            "required": true,
            "description": "RemoteName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dAddVideoDirectory": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Adds a new directory to SageTV\u0027s list of directories that it can record video to. Also specifies what rule \u0026amp; size to use\n        when managing the diskspace for this directory.\n        @param Directory the directory to add as a video directory\n        @param Rule the diskspace rule to use for this directory see {@link #GetVideoDiskspaceRules GetVideoDiskspaceRules()}\n        @param Size the size to use for the specified diskspace rule and directory",
        "operationId": "AddVideoDirectory",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Directory",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Rule",
            "in": "query"
          },
          {
            "name": "3",
            "type": "integer",
            "required": true,
            "description": "Size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dAddVideoLibraryImportPath": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Adds a new file path to the list of paths that SageTV checks for library import files. This path will\n        be used to search for video files only.\n        @param NewPath the file path to add to the list of library import paths for video files",
        "operationId": "AddVideoLibraryImportPath",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "NewPath",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dCanDoNativeOutputResolution": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns true if this device can do native output resolutions (where output resolution\n        matches the format of the media being played)\n        @return true if this device can do native output resolutions\n       \n        @since 6.3",
        "operationId": "CanDoNativeOutputResolution",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dChangeVideoDirectory": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Changes the location of a given video directory, or modifies the diskspace rule or diskspace rule size for a video directory.\n        @param OldDirectory the currently configured path for the video directory that is to have its path or rules modified\n        @param NewDirectory the new file path to use for the video directory (this can be the same as OldDirectory)\n        @param NewRule the diskspace rule to use for this video directory, see {@link #GetVideoDiskspaceRules GetVideoDiskspaceRules()}\n        @param NewSize the size to use for this diskspace rule",
        "operationId": "ChangeVideoDirectory",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "OldDirectory",
            "in": "query"
          },
          {
            "name": "2",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "NewDirectory",
            "in": "query"
          },
          {
            "name": "3",
            "type": "string",
            "required": true,
            "description": "NewRule",
            "in": "query"
          },
          {
            "name": "4",
            "type": "integer",
            "required": true,
            "description": "NewSize",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAllTimeZones": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the list of all of the valid time zone names\n        @return the list of all of the valid time zone names",
        "operationId": "GetAllTimeZones",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (value type is java.util.Vector)",
            "schema": {
              "$ref": "#/definitions/java.util.Vector"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAnalogVideoFormat": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the analog video format that should be used for capture and playback. Valid values are \"NTSC\" or \"PAL\"\n        @return the analog video format that should be used for capture and playback",
        "operationId": "GetAnalogVideoFormat",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAspectRatioMode": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns the localized name of the aspect ratio mode currently in use.\n        @return the localized name of the aspect ratio mode currently in use",
        "operationId": "GetAspectRatioMode",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAspectRatioModes": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the list of localized names for the aspect ratio modes\n        @return the list of localized names for the aspect ratio modes",
        "operationId": "GetAspectRatioModes",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAudioDecoderFilter": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the name of the DirectShow audio decoder filter that\u0027s used for MPEG2 playback (Windows only)\n        @return the name of the DirectShow audio decoder filter that\u0027s used for MPEG2 playback",
        "operationId": "GetAudioDecoderFilter",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAudioDecoderFilters": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the list of the audio decoder filters that are available in the system for MPEG2 playback (Windows only)\n        @return the list of the audio decoder filters that are available in the system for MPEG2 playback",
        "operationId": "GetAudioDecoderFilters",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAudioDelay": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the audio delay in milliseconds to apply when playing back MPEG2 files (Windows only)\n        @return the audio delay in milliseconds to apply when playing back MPEG2 files",
        "operationId": "GetAudioDelay",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAudioOutput": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns a string describing the currently selected audio output (empty string if this can\u0027t be configured)\n        @return a string describing the currently selected audio output (empty string if this can\u0027t be configured)\n       \n        @since 6.3",
        "operationId": "GetAudioOutput",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAudioOutputOptions": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns a list of the possible audio outputs. This is currently only used\n        on media extender devices that have adjustable audio outputs.\n        @return an array of the audio outputs that can be used, null if this change is not supported\n       \n        @since 6.3",
        "operationId": "GetAudioOutputOptions",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAudioRenderFilter": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the name of the DirectShow audio renderer filter that\u0027s used for all playback except DVDs (Windows only)\n        @return the name of the DirectShow audio renderer filter that\u0027s used for playback except DVDs",
        "operationId": "GetAudioRenderFilter",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAudioRendererFilters": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the list of DirectShow audio renderer filters that are available on the system (Windows Only).\n        @return the list of DirectShow audio renderer filters that are available on the system",
        "operationId": "GetAudioRendererFilters",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (value type is java.util.Vector)",
            "schema": {
              "$ref": "#/definitions/java.util.Vector"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAutodialForInternet": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns true if SageTV should attempt to autodial before accessing the Internet\n        @return true if SageTV should attempt to autodial before accessing the Internet",
        "operationId": "GetAutodialForInternet",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAvailableCountries": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the names of the countries that can be used in the {@link #SetCountry SetCountry()} call.\n        @return the possible names for country selection",
        "operationId": "GetAvailableCountries",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAvailableUILanguages": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the list of languages that are available to be used for the user interface.\n        @return the list of languages that are available to be used for the user interface",
        "operationId": "GetAvailableUILanguages",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetBitTimeForInfraredTuningPlugin": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the \u0027bit time\u0027 detected by this plugin for the specified remote\n        @param PluginName the name of the infrared tuning plugin\n        @param PluginPortNumber the port number of the tuning plugin, 0 if there is no port for it\n        @param RemoteName the name of the \u0027Remote Control\u0027\n        @return the \u0027bit time\u0027 of the specified \u0027Remote Control\u0027, or zero if the plugin doesn\u0027t have that information",
        "operationId": "GetBitTimeForInfraredTuningPlugin",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "PluginName",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "PluginPortNumber",
            "in": "query"
          },
          {
            "name": "3",
            "type": "string",
            "required": true,
            "description": "RemoteName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetButtonDelayForInfraredTuningPlugin": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the minimum delay in milliseconds that is required between sending consecutive commands using the specified \u0027Remote Control\u0027.\n        @param PluginName the name of the infrared tuning plugin\n        @param PluginPortNumber the port number of the tuning plugin, 0 if there is no port for it\n        @param RemoteName the name of the \u0027Remote Control\u0027\n        @return the minimum required delay between commands in milliseconds",
        "operationId": "GetButtonDelayForInfraredTuningPlugin",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "PluginName",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "PluginPortNumber",
            "in": "query"
          },
          {
            "name": "3",
            "type": "string",
            "required": true,
            "description": "RemoteName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetCarrierFrequencyForInfraredTuningPlugin": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the carrier frequency detected by this plugin for the specified remote\n        @param PluginName the name of the infrared tuning plugin\n        @param PluginPortNumber the port number of the tuning plugin, 0 if there is no port for it\n        @param RemoteName the name of the \u0027Remote Control\u0027\n        @return the carrier frequency of the specified \u0027Remote Control\u0027, or zero if the plugin doesn\u0027t have that information",
        "operationId": "GetCarrierFrequencyForInfraredTuningPlugin",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "PluginName",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "PluginPortNumber",
            "in": "query"
          },
          {
            "name": "3",
            "type": "string",
            "required": true,
            "description": "RemoteName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetCommandsForInfraredTuningPlugin": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the list of commands for the specified \u0027Remote Control\u0027 for the specified plugin\n        @param PluginName the name of the infrared tuning plugin\n        @param PluginPortNumber the port number of the tuning plugin, 0 if there is no port for it\n        @param RemoteName the name of the \u0027Remote Control\u0027\n        @return the list of commands for the specified \u0027Remote Control\u0027 for the specified plugin",
        "operationId": "GetCommandsForInfraredTuningPlugin",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "PluginName",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "PluginPortNumber",
            "in": "query"
          },
          {
            "name": "3",
            "type": "string",
            "required": true,
            "description": "RemoteName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is java.util.Vector)",
            "schema": {
              "$ref": "#/definitions/java.util.Vector"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetConfirmCommandForInfraredTuningPlugin": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the command that is to be sent as the last command to complete a channel change sequence. This is for devices that require an\n        \u0027Enter\u0027 or other type of confirmation key to be pressed after the numeric channel codes are sent.\n        @param PluginName the name of the infrared tuning plugin\n        @param PluginPortNumber the port number of the tuning plugin, 0 if there is no port for it\n        @param RemoteName the name of the \u0027Remote Control\u0027\n        @return the name of the command from this \u0027Remote Control\u0027 to use to confirm a channel change",
        "operationId": "GetConfirmCommandForInfraredTuningPlugin",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "PluginName",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "PluginPortNumber",
            "in": "query"
          },
          {
            "name": "3",
            "type": "string",
            "required": true,
            "description": "RemoteName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetCountry": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the country that SageTV is configured for. This is used for determining the frequencies used for tuning television signals.\n        @return the name of the country that SageTV is configured for",
        "operationId": "GetCountry",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetCurrentlyAiringProgramsStartLive": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns true if the system is configured to start any program that is currently airing\n        from live, false otherwise\n        @return true if the system is configured to start any program that is currently airing from live, false otherwise\n        @since 8.1",
        "operationId": "GetCurrentlyAiringProgramsStartLive",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetDVBCRegion": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the the provider within the current country that the user has for DVB-C tuning purposes.\n        Must have been set with a call to {@link #SetDVBCRegion SetDVBCRegion(DVBCRegion)}\n        @return the name of the provider the user has for DVB-C\n       \n        @since 5.1",
        "operationId": "GetDVBCRegion",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetDVBCRegions": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the names of the DVB-C providers for the configured country which are used for dividing it up into\n        different areas for DVB-C reception. Returns a zero-length list if there are one or no providers in this country.\n        Use the results from this in a call to {@link #SetDVBCRegion SetDVBCRegion(DVBCRegion)}\n        @return the provider names in the country to use for DVBC reception differentiation\n       \n        @since 5.1",
        "operationId": "GetDVBCRegions",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetDVBSRegion": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the the provider within the current country that the user has for DVB-S tuning purposes.\n        Must have been set with a call to {@link #SetDVBSRegion SetDVBSRegion(DVBSRegion)}\n        @return the name of the provider the user has for DVB-S\n       \n        @since 5.1",
        "operationId": "GetDVBSRegion",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetDVBSRegions": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the names of the providers for the configured country which are used for dividing it up into\n        different areas for DVB-S reception. Returns a zero-length list if there are one or no providers within the country.\n        Use the results from this in a call to {@link #SetDVBSRegion SetDVBSRegion(DVBSRegion)}\n        @return the providers names in the country to use for DVBS reception differentiation\n       \n        @since 5.1",
        "operationId": "GetDVBSRegions",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetDVBTRegion": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the the region within the current country that the user is in for DVB-T tuning purposes.\n        Must have been set with a call to {@link #SetDVBTRegion SetDVBTRegion(DVBTRegion)}\n        @return the name of the region the user is in\n       \n        @since 5.1",
        "operationId": "GetDVBTRegion",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetDVBTRegions": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the names of the regions for the configured country which are used for dividing it up into\n        different areas for DVB-T reception. Returns a zero-length list if there are no sub-regions within the country.\n        Use the results from this in a call to {@link #SetDVBTRegion SetDVBTRegion(DVBTRegion)}\n        @return the region names in the country to use for DVBT reception differentiation\n       \n        @since 5.1",
        "operationId": "GetDVBTRegions",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetDVDAudioDecoderFilter": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the name of the DirectShow audio decoder filter that\u0027s used for DVD playback (Windows only)\n        @return the name of the DirectShow audio decoder filter that\u0027s used for DVD playback",
        "operationId": "GetDVDAudioDecoderFilter",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetDVDAudioRenderFilter": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the name of the DirectShow audio renderer filter that\u0027s used for DVD playback (Windows only)\n        @return the name of the DirectShow audio renderer filter that\u0027s used for DVD playback",
        "operationId": "GetDVDAudioRenderFilter",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetDVDDXVADeinterlaceMode": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the preferred DXVA Deinterlacing configuration setting (Windows only).\n        This is used when playing back DVDs.\n        @return the preferred DXVA Deinterlacing configuration setting",
        "operationId": "GetDVDDXVADeinterlaceMode",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetDVDDXVAMpegMode": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the preferred DXVA MPEG Mode configuration setting (Windows only). This will be A, B, C or D (or Default if not set)\n        This is used when playing back DVDs.\n        @return the preferred DXVA MPEG Mode configuration setting",
        "operationId": "GetDVDDXVAMpegMode",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetDVDVideoDecoderFilter": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the name of the DirectShow video decoder filter that\u0027s used for DVD playback (Windows only)\n        @return the name of the DirectShow video decoder filter that\u0027s used for DVD playback",
        "operationId": "GetDVDVideoDecoderFilter",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetDVDVideoRenderFilter": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the video renderer filter that should be used for DVD playback. Possible values are \"VMR9\",\n        \"Overlay\" and the localized \"Default\" string\n        @return the video renderer filter that should be used for DVD playback",
        "operationId": "GetDVDVideoRenderFilter",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetDXVADeinterlaceMode": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the preferred DXVA Deinterlacing configuration setting (Windows only).\n        This is used when playing back MPEG2 files.\n        @return the preferred DXVA Deinterlacing configuration setting",
        "operationId": "GetDXVADeinterlaceMode",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetDXVADeinterlaceModes": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the list of potential DXVA Deinterlacing Capabilities (Widows only)\n        @return the list of potential DXVA Deinterlacing Capabilities",
        "operationId": "GetDXVADeinterlaceModes",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetDXVAMpegMode": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the preferred DXVA MPEG Mode configuration setting (Windows only). This will be A, B, C or D (or Default if not set)\n        This is used when playing back MPEG2 files.\n        @return the preferred DXVA MPEG Mode configuration setting",
        "operationId": "GetDXVAMpegMode",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetDXVAMpegModes": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the list of available DXVA MPEG Modes. This will return {\"A\", \"B\", \"C\", \"D\"}\n        @return the list of available DXVA MPEG Modes: {\"A\", \"B\", \"C\", \"D\"}",
        "operationId": "GetDXVAMpegModes",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetDefaultAudioLanguage": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the name of the preferred default language when selecting which audio stream to playback.\n        @return the name of the preferred default language when selecting which audio stream to playback",
        "operationId": "GetDefaultAudioLanguage",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetDefaultRecordingQuality": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the name of the default quality that is used to record television.\n        @return the name of the default quality that is used to record television",
        "operationId": "GetDefaultRecordingQuality",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetDefaultSubpicLanguage": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the name of the preferred default language when selecting which subpicture stream to playback. This\n        will be the empty string if subtitles are preferred to be off by default.\n        @return the name of the preferred default language when selecting which subpicture stream to playback or the empty string for no subtitles",
        "operationId": "GetDefaultSubpicLanguage",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetDiskspaceRuleForVideoDirectory": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns the diskspace rule that SageTV should use when managing the disk space in a given directory.\n        The names for the rules are localized versions of the strings \"Use Only\", \"Use All\" and \"Leave Free\"\n        @param Directory the video directory to get the diskspace rule for\n        @return the diskspace rule for the specified video directory",
        "operationId": "GetDiskspaceRuleForVideoDirectory",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "Directory",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetDiskspaceSizeForVideoDirectory": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns the size (in bytes) that should be applied to the specified directory for its configured diskspace rule\n        @param Directory the video directory to get the size for that applies to its rule\n        @return the size (in bytes) that should be applied to the specified directory for its configured diskspace rule",
        "operationId": "GetDiskspaceSizeForVideoDirectory",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "Directory",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetDisplayAspectRatio": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns the display aspect ratio that is set for the current display device being used\n        @return the display aspect ratio that is set for the current display device being used\n        @since 5.1",
        "operationId": "GetDisplayAspectRatio",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetDscalerMode": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the mode that DScaler is currently configured to run in when it is used (Windows only)\n        @return the mode that DScaler is currently configured to run in when it is used",
        "operationId": "GetDscalerMode",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetDscalerModes": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the list of the available modes that DScaler can be run in\n        @return the list of the available modes that DScaler can be run in",
        "operationId": "GetDscalerModes",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetDscalerPlugin": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the plugin that DScaler is currently configured to use when it is in \"Plugin\" mode.\n        @return the plugin that DScaler is currently configured to use when it is in \"Plugin\" mode",
        "operationId": "GetDscalerPlugin",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetDscalerPlugins": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns the list of plugins that are supported by DScaler. These are used when DScaler is in \"Plugin\" mode. (Windows only)\n        @return the list of plugins that are supported by DScaler",
        "operationId": "GetDscalerPlugins",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetHDMIAutodetectedConnector": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns a string describing the type of connection autodetected on HDMI (currently only used on media extenders)\n        @return a string describing the type of connection autodetected on HDMI (empty string if this isn\u0027t supported)\n       \n        @since 6.3",
        "operationId": "GetHDMIAutodetectedConnector",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetIRCodesLinkedToSageCommand": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns the infrared codes that are linked to the given SageTV Command. When one of these IR codes is received; that will cause the\n        specified SageTV Command to get executed.\n        @param SageCommand the SageTV Command for which the IR codes should be retrieved\n        @return the infrared codes that are linked to the specified SageTV Command",
        "operationId": "GetIRCodesLinkedToSageCommand",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "SageCommand",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetInactivityTimeout": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the inactivity timeout in milliseconds. The hook InactivityTimeout() will be called whenever the system experiences inactivity\n        for this amount of time.\n        @return the inactivity timeout in milliseconds",
        "operationId": "GetInactivityTimeout",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetInfraredReceiverPort": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the name of the port that the infrared receiver is connected to.\n        @return the name of the port that the infrared receiver is connected to; will be a value like: \"COM1\", \"COM2\" or \"USB\"",
        "operationId": "GetInfraredReceiverPort",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetInfraredTuningPlugins": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the list of infrared tuning plugins that are available for use with SageTV\n        @return the list of infrared tuning plugins that are available for use with SageTV",
        "operationId": "GetInfraredTuningPlugins",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetKeystrokesLinkedToSageCommand": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns the keystroke names that are linked to the given SageTV Command. When one of these keystrokes is received; that will cause the\n        specified SageTV Command to get executed.\n        @param SageCommand the SageTV Command for which the keystrokes should be retrieved\n        @return the keystrokes that are linked to the specified SageTV Command",
        "operationId": "GetKeystrokesLinkedToSageCommand",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "SageCommand",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetLibraryImportPaths": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns all of the library import paths that are currently configured for all media types\n        @return the library import paths that are currently configured for all media types",
        "operationId": "GetLibraryImportPaths",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/java.io.File"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetMaxChannelDigitsForInfraredTuningPlugin": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the maximum number of digits that are needed to tune a channel on the device that corresponds to the specified \u0027Remote Control\u0027.\n        For example, if you always need to push 3 numeric keys before the device would tune a channel (i.e. channels are from 1-999) then this\n        should be 3.\n        @param PluginName the name of the infrared tuning plugin\n        @param PluginPortNumber the port number of the tuning plugin, 0 if there is no port for it\n        @param RemoteName the name of the \u0027Remote Control\u0027\n        @return the maximum number of digits needed to tune a channel using the specified remote on this plugin",
        "operationId": "GetMaxChannelDigitsForInfraredTuningPlugin",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "PluginName",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "PluginPortNumber",
            "in": "query"
          },
          {
            "name": "3",
            "type": "string",
            "required": true,
            "description": "RemoteName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetMixerAudioInputPaths": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the different input connectors that are available on the system sound mixer (Windows Only)\n        @return the different input connectors that are available on the system sound mixer",
        "operationId": "GetMixerAudioInputPaths",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetMusicLibraryImportPaths": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns the library import paths that are currently configured for music files\n        @return the library import paths that are currently configured for music files",
        "operationId": "GetMusicLibraryImportPaths",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/java.io.File"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetNameForIRCode": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the name that is associated with an IR code. This has no functional purpose and is purely for display purposes.\n        @param IRCode the IRCode to get the associated name for, see {@link #SetNameForIRCode SetNameForIRCode()}\n        @return the name for the specified IRCode",
        "operationId": "GetNameForIRCode",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "integer",
            "required": true,
            "description": "IRCode",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetOverscanInsetBottom": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns a floating point value which specifies the percent of the UI that is taken up by overscan on the bottom\n        Equivalent to (1.0 - (GetOverscanOffsetY()  1.0 / GetFullUIHeight()) - GetOverscanScaleHeight())/GetOverscanScaleHeight()\n        @return a floating point value which specifies the percent of the UI that is taken up by overscan on the bottom\n        @since 7.0",
        "operationId": "GetOverscanInsetBottom",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetOverscanInsetLeft": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns a floating point value which specifies the percent of the UI that is taken up by overscan on the left side.\n        Equivalent to (GetOverscanOffsetX()  1.0 / (GetFullUIWidth()  GetOverscanScaleWidth()))\n        @return a floating point value which specifies the percent of the UI that is taken up by overscan on the left side\n        @since 7.0",
        "operationId": "GetOverscanInsetLeft",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetOverscanInsetRight": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns a floating point value which specifies the percent of the UI that is taken up by overscan on the right side.\n        Equivalent to (1.0 - (GetOverscanOffsetX()  1.0 / GetFullUIWidth()) - GetOverscanScaleWidth())/GetOverscanScaleWidth()\n        @return a floating point value which specifies the percent of the UI that is taken up by overscan on the right side\n        @since 7.0",
        "operationId": "GetOverscanInsetRight",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetOverscanInsetTop": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns a floating point value which specifies the percent of the UI that is taken up by overscan on the top\n        Equivalent to (GetOverscanOffsetY()  1.0 / (GetFullUIHeight()  GetOverscanScaleHeight())))\n        @return a floating point value which specifies the percent of the UI that is taken up by overscan on the top\n        @since 7.0",
        "operationId": "GetOverscanInsetTop",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetOverscanInsets": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns a length 4 array of floating point values which specifies the percent of the UI that is taken up by overscan on the 4 sides.\n        The order is top, left, bottom, right in the returned array. Each value comes from GetOverscanInsetTop/Left/Bottom/Right() API calls.\n        @return a length 4 array of floating point values which specifies the percent of the UI that is taken up by overscan on the 4 sides\n        @since 7.0",
        "operationId": "GetOverscanInsets",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "float"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetOverscanOffsetX": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns the horizontal offset in pixels that should be applied to the UI to account for overscan. This moves the UI to fit on a TV screen in the\n        case where it goes off the edges of the screen due to what is known as \u0027Overscan\u0027.\n        @return the horizontal offset in pixles that should be applied to the UI to account for overscan, positive values move it to the right",
        "operationId": "GetOverscanOffsetX",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetOverscanOffsetY": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns the vertical offset in pixels that should be applied to the UI to account for overscan. This moves the UI to fit on a TV screen in the\n        case where it goes off the edges of the screen due to what is known as \u0027Overscan\u0027.\n        @return the vertical offset in pixles that should be applied to the UI to account for overscan, positive values move it down",
        "operationId": "GetOverscanOffsetY",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetOverscanScaleHeight": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns the vertical scale factor that should be applied to the UI to account for overscan. This shrinks the UI to fit on a TV screen in the\n        case where it goes off the edges of the screen due to what is known as \u0027Overscan\u0027.\n        @return the vertical scale factor that should be applied to the UI to account for overscan",
        "operationId": "GetOverscanScaleHeight",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetOverscanScaleWidth": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns the horizontal scale factor that should be applied to the UI to account for overscan. This shrinks the UI to fit on a TV screen in the\n        case where it goes off the edges of the screen due to what is known as \u0027Overscan\u0027.\n        @return the horizontal scale factor that should be applied to the UI to account for overscan",
        "operationId": "GetOverscanScaleWidth",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPictureLibraryImportPaths": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns the library import paths that are currently configured for picture files\n        @return the library import paths that are currently configured for picture files",
        "operationId": "GetPictureLibraryImportPaths",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/java.io.File"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPrefixCommandForInfraredTuningPlugin": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the command that is to be sent before a channel change sequence is started. This is for devices that require a\n        \u0027Power On\u0027 or \u0027Cancel\u0027 type of function to ensure the device is a responsive state.\n        @param PluginName the name of the infrared tuning plugin\n        @param PluginPortNumber the port number of the tuning plugin, 0 if there is no port for it\n        @param RemoteName the name of the \u0027Remote Control\u0027\n        @return the name of the command from this \u0027Remote Control\u0027 to use to prefix a channel change\n       \n        @since 6.2",
        "operationId": "GetPrefixCommandForInfraredTuningPlugin",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "PluginName",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "PluginPortNumber",
            "in": "query"
          },
          {
            "name": "3",
            "type": "string",
            "required": true,
            "description": "RemoteName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetProperty": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the property with the specified name. If the property is not set yet, it will be set to the DefaultValue\n        that is passed in unless that value is null\n        @param PropertyName the name of the property to retrieve\n        @param DefaultValue the default value to set the property to if it does not exist, null if it should not be set\n        @return the value of the specified property, or the DefaultValue if the property was not set prior to this call",
        "operationId": "GetProperty",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "PropertyName",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "DefaultValue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetRatingsUnderParentalLock": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the list of content ratings that are under parental lock. When any content that has ratings that match anything\n        in the restricted list is requested for playback; the parental lock code must be entered before playback will begin.\n        @return the list of content ratings that are under parental lock",
        "operationId": "GetRatingsUnderParentalLock",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetRecordingQualities": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns a list of the different recording quality names available in the system\n        @return a list of the different recording quality names available in the system",
        "operationId": "GetRecordingQualities",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetRecordingQualityBitrate": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the estimated overall bitrate for a given recording quality. The returned value is in Megabits per second.\n        @param Quality the name of the recording quality\n        @return the estimated overall bitrate for the specified recording quality in Megabits per second",
        "operationId": "GetRecordingQualityBitrate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Quality",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetRecordingQualityFormat": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the format for a given recording quality. Returns values like \"MPEG-2 PS\", \"DivX\", etc.\n        @param Quality the name of the recording quality\n        @return the format for the specified recording quality",
        "operationId": "GetRecordingQualityFormat",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Quality",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetRemotesForInfraredTuningPlugin": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the names of the \u0027Remote Controls\u0027 which correspond to external devices that can be controlled with the specified plugin\n        @param PluginName the name of the infrared tuning plugin to get the remotes for\n        @param PluginPortNumber the port number of the tuning plugin, 0 if there is no port for it\n        @return the names of the \u0027Remotes\u0027 which correspond to external devices that can be controlled by the specified plugin on the specified port",
        "operationId": "GetRemotesForInfraredTuningPlugin",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "PluginName",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "PluginPortNumber",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSageCommandLinkedToIRCode": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns the SageTV Command that is linked to the specified infrared code.\n        @param IRCode the infrared code\n        @return the SageTV Command that is linked to the specified infrared code",
        "operationId": "GetSageCommandLinkedToIRCode",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "integer",
            "required": true,
            "description": "IRCode",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSageCommandLinkedToKeystroke": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns the SageTV Command that is linked to the specified keystroke.\n        @param Keystroke the name of the keystroke\n        @return the SageTV Command that is linked to the specified keystroke",
        "operationId": "GetSageCommandLinkedToKeystroke",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Keystroke",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetScreenSaverTimeout": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the screen saver timeout in milliseconds. The \"Screen Saver\" menu will be launched after this period of user inactivity if the\n        program is in full screen mode.\n        @return the screen saver timeout in milliseconds",
        "operationId": "GetScreenSaverTimeout",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSequenceDelayForInfraredTuningPlugin": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the minimum delay in milliseconds that is required between the completion of a sequence of commands that represent a channel change\n        and the start of a new sequence of commands that represent a channel change\n        @param PluginName the name of the infrared tuning plugin\n        @param PluginPortNumber the port number of the tuning plugin, 0 if there is no port for it\n        @param RemoteName the name of the \u0027Remote Control\u0027\n        @return the minimum delay in milliseconds between finishing one channel change sequence and starting another when using the specified \u0027Remote Control\u0027",
        "operationId": "GetSequenceDelayForInfraredTuningPlugin",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "PluginName",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "PluginPortNumber",
            "in": "query"
          },
          {
            "name": "3",
            "type": "string",
            "required": true,
            "description": "RemoteName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetServerProperty": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the property with the specified name. If the property is not set yet, it will be set to the DefaultValue\n        that is passed in unless that value is null. If this is called from a client instance then it will use the\n        properties on the server system for this call.\n        @param PropertyName the name of the property to retrieve\n        @param DefaultValue the default value to set the property to if it does not exist, null if it should not be set\n        @return the value of the specified property, or the DefaultValue if the property was not set prior to this call",
        "operationId": "GetServerProperty",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "PropertyName",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "DefaultValue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetServerSubpropertiesThatAreBranches": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns the list of properties underneath the specified property that themselves contain further subproperties.\n        For example, if the following were the properties:\n        animal/pig\u003d0\n        animal/fish/salmon\u003d1\n        animal/fish/trout\u003d2\n        animal/reptile/green/alligator\u003d4\n       \n        and this call was made with \"animal\" as the argument, then the returned values would be \"fish\" and \"reptile\"\n        If this is called from a client instance then it will use the properties on the server system for this call.\n        @param PropertyName the root property to check for subproperty branches under\n        @return the list of properties underneath the specified property that themselves contain further subproperties.\n       \n        @since 6.1",
        "operationId": "GetServerSubpropertiesThatAreBranches",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "PropertyName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetServerSubpropertiesThatAreLeaves": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns the list of properties underneath the specified property that do not contain further subproperties.\n        For example, if the following were the properties:\n        animal/pig\u003d0\n        animal/fish/salmon\u003d1\n        animal/fish/trout\u003d2\n        animal/reptile/green/alligator\u003d4\n       \n        and this call was made with \"animal\" as the argument, then the returned values would only be \"pig\"\n        If this is called from a client instance then it will use the properties on the server system for this call.\n        @param PropertyName the root property to check for subproperty leaves under\n        @return the list of properties underneath the specified property that do not contain further subproperties\n       \n        @since 6.1",
        "operationId": "GetServerSubpropertiesThatAreLeaves",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "PropertyName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSubpicAudioLanguageOptions": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the list of languages that are available to be used as presets for Audio tracks or Subpicture.\n        @return the list of languages that are available to be used as presets for Audio tracks or Subpicture.",
        "operationId": "GetSubpicAudioLanguageOptions",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSubpropertiesThatAreBranches": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns the list of properties underneath the specified property that themselves contain further subproperties.\n        For example, if the following were the properties:\n        animal/pig\u003d0\n        animal/fish/salmon\u003d1\n        animal/fish/trout\u003d2\n        animal/reptile/green/alligator\u003d4\n       \n        and this call was made with \"animal\" as the argument, then the returned values would be \"fish\" and \"reptile\"\n        @param PropertyName the root property to check for subproperty branches under\n        @return the list of properties underneath the specified property that themselves contain further subproperties.",
        "operationId": "GetSubpropertiesThatAreBranches",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "PropertyName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSubpropertiesThatAreLeaves": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns the list of properties underneath the specified property that do not contain further subproperties.\n        For example, if the following were the properties:\n        animal/pig\u003d0\n        animal/fish/salmon\u003d1\n        animal/fish/trout\u003d2\n        animal/reptile/green/alligator\u003d4\n       \n        and this call was made with \"animal\" as the argument, then the returned values would only be \"pig\"\n        @param PropertyName the root property to check for subproperty leaves under\n        @return the list of properties underneath the specified property that do not contain further subproperties",
        "operationId": "GetSubpropertiesThatAreLeaves",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "PropertyName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetTimeZone": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the name of the time zone that the application is currently configured to use\n        @return the name of the time zone that the application is currently configured to use",
        "operationId": "GetTimeZone",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetUILanguage": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the language that the user interface should be displayed in.\n        @return the language that the user interface should be displayed in",
        "operationId": "GetUILanguage",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetVideoBackgroundColor": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns the color that should be used for the video background. This is only shown when the video\u0027s aspect ratio doesn\u0027t match the area that it\u0027s playing back in.\n        @return the color that should be used for the video background",
        "operationId": "GetVideoBackgroundColor",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (value type is java.awt.Color)",
            "schema": {
              "$ref": "#/definitions/java.awt.Color"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetVideoDecoderFilter": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the name of the DirectShow video decoder filter that\u0027s used for MPEG2 playback (Windows only)\n        @return the name of the DirectShow video decoder filter that\u0027s used for MPEG2 playback",
        "operationId": "GetVideoDecoderFilter",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetVideoDecoderFilters": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the list of the video decoder filters that are available in the system for MPEG2 playback (Windows only)\n        @return the list of the video decoder filters that are available in the system for MPEG2 playback",
        "operationId": "GetVideoDecoderFilters",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetVideoDirectories": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the list of directories that SageTV is configured to record television to\n        @return the list of directories that SageTV is configured to record television to",
        "operationId": "GetVideoDirectories",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/java.io.File"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetVideoDiskspaceRules": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns the list of valid diskspace rules. Will be localized versions of the strings \"Use All\", \"Use Only\" and \"Leave Free\"\n        @return the list of valid diskspace rules",
        "operationId": "GetVideoDiskspaceRules",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetVideoLibraryImportPaths": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns the library import paths that are currently configured for video files\n        @return the library import paths that are currently configured for video files",
        "operationId": "GetVideoLibraryImportPaths",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/java.io.File"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetVideoOffsetX": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets of the offset in pixels that should be applied horizontally to the video. Positive numbers move it to the right.\n        @param AspectRatioMode the localized name of the aspect ratio mode\n        @return the offset in pixels that should be applied horizontally to the video",
        "operationId": "GetVideoOffsetX",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "AspectRatioMode",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetVideoOffsetY": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets of the offset in pixels that should be applied vertically to the video. Positive numbers move it down.\n        @param AspectRatioMode the localized name of the aspect ratio mode\n        @return the offset in pixels that should be applied vertically to the video",
        "operationId": "GetVideoOffsetY",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "AspectRatioMode",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetVideoOrbitingDuration": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the video orbiting duration in milliseconds. This is used to shift the video left-to-right very slowly over time. It\n        is used on widescreen displays to prevent screen burn when watching 4:3 content.\n        @return the video orbiting duration in milliseconds",
        "operationId": "GetVideoOrbitingDuration",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetVideoZoomX": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the horizontal scale factor for the video for the specified aspect ratio mode.\n        @param AspectRatioMode the localized name of the aspect ratio mode\n        @return the horizontal scale factor for the video for the specified aspect ratio mode",
        "operationId": "GetVideoZoomX",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "AspectRatioMode",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetVideoZoomY": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Gets the vertical scale factor for the video for the specified aspect ratio mode.\n        @param AspectRatioMode the localized name of the aspect ratio mode\n        @return the vertical scale factor for the video for the specified aspect ratio mode",
        "operationId": "GetVideoZoomY",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "AspectRatioMode",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dHasDirectX9": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns true if the system has DirectX 9 installed (Windows Only)\n        @return true if the system has DirectX 9 installed, false otherwise",
        "operationId": "HasDirectX9",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dHasEVRSupport": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns true if the system has support for the Enhanced Video Renderer (EVR) (Windows Only)\n        @return true if the system has support for the Enhanced Video Renderer (EVR), false otherwise",
        "operationId": "HasEVRSupport",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dHasPVR350TVOutput": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns true if the system has a Hauppauge WinTV PVR-350 card installed which can produce a TV output (Windows only)\n        @return true if the system has a Hauppauge WinTV PVR-350 card installed which can produce a TV output",
        "operationId": "HasPVR350TVOutput",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dHasParentalLockCode": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns true if a parental lock code has been configured\n        @return true if a parental lock code has been configured, false otherwise",
        "operationId": "HasParentalLockCode",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsAcceleratedDrawingEnabled": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns true if 3D acceleration is enabled for the rendering engine. This uses DirectX9-3D on Windows and OpenGL on Linux.\n        @return true if 3D acceleration is enabled for the rendering engine",
        "operationId": "IsAcceleratedDrawingEnabled",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsAdvancedDeinterlacingEnabled": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns true if the client supports doing advanced deinterlacing and it is enabled. This is only available on the HD300.\n        @return true if the client supports doing advanced deinterlacing and it is enabled, false otherwise",
        "operationId": "IsAdvancedDeinterlacingEnabled",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsAdvancedDeinterlacingSupported": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns true if the client supports doing advanced deinterlacing. This is only available on the HD300.\n        @return true if the client supports doing advanced deinterlacing, false otherwise",
        "operationId": "IsAdvancedDeinterlacingSupported",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsDscalerDoubleRefresh": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns true if DScaler is set to double the refresh rate when used. This means it\u0027ll run at 60fps instead of 30fps.\n        @return true if DScaler is set to double the refresh rate when used.",
        "operationId": "IsDscalerDoubleRefresh",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsDscalerEnabled": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns true if the DScaler deinterlacing filter is enabled (Windows only)\n        @return true if the DScaler deinterlacing filter is enabled",
        "operationId": "IsDscalerEnabled",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsDscalerOddFieldFirst": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns true if DScaler is configured to display the odd field first (fields are even or odd)\n        @return true if DScaler is configured to display the odd field first",
        "operationId": "IsDscalerOddFieldFirst",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsIntelligentRecordingDisabled": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns true if the \u0027Intelligent Recording\u0027 feature of SageTV is disabled. The default is disabled.\n        @return true if the \u0027Intelligent Recording\u0027 feature of SageTV is disabled, false otherwise",
        "operationId": "IsIntelligentRecordingDisabled",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsMajorMinorDTVChannelTuningEnabled": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns true if the legacy major/minor channel tuning is enabled. Do not use anymore\n        @deprecated\n        @return true if the legacy major/minor channel tuning is enabled",
        "operationId": "IsMajorMinorDTVChannelTuningEnabled",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsMutedOnAlternateSpeedPlayback": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns true if SageTV should mute the volume when media is played back at speeds besides x1\n        @return true if SageTV should mute the volume when media is played back at speeds besides x1, false otherwise",
        "operationId": "IsMutedOnAlternateSpeedPlayback",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsNativeOutputResolutionEnabled": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns true if this device is configured to match the output resolution to the media format\u0027s resolution\n        @return true if this device is configured to match the output resolution to the media format\u0027s resolution\n       \n        @since 6.3",
        "operationId": "IsNativeOutputResolutionEnabled",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsPVR350OSDEnabled": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns true if the user interface (OSD) display on a Hauppauge WinTV PVR-350 should be shown through the tv output (Windows only)\n        @return true if the user interface (OSD) display on a Hauppauge WinTV PVR-350 should be shown through the tv output",
        "operationId": "IsPVR350OSDEnabled",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsPVR350TVOutputEnabled": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns true if the TV output on a Hauppauge WinTV PVR-350 card is enabled (Windows only)\n        @return true if the TV output on a Hauppauge WinTV PVR-350 card is enabled",
        "operationId": "IsPVR350TVOutputEnabled",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsParentalControlEnabled": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns true if parental controls are enabled on the system\n        @return true if parental controls are enabled on the system",
        "operationId": "IsParentalControlEnabled",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsPlaceshifterLoginCachingAllowed": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns true if this server allows caching of placeshifter logins, false otherwise\n        @return true if this server allows caching of placeshifter logins, false otherwise\n        @since 6.6",
        "operationId": "IsPlaceshifterLoginCachingAllowed",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsProvideoPentium4FixEnabled": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns true if the Provideo 256 Pentium 4 fix is enabled\n        @return true if the Provideo 256 Pentium 4 fix is enabled\n        @deprecated",
        "operationId": "IsProvideoPentium4FixEnabled",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsRatingUnderParentalLock": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns true if the specified rating is in the list that is under parental control\n        @param Rating the rating to check\n        @return true if the specified rating is in the list that is under parental control, false otherwise",
        "operationId": "IsRatingUnderParentalLock",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Rating",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsSageTVServerEnabled": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns true if the SageTV server is enabled. This allows SageTV Clients to connect.\n        @return true if the SageTV server is enabled, false otherwise",
        "operationId": "IsSageTVServerEnabled",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsScreenSaverOnSleepEnabled": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns true if SageTV will go to its screen saver when it is put to sleep. If SageTV is not in full screen mode\n        then it will go to the system tray regardless of this setting.\n        @return true if SageTV will go to its screen saver when put to sleep, false otherwise",
        "operationId": "IsScreenSaverOnSleepEnabled",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsSoftwareDecodingDisabled": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns true if software decoding is disabled. This only applies to the TV output of the Hauppauge WinTV PVR-350 PCI card on Windows\n        @return true if software decoding is disabled",
        "operationId": "IsSoftwareDecodingDisabled",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsSyncSystemClockWithServerEnabled": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns true if SageTV should synchronize the system clock with the server. For SageTV Client this\n        will synchronize with its SageTV Server. For a SageTV system, this will synchronize with the EPG data server.\n        @return true if SageTV should synchronize the system clock with the server",
        "operationId": "IsSyncSystemClockWithServerEnabled",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsVideoRendererDefault": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns true if the video renderer is configured to use the Default renderer (Windows Only). This will usually be the Video Mixing\n        Renderer 7 if using Windows XP; but DirectShow ultimately decides this itself. Applies to all files except DVDs.\n        @return true if the video renderer is configured to use the Default renderer",
        "operationId": "IsVideoRendererDefault",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsVideoRendererEVR": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns true if the video renderer is configured to use the Enhanced Video Renderer (Windows Only). This\n        will only work if accelerated rendering is enabled (3D acceleration). If it\u0027s not then Overlay will be used\n        as the video renderer instead of EVR. Applies to all files except DVDs.\n        @return true if the video renderer is configured to use EVR, false otherwise\n        @since 6.5",
        "operationId": "IsVideoRendererEVR",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsVideoRendererOverlay": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns true if the video renderer is configured to use the Overlay surface (Windows Only) Applies to all files except DVDs.\n        @return true if the video renderer is configured to use the Overlay surface, false otherwise",
        "operationId": "IsVideoRendererOverlay",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsVideoRendererVMR9": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Returns true if the video renderer is configured to use the Video Mixing Renderer 9 (Windows Only). This\n        will only work if accelerated rendering is enabled (3D acceleration). If it\u0027s not then Overlay will be used\n        as the video renderer instead of VMR9. Applies to all files except DVDs.\n        @return true if the video renderer is configured to use VMR9, false otherwise",
        "operationId": "IsVideoRendererVMR9",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dLearnCommandForInfraredTuningPlugin": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Informs an infrared tuning plugin that it should go into the learn mode to learn a new command. This call will return after the user has\n        given the hardware the appropriate input it is looking for.\n        @param PluginName the name of the infrared tuning plugin\n        @param PluginPortNumber the port number of the tuning plugin, 0 if there is no port for it\n        @param RemoteName the name of the \u0027Remote Control\u0027 that the command is being learned from\n        @param CommandName the name of the command being sent from the remote control\n        @return true if the command was successfully learned, false otherwise",
        "operationId": "LearnCommandForInfraredTuningPlugin",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "PluginName",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "PluginPortNumber",
            "in": "query"
          },
          {
            "name": "3",
            "type": "string",
            "required": true,
            "description": "RemoteName",
            "in": "query"
          },
          {
            "name": "4",
            "type": "string",
            "required": true,
            "description": "CommandName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dLinkIRCodeToSageCommand": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Links an infrared code to a SageTV Command. The specified SageTV Command will then be executed whenever the specified IRCode is received.\n        @param IRCode the infrared code to link to the SageTV Command\n        @param SageCommand the SageTVCommand to link the infrared code to",
        "operationId": "LinkIRCodeToSageCommand",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "integer",
            "required": true,
            "description": "IRCode",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "SageCommand",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dLinkKeystrokeToSageCommand": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Links a keystroke to a SageTV Command. The specified SageTV Command will then be executed whenever the specified keystroke is received.\n        @param Keystroke the name of the keystroke to link to the SageTV Command\n        @param SageCommand the SageTVCommand to link the keystroke to",
        "operationId": "LinkKeystrokeToSageCommand",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Keystroke",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "SageCommand",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dRemoveCommandForInfraredTuningPlugin": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Removes a command from a \u0027Remote Control\u0027 for an infrared tuning plugin. If the command had a learned code, that code will be lost.\n        @param PluginName the name of the infrared tuning plugin\n        @param PluginPortNumber the port number of the tuning plugin, 0 if there is no port for it\n        @param RemoteName the name of the \u0027Remote Control\u0027\n        @param CommandName the name of the command to remove",
        "operationId": "RemoveCommandForInfraredTuningPlugin",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "PluginName",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "PluginPortNumber",
            "in": "query"
          },
          {
            "name": "3",
            "type": "string",
            "required": true,
            "description": "RemoteName",
            "in": "query"
          },
          {
            "name": "4",
            "type": "string",
            "required": true,
            "description": "CommandName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dRemoveLibraryImportPath": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Removes a path from the list of library import paths. This will affect all import types.\n        @param RemovePath the path to remove from the list of library import paths",
        "operationId": "RemoveLibraryImportPath",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "RemovePath",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dRemoveMusicLibraryImportPath": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Removes a path from the list of library import paths for music\n        @param RemovePath the path to remove from the list of library import paths for music",
        "operationId": "RemoveMusicLibraryImportPath",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "RemovePath",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dRemovePictureLibraryImportPath": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Removes a path from the list of library import paths for pictures\n        @param RemovePath the path to remove from the list of library import paths for pictures",
        "operationId": "RemovePictureLibraryImportPath",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "RemovePath",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dRemoveProperty": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Removes the specified property from the property map\n        @param PropertyName the name of the property to remove",
        "operationId": "RemoveProperty",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "PropertyName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dRemovePropertyAndChildren": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Removes the specified property and any subproperties that start with the same prefix\n        @param PropertyName the name of the property that should be removed along with all of its subproperties",
        "operationId": "RemovePropertyAndChildren",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "PropertyName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dRemoveRemoteForInfraredTuningPlugin": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Removes a \u0027Remote Control\u0027 from an infrared tuning plugin. This will also delete all commands learned by that \u0027Remote Control\u0027.\n        @param PluginName the name of the infrared tuning plugin\n        @param PluginPortNumber the port number of the tuning plugin, 0 if there is no port for it\n        @param RemoteName the name of the \u0027Remote Control\u0027 to remove",
        "operationId": "RemoveRemoteForInfraredTuningPlugin",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "PluginName",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "PluginPortNumber",
            "in": "query"
          },
          {
            "name": "3",
            "type": "string",
            "required": true,
            "description": "RemoteName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dRemoveServerProperty": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Removes the specified property from the property map. If this is called from a client instance then it will use the\n        properties on the server system for this call and the change will be made on the server system.\n        @param PropertyName the name of the property to remove\n       \n        @since 6.1",
        "operationId": "RemoveServerProperty",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "PropertyName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dRemoveServerPropertyAndChildren": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Removes the specified property and any subproperties that start with the same prefix.\n        If this is called from a client instance then it will use the\n        properties on the server system for this call and the change will be made on the server system.\n        @param PropertyName the name of the property that should be removed along with all of its subproperties\n       \n        @since 6.1",
        "operationId": "RemoveServerPropertyAndChildren",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "PropertyName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dRemoveVideoDirectory": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Removes a directory from SageTV\u0027s list of directories that it can record television to. If you delete all of the directories;\n        SageTV will be unable to record television. This does NOT delete the directory or any of its files from disk. They will still be fully\n        accessible in SageTV.\n        @param Directory the directory that SageTV should no longer record television content to",
        "operationId": "RemoveVideoDirectory",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "Directory",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dRemoveVideoLibraryImportPath": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Removes a path from the list of library import paths for videos\n        @param RemovePath the path to remove from the list of library import paths for videos",
        "operationId": "RemoveVideoLibraryImportPath",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "RemovePath",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dRenameCommandForInfraredTuningPlugin": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Renames a command for a remote control on an infrared tuning plugin\n        @param PluginName the name of the infrared tuning plugin\n        @param PluginPortNumber the port number of the tuning plugin, 0 if there is no port for it\n        @param RemoteName the name of the \u0027Remote Control\u0027 that the command is from\n        @param OldCommandName the current name of the command\n        @param NewCommandName the new name to rename this command to",
        "operationId": "RenameCommandForInfraredTuningPlugin",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "PluginName",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "PluginPortNumber",
            "in": "query"
          },
          {
            "name": "3",
            "type": "string",
            "required": true,
            "description": "RemoteName",
            "in": "query"
          },
          {
            "name": "4",
            "type": "string",
            "required": true,
            "description": "OldCommandName",
            "in": "query"
          },
          {
            "name": "5",
            "type": "string",
            "required": true,
            "description": "NewCommandName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dRunFilterAutoconfiguration": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets the DirectShow audio \u0026amp; video decoders on windows to acceptable values\n        @deprecated",
        "operationId": "RunFilterAutoconfiguration",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSaveProperties": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Saves the Sage.properties file to disk",
        "operationId": "SaveProperties",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetAcceleratedDrawingEnabled": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Specifies whether or not 3D acceleration should be enabled for the rendering engine. This uses DirectX9 on Windows and OpenGL on Linux.\n        This call takes effect immediately.\n        @param Enabled true if 3D acceleration should be enabled, false otherwise.\n        @return true if the change succeeded, false otherwise",
        "operationId": "SetAcceleratedDrawingEnabled",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "boolean",
            "required": true,
            "description": "Enabled",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetAdvancedDeinterlacingEnabled": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Allows enabling/disabling of advanced deinterlacing support. This is only available on the HD300.\n        @param Enabled true if advanced deinterlacing should be enabled, false if it should be disabled",
        "operationId": "SetAdvancedDeinterlacingEnabled",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "boolean",
            "required": true,
            "description": "Enabled",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetAllowPlaceshifterLoginCaching": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets whether or not placeshifter connections should be allowed to cache their login information. Disabling\n        this setting will clear the current authentication cache on the server.\n        @param Enabled true if the server should allow caching of placeshifter logins; false otherwise (false also clears the cache)\n        @since 6.6",
        "operationId": "SetAllowPlaceshifterLoginCaching",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "boolean",
            "required": true,
            "description": "Enabled",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetAnalogVideoFormat": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets the analog video format that should be used for capture and playback. Valid values are \"NTSC\" or \"PAL\"\n        @param Format the analog video format that should be used for capture and playback; valid values are \"NTSC\" or \"PAL\"",
        "operationId": "SetAnalogVideoFormat",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Format",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetAspectRatioMode": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets the aspect ratio mode that should currently be used.\n        @param AspectRatioMode the localized name of the aspect ratio mode that should currently be used",
        "operationId": "SetAspectRatioMode",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "AspectRatioMode",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetAudioDecoderFilter": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets the name of the DirectShow audio decoder filter that\u0027s used for MPEG2 playback (Windows only)\n        @param FilterName the name of the DirectShow audio decoder filter to use for MPEG2 playback",
        "operationId": "SetAudioDecoderFilter",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "FilterName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetAudioDelay": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets the audio delay in milliseconds to apply when playing back MPEG2 files (Windows only)\n        @param Delay the audio delay in milliseconds to apply when playing back MPEG2 files",
        "operationId": "SetAudioDelay",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "integer",
            "required": true,
            "description": "Delay",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetAudioOutput": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets the current audio output. This is currently only used\n        on media extender devices that have configurable audio outputs.\n        @param AudioOutput this must be a value from {@link #GetAudioOutputOptions GetAudioOutputOptions()} and should be the new desired audio output\n       \n        @since 6.3",
        "operationId": "SetAudioOutput",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "AudioOutput",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetAudioRenderFilter": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets the name of the DirectShow audio renderer filter that\u0027s used for playback except DVDs (Windows only)\n        @param FilterName the name of the DirectShow audio renderer filter to use for playback except DVDs",
        "operationId": "SetAudioRenderFilter",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "FilterName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetAutodialForInternet": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets whether or not SageTV should autodial before accessing the Internet\n        @param Autodial true if SageTV should autodial before accessing the Internet",
        "operationId": "SetAutodialForInternet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "boolean",
            "required": true,
            "description": "Autodial",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetButtonDelayForInfraredTuningPlugin": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets the minimum delay in milliseconds that is required between sending consecutive commands using the specified \u0027Remote Control\u0027.\n        @param PluginName the name of the infrared tuning plugin\n        @param PluginPortNumber the port number of the tuning plugin, 0 if there is no port for it\n        @param RemoteName the name of the \u0027Remote Control\u0027\n        @param MsecDelay the minimum required delay between commands in milliseconds",
        "operationId": "SetButtonDelayForInfraredTuningPlugin",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "PluginName",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "PluginPortNumber",
            "in": "query"
          },
          {
            "name": "3",
            "type": "string",
            "required": true,
            "description": "RemoteName",
            "in": "query"
          },
          {
            "name": "4",
            "type": "integer",
            "required": true,
            "description": "MsecDelay",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetConfirmCommandForInfraredTuningPlugin": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets the command that is to be sent as the last command to complete a channel change sequence. This is for devices that require an\n        \u0027Enter\u0027 or other type of confirmation key to be pressed after the numeric channel codes are sent.\n        @param PluginName the name of the infrared tuning plugin\n        @param PluginPortNumber the port number of the tuning plugin, 0 if there is no port for it\n        @param RemoteName the name of the \u0027Remote Control\u0027\n        @param Command the name of the command from this \u0027Remote Control\u0027 to use to confirm a channel change",
        "operationId": "SetConfirmCommandForInfraredTuningPlugin",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "PluginName",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "PluginPortNumber",
            "in": "query"
          },
          {
            "name": "3",
            "type": "string",
            "required": true,
            "description": "RemoteName",
            "in": "query"
          },
          {
            "name": "4",
            "type": "string",
            "required": true,
            "description": "Command",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetCountry": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets the country that the user is in. This is used for determining the frequencies used for tuning television signals.\n        @param Country the name of the country the user is in, should be a value from {@link #GetAvailableCountries GetAvailableCountries()}\n        @return the passed in Country variable",
        "operationId": "SetCountry",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Country",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetCurrentlyAiringProgramsStartLive": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets whether or not when playing back a program that is currently airing whether we should start from live TV or not\n        @param Enabled true if we should start from live for anything currently airing\n        @since 8.1",
        "operationId": "SetCurrentlyAiringProgramsStartLive",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "boolean",
            "required": true,
            "description": "Enabled",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetDVBCRegion": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets the the provider within the current country that the user has for DVBC reception.\n        @param DVBCRegion the name of the provider the user has, should be a value from {@link #GetDVBCRegions GetDVBCRegions()}\n       \n        @since 5.1",
        "operationId": "SetDVBCRegion",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "DVBCRegion",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetDVBSRegion": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets the the provider within the current country that the user has for DVBS reception.\n        @param DVBSRegion the name of the provider the user has, should be a value from {@link #GetDVBSRegions GetDVBSRegions()}\n       \n        @since 5.1",
        "operationId": "SetDVBSRegion",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "DVBSRegion",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetDVBTRegion": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets the the region within the current country that the user is in.\n        @param DVBTRegion the name of the region the user is in, should be a value from {@link #GetDVBTRegions GetDVBTRegions()}\n       \n        @since 5.1",
        "operationId": "SetDVBTRegion",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "DVBTRegion",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetDVDAudioDecoderFilter": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets the name of the DirectShow audio decoder filter that\u0027s used for DVD playback (Windows only)\n        @param FilterName the name of the DirectShow audio decoder filter to use for DVD playback",
        "operationId": "SetDVDAudioDecoderFilter",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "FilterName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetDVDAudioRenderFilter": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets the name of the DirectShow audio renderer filter that\u0027s used for DVD playback (Windows only)\n        @param FilterName the name of the DirectShow audio renderer filter to use for DVD playback",
        "operationId": "SetDVDAudioRenderFilter",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "FilterName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetDVDDXVADeinterlaceMode": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets the preferred DXVA Deinterlacing configuration setting (Windows only).\n        This is used when playing back DVDs.\n        @param DeinterlaceMode the preferred DXVA Deinterlacing configuration setting",
        "operationId": "SetDVDDXVADeinterlaceMode",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "DeinterlaceMode",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetDVDDXVAMpegMode": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets the preferred DXVA MPEG Mode configuration setting (Windows only). This will be A, B, C or D.\n        This is used when playing back DVDs.\n        @param DXVAMode the preferred DXVA MPEG Mode configuration setting, use the empty string or \"Default\" to disable this",
        "operationId": "SetDVDDXVAMpegMode",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "DXVAMode",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetDVDVideoDecoderFilter": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets the name of the DirectShow video decoder filter that\u0027s used for DVD playback (Windows only)\n        @param FilterName the name of the DirectShow video decoder filter to use for DVD playback",
        "operationId": "SetDVDVideoDecoderFilter",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "FilterName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetDVDVideoRenderFilter": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets the video renderer filter that should be used for DVD playback. Possible values are \"VMR9\",\n        \"Overlay\" and the localized \"Default\" string\n        @param FilterName the video renderer filter that should be used for DVD playback",
        "operationId": "SetDVDVideoRenderFilter",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "FilterName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetDXVADeinterlaceMode": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets the preferred DXVA Deinterlacing configuration setting (Windows only).\n        This is used when playing back MPEG2 files.\n        @param DeinterlaceMode the preferred DXVA Deinterlacing configuration setting",
        "operationId": "SetDXVADeinterlaceMode",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "DeinterlaceMode",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetDXVAMpegMode": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets the preferred DXVA MPEG Mode configuration setting (Windows only). This will be A, B, C or D.\n        This is used when playing back MPEG2 files.\n        @param DXVAMode the preferred DXVA MPEG Mode configuration setting, use the empty string or \"Default\" to disable this",
        "operationId": "SetDXVAMpegMode",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "DXVAMode",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetDefaultAudioLanguage": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets the name of the preferred default language when selecting which audio stream to playback. The values for this should be\n        obtained from GetSubpicAudioLanguageOptions.\n        @param Language the name of the preferred default language when selecting which audio stream to playback",
        "operationId": "SetDefaultAudioLanguage",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Language",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetDefaultRecordingQuality": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets the default quality that is used to record television\n        @param Quality the name of the quality setting to use to record television by default",
        "operationId": "SetDefaultRecordingQuality",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Quality",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetDefaultSubpicLanguage": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets the name of the preferred default language when selecting which subpicture stream to playback. The values for this should be\n        obtained from GetSubpicAudioLanguageOptions, the value of null or the empty string is also allowed to indicate no subtitle track should be selected by default.\n        @param Language the name of the preferred default language when selecting which subpicture stream to playback, null or the empty string can be used to prefer no subtitles",
        "operationId": "SetDefaultSubpicLanguage",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Language",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetDisplayAspectRatio": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets the aspect ratio of the current display device\n        @param DisplayAspectRatio the aspect ratio of the current display device\n        @since 5.1",
        "operationId": "SetDisplayAspectRatio",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "float",
            "required": true,
            "description": "DisplayAspectRatio",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetDscalerDoubleRefresh": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets whether or not DScaler should double the refresh rate. This means it\u0027ll run at 60fps instead of 30fps.\n        @param Enabled true if DScaler should double the refresh rate when used, false otherwise",
        "operationId": "SetDscalerDoubleRefresh",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "boolean",
            "required": true,
            "description": "Enabled",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetDscalerEnabled": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets whether or not the DScaler deinterlacing filter should be used (Windows only)\n        @param Enabled true if the DScaler deinterlacing filter should be used, false otherwise",
        "operationId": "SetDscalerEnabled",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "boolean",
            "required": true,
            "description": "Enabled",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetDscalerMode": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets the mode that DScaler should be configured to run in when it is used (Windows only)\n        @param DscalerMode the mode that DScaler should be configured to run in when it is used",
        "operationId": "SetDscalerMode",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "DscalerMode",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetDscalerOddFieldFirst": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets if DScaler should display the odd field first (fields are even or odd)\n        @param Enabled true if DScaler should display the odd field first",
        "operationId": "SetDscalerOddFieldFirst",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "boolean",
            "required": true,
            "description": "Enabled",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetDscalerPlugin": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets the plugin that should be used by DScaler. DScaler must also be set into \"Plugin\" mode.\n        @param PluginName the name of the plugin to use with DScaler",
        "operationId": "SetDscalerPlugin",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "PluginName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetInactivityTimeout": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets the inactivity timeout in milliseconds. The hook InactivityTimeout() will be called whenever the system experiences inactivity\n        for this amount of time.\n        @param Timeout the inactivity timeout in milliseconds",
        "operationId": "SetInactivityTimeout",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "integer",
            "required": true,
            "description": "Timeout",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetInfraredReceiverPort": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets the name of the port that the infrared receiver is connected to.\n        @param Port the name of the port that the infrared receiver is connected to; should be a value like: \"COM1\", \"COM2\" or \"USB\"\n        @return true on success, false otherwise",
        "operationId": "SetInfraredReceiverPort",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Port",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetIntelligentRecordingDisabled": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets whether or not \u0027Intelligent Recording\u0027 should be disabled.\n        @param Disabled should be true to disable \u0027Intelligent Recording\u0027, false to enable it",
        "operationId": "SetIntelligentRecordingDisabled",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "boolean",
            "required": true,
            "description": "Disabled",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetMajorMinorDTVChannelTuningEnabled": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets whether or not SageTV should use legacy major-minor DTV channels. Not recommend for use anymore.\n        @param Enabled true if SageTV should use legacy major-minor DTV channel tuning\n        @deprecated",
        "operationId": "SetMajorMinorDTVChannelTuningEnabled",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "boolean",
            "required": true,
            "description": "Enabled",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetMaxChannelDigitsForInfraredTuningPlugin": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets the maximum number of digits that are needed to tune a channel on the device that corresponds to the specified \u0027Remote Control\u0027.\n        For example, if you always need to push 3 numeric keys before the device would tune a channel (i.e. channels are from 1-999) then you\n        would specify 3 here.\n        @param PluginName the name of the infrared tuning plugin\n        @param PluginPortNumber the port number of the tuning plugin, 0 if there is no port for it\n        @param RemoteName the name of the \u0027Remote Control\u0027\n        @param NumberOfDigits the maximum number of digits needed to tune a channel using the specified remote on this plugin",
        "operationId": "SetMaxChannelDigitsForInfraredTuningPlugin",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "PluginName",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "PluginPortNumber",
            "in": "query"
          },
          {
            "name": "3",
            "type": "string",
            "required": true,
            "description": "RemoteName",
            "in": "query"
          },
          {
            "name": "4",
            "type": "integer",
            "required": true,
            "description": "NumberOfDigits",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetMuteOnAlternateSpeedPlayback": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets whether or not SageTV should mute the sound when media is played back at a speed other than x1\n        @param Enabled true if SageTV should mute the sound when media is played at a speed other x1, false otherwise",
        "operationId": "SetMuteOnAlternateSpeedPlayback",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "boolean",
            "required": true,
            "description": "Enabled",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetNameForIRCode": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets the name for a given IR code. This has no functional purpose, and is purely for display purposes.\n        @param IRCode the infrared code to attach a name to\n        @param Name the name to attach to the specified infrared code",
        "operationId": "SetNameForIRCode",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "integer",
            "required": true,
            "description": "IRCode",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetNativeOutputResolutionEnabled": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets whether or not this device should try to match its output resolution to the media format\u0027s resolution\n        @param Enabled true if this device should be configured to match the output resolution to the media format\u0027s resolution; false to use a fixed resolution\n       \n        @since 6.3",
        "operationId": "SetNativeOutputResolutionEnabled",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "boolean",
            "required": true,
            "description": "Enabled",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetOverscanOffsetX": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets the horizontal offset in pixels that should be applied to the UI to account for overscan. This moves the UI to fit on a TV screen in the\n        case where it goes off the edges of the screen due to what is known as \u0027Overscan\u0027.\n        @param Amount the horizontal offset in pixles that should be applied to the UI to account for overscan, positive values move it to the right",
        "operationId": "SetOverscanOffsetX",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "integer",
            "required": true,
            "description": "Amount",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetOverscanOffsetY": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets the vertical offset in pixels that should be applied to the UI to account for overscan. This moves the UI to fit on a TV screen in the\n        case where it goes off the edges of the screen due to what is known as \u0027Overscan\u0027.\n        @param Amount the vertical offset in pixles that should be applied to the UI to account for overscan, positive values move it down",
        "operationId": "SetOverscanOffsetY",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "integer",
            "required": true,
            "description": "Amount",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetOverscanScaleHeight": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets the vertical scale factor that should be applied to the UI to account for overscan. This shrinks the UI to fit on a TV screen in the\n        case where it goes off the edges of the screen due to what is known as \u0027Overscan\u0027.\n        @param Amount the vertical scale factor that should be applied to the UI to account for overscan",
        "operationId": "SetOverscanScaleHeight",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "float",
            "required": true,
            "description": "Amount",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetOverscanScaleWidth": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets the horizontal scale factor that should be applied to the UI to account for overscan. This shrinks the UI to fit on a TV screen in the\n        case where it goes off the edges of the screen due to what is known as \u0027Overscan\u0027.\n        @param Amount the horizontal scale factor that should be applied to the UI to account for overscan",
        "operationId": "SetOverscanScaleWidth",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "float",
            "required": true,
            "description": "Amount",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetPVR350OSDEnabled": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets whether or not the user interface (OSD) should be displayed on the TV output of a Hauppauge WinTV PVR-350 (Windows only)\n        @param Enabled true if the user interface (OSD) should be displayed on the TV output of a Hauppauge WinTV PVR-350, false otherwise",
        "operationId": "SetPVR350OSDEnabled",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "boolean",
            "required": true,
            "description": "Enabled",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetPVR350TVOutputEnabled": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets whether or not the TV output on a Hauppauge WinTV PVR-350 should be enabled (Windows only)\n        @param Enabled true if the TV output of a Hauppauge WinTV PVR-350 should be enabled",
        "operationId": "SetPVR350TVOutputEnabled",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "boolean",
            "required": true,
            "description": "Enabled",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetParentalControlEnabled": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets whether or not parental controls are enabled for the system\n        @param Enabled true if parental controls should be enabled, false otherwise",
        "operationId": "SetParentalControlEnabled",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "boolean",
            "required": true,
            "description": "Enabled",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetParentalLockCode": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets the code that is to be used in order to unlock the parental controls.\n        @param ParentalLockCode the new value to set the parental lock code to",
        "operationId": "SetParentalLockCode",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "ParentalLockCode",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetPrefixCommandForInfraredTuningPlugin": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets the command that is to be sent before a channel change sequence is started. This is for devices that require a\n        \u0027Power On\u0027 or \u0027Cancel\u0027 type of function to ensure the device is a responsive state.\n        @param PluginName the name of the infrared tuning plugin\n        @param PluginPortNumber the port number of the tuning plugin, 0 if there is no port for it\n        @param RemoteName the name of the \u0027Remote Control\u0027\n        @param Command the name of the command from this \u0027Remote Control\u0027 to use to prefix a channel change\n       \n        @since 6.2",
        "operationId": "SetPrefixCommandForInfraredTuningPlugin",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "PluginName",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "PluginPortNumber",
            "in": "query"
          },
          {
            "name": "3",
            "type": "string",
            "required": true,
            "description": "RemoteName",
            "in": "query"
          },
          {
            "name": "4",
            "type": "string",
            "required": true,
            "description": "Command",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetProperty": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets the property with the specified name to the specified value.\n        @param PropertyName the name of the property to set\n        @param PropertyValue the value to set the property to",
        "operationId": "SetProperty",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "PropertyName",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "PropertyValue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetProvideoPentium4FixEnabled": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets whether or not the Provideo 256 Pentium 4 fix should be enabled\n        @param Enabled true if the Provideo 256 Pentium 4 fix should be enabled\n        @deprecated",
        "operationId": "SetProvideoPentium4FixEnabled",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "boolean",
            "required": true,
            "description": "Enabled",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetRatingUnderParentalControl": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets whether or not a given rating should be restricted under parental control\n        @param Rating the name of the rating\n        @param Restricted true if the specified Rating should be restricted by parental control, false otherwise",
        "operationId": "SetRatingUnderParentalControl",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Rating",
            "in": "query"
          },
          {
            "name": "2",
            "type": "boolean",
            "required": true,
            "description": "Restricted",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetSageTVServerEnabled": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets whether or not the SageTV server should be enabled. This call will take effect immediately (i.e. the server can\n        be started/stopped on demand)\n        @param Enabled true if the SageTV server should be enabled, false otherwise",
        "operationId": "SetSageTVServerEnabled",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "boolean",
            "required": true,
            "description": "Enabled",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetScreenSaverOnSleepEnabled": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets whether or not SageTV should go to its screen saver when put to sleep. If SageTV is not in full screen mode\n        then it will go to the system tray regardless of this setting.\n        @param Enabled true if SageTV should go to the screen saver when put to sleep, false otherwise",
        "operationId": "SetScreenSaverOnSleepEnabled",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "boolean",
            "required": true,
            "description": "Enabled",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetScreenSaverTimeout": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets the screen saver timeout in milliseconds. The \"Screen Saver\" menu will be launched after this period of user inactivity if the\n        program is in full screen mode.\n        @param Timeout the screen saver timeout in milliseconds",
        "operationId": "SetScreenSaverTimeout",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "integer",
            "required": true,
            "description": "Timeout",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetSequenceDelayForInfraredTuningPlugin": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets the minimum delay in milliseconds that is required between the completion of a sequence of commands that represent a channel change\n        and the start of a new sequence of commands that represent a channel change\n        @param PluginName the name of the infrared tuning plugin\n        @param PluginPortNumber the port number of the tuning plugin, 0 if there is no port for it\n        @param RemoteName the name of the \u0027Remote Control\u0027\n        @param MsecDelay the minimum delay in milliseconds between finishing one channel change sequence and starting another when using the specified \u0027Remote Control\u0027",
        "operationId": "SetSequenceDelayForInfraredTuningPlugin",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "PluginName",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "PluginPortNumber",
            "in": "query"
          },
          {
            "name": "3",
            "type": "string",
            "required": true,
            "description": "RemoteName",
            "in": "query"
          },
          {
            "name": "4",
            "type": "integer",
            "required": true,
            "description": "MsecDelay",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetServerProperty": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets the property with the specified name to the specified value. If this is called from a client instance then it will use the\n        properties on the server system for this call and the change will be made on the server system.\n        @param PropertyName the name of the property to set\n        @param PropertyValue the value to set the property to",
        "operationId": "SetServerProperty",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "PropertyName",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "PropertyValue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetSoftwareDecodingDisabled": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets if software decoding is disabled. This only applies to the TV output of the Hauppauge WinTV PVR-350 PCI card on Windows\n        @param Disabled true if software decoding is disabled",
        "operationId": "SetSoftwareDecodingDisabled",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "boolean",
            "required": true,
            "description": "Disabled",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetSyncSystemClockWithServerEnabled": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets if SageTV should synchronize the system clock with the server. For SageTV Client this\n        will synchronize with its SageTV Server. For a SageTV system, this will synchronize with the EPG data server.\n        @param Enabled true if SageTV should synchronize the system clock with the server",
        "operationId": "SetSyncSystemClockWithServerEnabled",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "boolean",
            "required": true,
            "description": "Enabled",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetTimeZone": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets the name of the time zone that the application should use. This takes effect immediately.\n        @param TimeZone the name of the time zone to use, see {@link #GetAllTimeZones GetAllTimeZones()}",
        "operationId": "SetTimeZone",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "TimeZone",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetUILanguage": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets the language that the user interface should be displayed in. This takes effect immediately.\n        Use the {@link #GetAvailableUILanguages GetAvailableUILanguages()} call to get the options for this.\n        @param Language the language that the user interface should be displayed in",
        "operationId": "SetUILanguage",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Language",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetVideoBackgroundColor": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets the color that should be used for the video background. This is only shown when the video\u0027s aspect ratio doesn\u0027t match the area that it\u0027s playing back in.\n        @param Color the color that should be used for the video background",
        "operationId": "SetVideoBackgroundColor",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/java.awt.Color",
            "required": true,
            "description": "Color",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetVideoDecoderFilter": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets the name of the DirectShow video decoder filter that\u0027s used for MPEG2 playback (Windows only)\n        @param FilterName the name of the DirectShow video decoder filter to use for MPEG2 playback",
        "operationId": "SetVideoDecoderFilter",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "FilterName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetVideoOffsetX": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets of the offset in pixels that should be applied horizontally to the video. Positive numbers move it to the right.\n        @param AspectRatioMode the localized name of the aspect ratio mode\n        @param PixelOffset the offset in pixels that should be applied horizontally to the video",
        "operationId": "SetVideoOffsetX",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "AspectRatioMode",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "PixelOffset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetVideoOffsetY": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets of the offset in pixels that should be applied vertically to the video. Positive numbers move it down.\n        @param AspectRatioMode the localized name of the aspect ratio mode\n        @param PixelOffset the offset in pixels that should be applied vertically to the video",
        "operationId": "SetVideoOffsetY",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "AspectRatioMode",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "PixelOffset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetVideoOrbitingDuration": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets the video orbiting duration in milliseconds. This is used to shift the video left-to-right very slowly over time. It\n        is used on widescreen displays to prevent screen burn when watching 4:3 content.\n        @param Duration the video orbiting duration in milliseconds",
        "operationId": "SetVideoOrbitingDuration",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "integer",
            "required": true,
            "description": "Duration",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetVideoRendererToDefault": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets the video renderer to use the default renderer (Windows Only). This will usually be the Video Mixing\n        Renderer 7 if using Windows XP; but DirectShow ultimately decides this itself. Applies to all files except DVDs.",
        "operationId": "SetVideoRendererToDefault",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetVideoRendererToEVR": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets the video renderer to use the Enhanced Video Renderer (Windows Only). This\n        will only work if accelerated rendering is enabled (3D acceleration). If it\u0027s not then Overlay will be used\n        as the video renderer instead of EVR. Applies to all files except DVDs.\n        @since 6.5",
        "operationId": "SetVideoRendererToEVR",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetVideoRendererToOverlay": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets the video renderer to use the video Overlay surface (Windows Only). Applies to all files except DVDs.",
        "operationId": "SetVideoRendererToOverlay",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetVideoRendererToVMR9": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets the video renderer to use the Video Mixing Renderer 9 (Windows Only). This\n        will only work if accelerated rendering is enabled (3D acceleration). If it\u0027s not then Overlay will be used\n        as the video renderer instead of VMR9. Applies to all files except DVDs.",
        "operationId": "SetVideoRendererToVMR9",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetVideoZoomX": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets the horizontal scale factor for the video for the specified aspect ratio mode.\n        @param AspectRatioMode the localized name of the aspect ratio mode\n        @param ScaleFactor the horizontal scale factor for the video for the specified aspect ratio mode",
        "operationId": "SetVideoZoomX",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "AspectRatioMode",
            "in": "query"
          },
          {
            "name": "2",
            "type": "float",
            "required": true,
            "description": "ScaleFactor",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetVideoZoomY": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Sets the vertical scale factor for the video for the specified aspect ratio mode.\n        @param AspectRatioMode the localized name of the aspect ratio mode\n        @param ScaleFactor the vertical scale factor for the video for the specified aspect ratio mode",
        "operationId": "SetVideoZoomY",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "AspectRatioMode",
            "in": "query"
          },
          {
            "name": "2",
            "type": "float",
            "required": true,
            "description": "ScaleFactor",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dUnlinkIRCodeFromSageCommands": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Unlinks an infrared code from any SageTV commands it is linked to\n        @param IRCode the infrared code to unlink from any SageTV Commands that it is linked with",
        "operationId": "UnlinkIRCodeFromSageCommands",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "integer",
            "required": true,
            "description": "IRCode",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dUnlinkKeystrokeFromSageCommands": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Configuration"
        ],
        "description": "Unlinks a keystroke from any SageTV commands it is linked to\n        @param Keystroke the keystroke to unlink from any SageTV Commands that it is linked with",
        "operationId": "UnlinkKeystrokeFromSageCommands",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Keystroke",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dDataIntersection": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Database"
        ],
        "description": "Creates an intersection of two sets of data.\n        The ordering of the elements is stable. Any element that is in both of the data sets that are passed in will\n        be included in the returned set.\n        If the arguments are a java.util.Collection or an array then each element in them will\n        be processed in the intersection. If the argument is any other type then the argument itself will be processed in the intersection.\n        @param DataSet1 one of the data sets to include in the intersection\n        @param DataSet2 the other data set to include in the intersection\n        @return a java.util.Vector which is an intersection of all of the elements in the passed in arguments",
        "operationId": "DataIntersection",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "DataSet1",
            "in": "query"
          },
          {
            "name": "2",
            "type": "#/definitions/Object",
            "required": true,
            "description": "DataSet2",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is java.util.Vector)",
            "schema": {
              "$ref": "#/definitions/java.util.Vector"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dDataUnion": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Database"
        ],
        "description": "Creates a Union of one or more sets of data. This method can have zero or more arguments.\n        The ordering of the elements is stable. Any element that is in any data set that is passed in will\n        be included in the returned set. Any duplicate items will be removed.\n        If the arguments are a java.util.Collection, java.util.Map or an array then each element in them will\n        be processed in the Union. If the argument is any other type then the argument itself will be processed in the Union.\n        @param DataSet1 one of the data sets to include in the union\n        @param DataSet2 another one of the data sets to include in the union\n        @return a java.util.Vector which is a union of all of the elements in the passed in arguments",
        "operationId": "DataUnion",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "DataSet1",
            "in": "query"
          },
          {
            "name": "2",
            "type": "#/definitions/Object",
            "required": true,
            "description": "DataSet2",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is java.util.Vector)",
            "schema": {
              "$ref": "#/definitions/java.util.Vector"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dFilterByBoolMethod": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Database"
        ],
        "description": "Filters data by a boolean method. Each element in the \u0027Data\u0027 has the \u0027Method\u0027 executed on it.\n        If the result is the same as the \u0027MatchValue\u0027 parameter then that element will be in the\n        returned data. For Maps \u0026amp; Collections this is done in place. For Arrays a new Array is created.\n        NOTE: If you pass more than 3 arguments to this function then the extra arguments will\n        be passed along to the Method that should be executed.\n        @param Data the data that is to be filtered; this can be a java.util.Collection, java.util.Map or an Array. For Maps \u0026amp; Collections the filtering is done IN-PLACE.\n        @param Method This is what is evaluated with an element as the only argument. This can be a list of methods to test against separated by the \u0027|\u0027 character.\n        @param MatchValue the Method must return this value to be in the returned data\n        @return The elements that passed the filter. The type is the same type as the passed in Data.",
        "operationId": "FilterByBoolMethod",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "Data",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Method",
            "in": "query"
          },
          {
            "name": "3",
            "type": "boolean",
            "required": true,
            "description": "MatchValue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dFilterByMethod": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Database"
        ],
        "description": "Filters data by a method. Each element in the \u0027Data\u0027 has the \u0027Method\u0027 executed on it.\n        If the result is the same as the \u0027MatchValue\u0027 parameter then that element will be in the\n        returned data if MatchedPasses is true. If MatchedPasses is false then non-matching elements will be in the returned data.\n        For Maps \u0026amp; Collections this is done in place. For Arrays a new Array is created.\n        NOTE: If you pass more than 4 arguments to this function then the extra arguments will\n        be passed along to the Method that should be executed.\n        @param Data the data that is to be filtered; this can be a java.util.Collection, java.util.Map or an Array. For Maps \u0026amp; Collections the filtering is done IN-PLACE. For Maps the keys are used for the filtering.\n        @param Method This is what is evaluated with an element as the only argument. This can be a list of methods to test against separated by the \u0027|\u0027 character. There is also a special \u0027UserCategories\u0027 option which will check the ManualRecord, Favorite and MediaFile \"UserCategory\" property as well as the Show Category \u0026amp; SubCategory for any matches against a comma-delimited list in the MatchValue parameter.\n        @param MatchValue the value to test the return value of Method against\n        @param MatchedPasses if true then matches are included in the return data, if false then everything that doesn\u0027t match is returned\n        @return The elements that passed the filter. The type is the same type as the passed in Data.",
        "operationId": "FilterByMethod",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "Data",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Method",
            "in": "query"
          },
          {
            "name": "3",
            "type": "#/definitions/Object",
            "required": true,
            "description": "MatchValue",
            "in": "query"
          },
          {
            "name": "4",
            "type": "boolean",
            "required": true,
            "description": "MatchedPasses",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dFilterByMethodRegex": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Database"
        ],
        "description": "Filters data by a method. Each element in the \u0027Data\u0027 has the \u0027Method\u0027 executed on it.\n        The result is then converted to a String and RegexPattern is applied to it.\n        If the regular expression matches the String value and MatchedPasses is true, then the element\n        will be in the returned data. If MatchedPasses is false then non-matching elements will be in the returned data.\n        For Maps \u0026amp; Collections this is done in place. For Arrays a new Array is created.\n        NOTE: If you pass more than 5 arguments to this function then the extra arguments will\n        be passed along to the Method that should be executed.\n        @param Data the data that is to be filtered; this can be a java.util.Collection, java.util.Map or an Array. For Maps \u0026amp; Collections the filtering is done IN-PLACE.\n        @param Method This is what is evaluated with an element as the only argument (and additional arguments if passed in).\n        @param RegexPattern The compiled regular expression used for matching (if it\u0027s not compiled, then it will be converted to a compiled regular expression)\n        @param MatchedPasses if true then matches are included in the return data, if false then everything that doesn\u0027t match is returned\n        @param CompleteMatch if true then the entire string must match the regular expression, if false then the regular expression only needs to match a substring of it\n        @return The elements that passed the filter. The type is the same type as the passed in Data.\n        @since 5.1",
        "operationId": "FilterByMethodRegex",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "Data",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Method",
            "in": "query"
          },
          {
            "name": "3",
            "type": "#/definitions/java.util.regex.Pattern",
            "required": true,
            "description": "RegexPattern",
            "in": "query"
          },
          {
            "name": "4",
            "type": "boolean",
            "required": true,
            "description": "MatchedPasses",
            "in": "query"
          },
          {
            "name": "5",
            "type": "boolean",
            "required": true,
            "description": "CompleteMatch",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dFilterByRange": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Database"
        ],
        "description": "Filters data by a comparable range. Each element in the \u0027Data\u0027 has the \u0027Method\u0027 executed on it.\n        If KeepWithinBounds is true, then results that are within the specified range are included in the returned data; otherwise\n        if KeepWithinBounds is false then results that are outside of the specified range are included in the returned data.\n        For Maps \u0026amp; Collections this is done in place. For Arrays a new Array is created.\n        @param Data the data that is to be filtered; this can be a java.util.Collection, java.util.Map or an Array. For Maps \u0026amp; Collections the filtering is done IN-PLACE.\n        @param Method This is what is evaluated with an element as the only argument\n        @param LowerBoundInclusive a java.lang.Comparable which specifies the INCLUSIVE lower bound for the range\n        @param UpperBoundExclusive a java.lang.Comparable which specified the EXCLUSIVE upper bound for the range\n        @param KeepWithinBounds if true then values within the range are returned, if false then values outside the range are returned\n        @return The elements that passed the filter. The type is the same type as the passed in Data.",
        "operationId": "FilterByRange",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "Data",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Method",
            "in": "query"
          },
          {
            "name": "3",
            "type": "#/definitions/java.lang.Comparable",
            "required": true,
            "description": "LowerBoundInclusive",
            "in": "query"
          },
          {
            "name": "4",
            "type": "#/definitions/java.lang.Comparable",
            "required": true,
            "description": "UpperBoundExclusive",
            "in": "query"
          },
          {
            "name": "5",
            "type": "boolean",
            "required": true,
            "description": "KeepWithinBounds",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAiringsOnChannelAtTime": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Database"
        ],
        "description": "Returns all of the Airing objects in the database that are on the specified channel during the specified time span.\n        @param Channel the Channel that the Airings need to be one\n        @param StartTime the start of the time window to search for Airings in\n        @param EndTime the end of the time window to search for Airings in\n        @param MustStartDuringTime if true, then only Airings that start during the time window will be returned, if false\n                then any Airing that overlaps with the time window will be returned\n        @return the Airings on the specified channel within the specified time window",
        "operationId": "GetAiringsOnChannelAtTime",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Channel",
            "required": true,
            "description": "Channel",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "StartTime",
            "in": "query"
          },
          {
            "name": "3",
            "type": "integer",
            "required": true,
            "description": "EndTime",
            "in": "query"
          },
          {
            "name": "4",
            "type": "boolean",
            "required": true,
            "description": "MustStartDuringTime",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Airing"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAiringsOnViewableChannelsAtTime": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Database"
        ],
        "description": "Returns all of the Airing objects in the database on all of the channels that are viewable during the specified time span.\n        @param StartTime the start of the time window to search for Airings in\n        @param EndTime the end of the time window to search for Airings in\n        @param MustStartDuringTime if true, then only Airings that start during the time window will be returned, if false\n                then any Airing that overlaps with the time window will be returned\n        @return the Airings on all the viewable channels within the specified time window",
        "operationId": "GetAiringsOnViewableChannelsAtTime",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "integer",
            "required": true,
            "description": "StartTime",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "EndTime",
            "in": "query"
          },
          {
            "name": "3",
            "type": "boolean",
            "required": true,
            "description": "MustStartDuringTime",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Airing"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAllCategories": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Database"
        ],
        "description": "Gets all of the categories that are in the database.\n        The content it references must also match one of the media types specified in the MediaMask.\n        @param MediaMask string specifying what content types to search (i.e. \"TM\" for TV \u0026amp; Music, \u0027T\u0027\u003dTV, \u0027M\u0027\u003dMusic, \u0027V\u0027\u003dVideo, \u0027D\u0027\u003dDVD, \u0027P\u0027\u003dPictures, \u0027B\u0027\u003dBluRay)\n        @return all of the names of categories that are in the database that also have content that matches the MediaMask\n        @since 5.1",
        "operationId": "GetAllCategories",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaMask",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAllGroupingCategories": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Database"
        ],
        "description": "Gets all of the categories that are in the database.\n        The content it references must also match one of the media types specified in the MediaMask.\n        This is different than GetAllCategories because this one will break apart\n        any comma or semicolon delimited category lists into multiple different categories. i.e. if you have \"Comedy; Horror\" as a category\n        this API call will break it up into Comedy and Horror as two separate categories. This call will also coalesce any case-sensitive differences in category names.\n        @param MediaMask string specifying what content types to search (i.e. \"TM\" for TV \u0026amp; Music, \u0027T\u0027\u003dTV, \u0027M\u0027\u003dMusic, \u0027V\u0027\u003dVideo, \u0027D\u0027\u003dDVD, \u0027P\u0027\u003dPictures, \u0027B\u0027\u003dBluRay)\n        @return all of the names of categories that are in the database that also have content that matches the MediaMask with multi-categories broken apart\n        @since 7.0",
        "operationId": "GetAllGroupingCategories",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaMask",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAllNonMusicWithPerson": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Database"
        ],
        "description": "Returns all Airings in the database that refer to content that is NOT a music file and includes the specified person\n        in the list of people involved (i.e. actors, directors, producers, etc.)\n        @param Person the name of the person to search for matching content on\n        @return an array of Airing objects that reference content that includes the specified person, music is not returned\n        @deprecated",
        "operationId": "GetAllNonMusicWithPerson",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Person",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Airing"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAllNonMusicWithTitle": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Database"
        ],
        "description": "Returns all Airings in the database that refer to content that is NOT a music file and has the specified title.\n        @param Title the title of the content must match this exactly\n        @return an array of Airing objects that reference content with the specified title, music is not returned\n        @deprecated",
        "operationId": "GetAllNonMusicWithTitle",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Title",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Airing"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAllPeople": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Database"
        ],
        "description": "Gets all of the people that are in the database.\n        The content it references must also match one of the media types specified in the MediaMask.\n        @param MediaMask string specifying what content types to search (i.e. \"TM\" for TV \u0026amp; Music, \u0027T\u0027\u003dTV, \u0027M\u0027\u003dMusic, \u0027V\u0027\u003dVideo, \u0027D\u0027\u003dDVD, \u0027P\u0027\u003dPictures, \u0027B\u0027\u003dBluRay)\n        @return a list of all of the names of people in the database that also have content that matches the MediaMask\n        @since 5.1",
        "operationId": "GetAllPeople",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaMask",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAllTitles": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Database"
        ],
        "description": "Gets all of the titles that are in the database.\n        The content it references must also match one of the media types specified in the MediaMask.\n        @param MediaMask string specifying what content types to search (i.e. \"TM\" for TV \u0026amp; Music, \u0027T\u0027\u003dTV, \u0027M\u0027\u003dMusic, \u0027V\u0027\u003dVideo, \u0027D\u0027\u003dDVD, \u0027P\u0027\u003dPictures, \u0027B\u0027\u003dBluRay)\n        @return a list of all of the titles that are in the database that also have content that matches the MediaMask\n        @since 5.1",
        "operationId": "GetAllTitles",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaMask",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetChannelsOnLineup": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Database"
        ],
        "description": "Returns all of the Channel objects in the database that are on the specified Lineup.\n        @param Lineup the name of the EPG lineup to get the channels for\n        @return an array of Channel objects that are on the specified Lineup",
        "operationId": "GetChannelsOnLineup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Lineup",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Channel"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetDatabaseLastModifiedTime": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Database"
        ],
        "description": "Returns the last modification time for objects that match anything in the specified MediaMask. This is useful\n        for knowing when to clear caches that are used to optimize UI rendering.\n        @param MediaMask string specifying what content types  (i.e. \"TM\" for TV \u0026amp; Music, \u0027T\u0027\u003dTV, \u0027M\u0027\u003dMusic, \u0027V\u0027\u003dVideo, \u0027D\u0027\u003dDVD, \u0027P\u0027\u003dPictures, \u0027B\u0027\u003dBluRay)\n        @return the last modification time of anything in the DB that matches anything in the specified MediaMask\n        @since 5.1",
        "operationId": "GetDatabaseLastModifiedTime",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaMask",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetFilesWithImportPrefix": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Database"
        ],
        "description": "Returns a list of java.io.File objects w/ the specified MediaMask whos import prefix matches that of the argument\n        @param MediaData can either by a MediaMask string specifying what content types  (\u0027M\u0027\u003dMusic, \u0027V\u0027\u003dVideo, \u0027D\u0027\u003dDVD, \u0027P\u0027\u003dPictures, \u0027B\u0027\u003dBluRay) or it can be an array/collection of the specific MediaFile objects to analyze\n        @param ImportPrefix a string specifying a subpath that must match the start of the import files path relative to its import root\n        @param IncludeFiles if true, then MediaFile objects with a complete prefix match will be returned\n        @param IncludeFolders if true, then MediaFile objects with a partial prefix match will be returned\n        @param GroupFolders if true, then MediaFile objects with partial prefixes that match will be grouped by their next path section; extract the \u0027null\u0027 keyed value to get the list of the files\n        @return a Vector or Map of java.io.File objects w/ the specified MediaMask whos import prefix matches that of the argument; a Map will be returned if GroupFolders is set to true\n        @since 6.4",
        "operationId": "GetFilesWithImportPrefix",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "MediaData",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "ImportPrefix",
            "in": "query"
          },
          {
            "name": "3",
            "type": "boolean",
            "required": true,
            "description": "IncludeFiles",
            "in": "query"
          },
          {
            "name": "4",
            "type": "boolean",
            "required": true,
            "description": "IncludeFolders",
            "in": "query"
          },
          {
            "name": "5",
            "type": "boolean",
            "required": true,
            "description": "GroupFolders",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetMediaFilesWithImportPrefix": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Database"
        ],
        "description": "Returns a list or map of MediaFile objects w/ the specified MediaMask whos import prefix matches that of the argument\n        @param MediaData can either by a MediaMask string specifying what content types  (\u0027M\u0027\u003dMusic, \u0027V\u0027\u003dVideo, \u0027D\u0027\u003dDVD, \u0027P\u0027\u003dPictures, \u0027B\u0027\u003dBluRay) or it can be an array/collection of the specific MediaFile objects to analyze\n        @param ImportPrefix a string specifying a subpath that must match the start of the import files path relative to its import root\n        @param IncludeFiles if true, then MediaFile objects with a complete prefix match will be returned\n        @param IncludeFolders if true, then MediaFile objects with a partial prefix match will be returned\n        @param GroupFolders if true, then MediaFile objects with partial prefixes that match will be grouped by their next path section; extract the \u0027null\u0027 keyed value to get the list of the files\n        @return a Vector or Map of MediaFile objects w/ the specified MediaMask whos import prefix matches that of the argument; a Map will be returned if GroupFolders is set to true\n        @since 6.4",
        "operationId": "GetMediaFilesWithImportPrefix",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "MediaData",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "ImportPrefix",
            "in": "query"
          },
          {
            "name": "3",
            "type": "boolean",
            "required": true,
            "description": "IncludeFiles",
            "in": "query"
          },
          {
            "name": "4",
            "type": "boolean",
            "required": true,
            "description": "IncludeFolders",
            "in": "query"
          },
          {
            "name": "5",
            "type": "boolean",
            "required": true,
            "description": "GroupFolders",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetMediaMask": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Database"
        ],
        "description": "Returns a string which represents the different media categories the specified DBObject belongs to.\n        This may contain any of the following characters respectively: T \u003d TV, D \u003d DVD, V \u003d Video, M \u003d Music,\n        P \u003d Photos, B \u003d BluRay, O \u003d VOD, N \u003d Netflix, U \u003d VUDU.\n        @param DBObject the database object to get the media mask of; should be an Airing, Show or MediaFile\n        @return the media mask string for the passed in DBObject\n       \n        @since 8.0",
        "operationId": "GetMediaMask",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/DBObject",
            "required": true,
            "description": "DBObject",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGroupByArrayMethod": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Database"
        ],
        "description": "Grouping method for data lists/maps. This will return a Map that uses a key-\u0026gt;value mapping to group the data.\n        The order of the grouping is stable, which means the order of the elements within a subgroup will be the same\n        order as in the pased in data. Use the GetSubgroup method to get the corresponding value for a key.\n        The keys for each data element is determined by calling the specified \u0027Method\u0027 with that data element as the sole parameter.\n        The Method should return an array or list, each element of which will be a key that the data element will be grouped by.\n        Each value in the map will be a java.util.Vector that contains the elements in the group.\n        NOTE: If you pass more than 2 arguments to this function then the extra arguments will\n        be passed along to the Method that should be executed.\n        @param Data the data to perform the grouping on, must be a java.util.Collection, java.util.Map or an Array\n        @param Method the name of the Method to execute on each element to retrieve the keys used for grouping\n        @return a java.util.Map keyed with the values obtained from executing Method on the Data and with values that are Vectors of elements who\u0027s keys match\n        @since 5.1",
        "operationId": "GroupByArrayMethod",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "Data",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Method",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is java.util.Map)",
            "schema": {
              "$ref": "#/definitions/java.util.Map"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGroupByMethod": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Database"
        ],
        "description": "Grouping method for data lists/maps. This will return a Map that uses a key-\u0026gt;value mapping to group the data.\n        The order of the grouping is stable, which means the order of the elements within a subgroup will be the same\n        order as in the pased in data. Use the GetSubgroup method to get the corresponding value for a key.\n        The key for each data element is determined by calling the specified \u0027Method\u0027 with that data element as the sole parameter.\n        Each value in the map will be a java.util.Vector that contains the elements in the group.\n        There is a special Method called \"Categories\" which will allow items to fall into possibly more than one group. This will\n        group by Category and also by SubCategory all at the same level (if SubCategory is not defined, then it will not be used for an alternate grouping).\n        \"Categories\" grouping will also break up any category names that have comma or semicolon delimited lists and put the item into each of those.\n        NOTE: If you pass more than 2 arguments to this function then the extra arguments will\n        be passed along to the Method that should be executed.\n        @param Data the data to perform the grouping on, must be a java.util.Collection, java.util.Map or an Array\n        @param Method the name of the Method to execute on each element to retrieve the key used for grouping, see the note above regarding \"Categories\" as a special option\n        @return a java.util.Map keyed with the values obtained from executing Method on the Data and with values that are Vectors of elements who\u0027s keys match",
        "operationId": "GroupByMethod",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "Data",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Method",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is java.util.Map)",
            "schema": {
              "$ref": "#/definitions/java.util.Map"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dHasMediaMask": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Database"
        ],
        "description": "Tests whether the passed in DBObject matches any of the categories specified in the passed in MediaMask.\n        This may contain any of the following characters respectively: T \u003d TV, D \u003d DVD, V \u003d Video, M \u003d Music,\n        P \u003d Photos, B \u003d BluRay, O \u003d VOD, N \u003d Netflix, U \u003d VUDU.\n        @param DBObject the database object to get the media mask of; should be an Airing, Show or MediaFile\n        @param MediaMask this may contain any of the following characters respectively: T \u003d TV, D \u003d DVD, V \u003d Video, M \u003d Music, P \u003d Photos, B \u003d BluRay, O \u003d VOD, N \u003d Netflix, U \u003d VUDU\n        @return true if the passed in object has any of the media masks from the passed in mask string, false otherwise\n       \n        @since 8.0",
        "operationId": "HasMediaMask",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/DBObject",
            "required": true,
            "description": "DBObject",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "MediaMask",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsDatabaseMemoryMaxed": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Database"
        ],
        "description": "Returns true if the database has maxed out its memory usage and cannot add more content\n        @return true if the database has maxed out its memory usage and cannot add more content\n       \n        @since 6.5",
        "operationId": "IsDatabaseMemoryMaxed",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSearchByPerson": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Database"
        ],
        "description": "Returns all Airings in the database that refer to content that includes the specified person\n        in the list of people involved (i.e. actors, directors, producers, etc.). The content must also match\n        one of the media types specified in the MediaMask\n        @param SearchString the name of the person to search for matching content on\n        @param MediaMask string specifying what content types to search (i.e. \"TM\" for TV \u0026amp; Music, \u0027T\u0027\u003dTV, \u0027M\u0027\u003dMusic, \u0027V\u0027\u003dVideo, \u0027D\u0027\u003dDVD, \u0027P\u0027\u003dPictures, \u0027B\u0027\u003dBluRay)\n        @return an array of Airing objects that reference content that includes the specified person and matches the media mask\n        @since 5.1",
        "operationId": "SearchByPerson",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "SearchString",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "MediaMask",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Airing"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSearchByText": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Database"
        ],
        "description": "Searches the descriptions and episode names of all of the content in the database for the\n        specified search string. This search is case insensitive. The content must also match\n        one of the media types specified in the MediaMask\n        @param SearchString the string to search for\n        @param MediaMask string specifying what content types to search (i.e. \"TM\" for TV \u0026amp; Music, \u0027T\u0027\u003dTV, \u0027M\u0027\u003dMusic, \u0027V\u0027\u003dVideo, \u0027D\u0027\u003dDVD, \u0027P\u0027\u003dPictures, \u0027B\u0027\u003dBluRay)\n        @return an array of Airings who\u0027s content has the specified search string in its description or episode name and matches the media mask\n        @since 5.1",
        "operationId": "SearchByText",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "SearchString",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "MediaMask",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Airing"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSearchByTitle": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Database"
        ],
        "description": "Returns all Airings in the database that refer to content that has the specified title. The content must also match\n        one of the media types specified in the MediaMask\n        @param SearchString the title of the content must match this exactly\n        @param MediaMask string specifying what content types to search (i.e. \"TM\" for TV \u0026amp; Music, \u0027T\u0027\u003dTV, \u0027M\u0027\u003dMusic, \u0027V\u0027\u003dVideo, \u0027D\u0027\u003dDVD, \u0027P\u0027\u003dPictures, \u0027B\u0027\u003dBluRay)\n        @return an array of Airing objects that reference content with the specified title and matches the media mask\n        @since 5.1",
        "operationId": "SearchByTitle",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "SearchString",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "MediaMask",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Airing"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSearchForChannel": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Database"
        ],
        "description": "Returns all Channels in the database that match the SearchString in their\n        channel number, name, callsign or network. Results will be returned in\n        StationID order\n       \n        @param SearchString the text to search for\n        @param IncludeNonViewable whether to include Non-Viewable (disabled) channels in the results\n        @return an array of Channel objects that includes the SearchString\n        @since 8.1",
        "operationId": "SearchForChannel",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "SearchString",
            "in": "query"
          },
          {
            "name": "2",
            "type": "boolean",
            "required": true,
            "description": "IncludeNonViewable",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Channel"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSearchForPeople": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Database"
        ],
        "description": "Returns a list of all of the people in the database that include the search string in their name.\n        This search is case insensitive. The content it references must also match one of the media types specified in the MediaMask.\n        @param SearchString the string to search on\n        @param MediaMask string specifying what content types to search (i.e. \"TM\" for TV \u0026amp; Music, \u0027T\u0027\u003dTV, \u0027M\u0027\u003dMusic, \u0027V\u0027\u003dVideo, \u0027D\u0027\u003dDVD, \u0027P\u0027\u003dPictures, \u0027B\u0027\u003dBluRay)\n        @return an array of Persons which represent all of the people in the database that matched the search that also have content that matches the MediaMask\n        @since 5.1",
        "operationId": "SearchForPeople",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "SearchString",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "MediaMask",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Person"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSearchForPeopleNTE": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Database"
        ],
        "description": "Returns a list of all of the people in the database that match the passed in text, where\n        the Unicode characters u2460-u2468 and u24EA  (Unicode Circled Digits) in the text represent the\n        numeric Text Keys 1-9 and 0. This is similar to the predictive text entry input of mobile phones.\u003cbr\u003e\n        The characters represented by the keys are defined by the client properties\n        \u003ctt\u003e\"ui/numeric_text_input_\u0026lt;ui/translation_language_code\u0026gt;_\u0026lt;key\u0026gt;_lower\u003c/tt\u003e\n        The content it references must also match one of the media types specified in the MediaMask.\n        @param NTEString A string containing a mix of normal and NumericTextKey characters (u2460-2468, u24ae)\n        @param MediaMask string specifying what content types to search (i.e. \"TM\" for TV \u0026amp; Music, \u0027T\u0027\u003dTV, \u0027M\u0027\u003dMusic, \u0027V\u0027\u003dVideo, \u0027D\u0027\u003dDVD, \u0027P\u0027\u003dPictures, \u0027B\u0027\u003dBluRay)\n        @return an array of Persons which represent all of the people in the database that matched the search that also have content that matches the MediaMask\n        @since 8.0",
        "operationId": "SearchForPeopleNTE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "NTEString",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "MediaMask",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Person"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSearchForPeopleRegex": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Database"
        ],
        "description": "Returns a list of all of the people in the database that match the passed in regular expression.\n        The content it references must also match one of the media types specified in the MediaMask.\n        @param RegexPattern The compiled regular expression used for matching (if it\u0027s not compiled, then it will be converted to a compiled regular expression)\n        @param MediaMask string specifying what content types to search (i.e. \"TM\" for TV \u0026amp; Music, \u0027T\u0027\u003dTV, \u0027M\u0027\u003dMusic, \u0027V\u0027\u003dVideo, \u0027D\u0027\u003dDVD, \u0027P\u0027\u003dPictures, \u0027B\u0027\u003dBluRay)\n        @return an array of Persons which represent all of the people in the database that matched the search that also have content that matches the MediaMask\n        @since 5.1",
        "operationId": "SearchForPeopleRegex",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/java.util.regex.Pattern",
            "required": true,
            "description": "RegexPattern",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "MediaMask",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Person"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSearchForTitles": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Database"
        ],
        "description": "Returns a list of all of the titles in the database that include the search string in them.\n        This search is case insensitive. The content it references must also match one of the media types specified in the MediaMask.\n        @param SearchString the string to search on\n        @param MediaMask string specifying what content types to search (i.e. \"TM\" for TV \u0026amp; Music, \u0027T\u0027\u003dTV, \u0027M\u0027\u003dMusic, \u0027V\u0027\u003dVideo, \u0027D\u0027\u003dDVD, \u0027P\u0027\u003dPictures, \u0027B\u0027\u003dBluRay)\n        @return an array of Strings which represent all of the titles in the database that matched the search that also have content that matches the MediaMask\n        @since 5.1",
        "operationId": "SearchForTitles",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "SearchString",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "MediaMask",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSearchForTitlesNTE": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Database"
        ],
        "description": "Returns a list of all of the titles in the database that match the passed in text, where\n        the Unicode characters u2460-u2468 and u24EA  (Unicode Circled Digits) in the text represent the\n        numeric Text Keys 1-9 and 0. This is similar to the predictive text entry input of mobile phones.\u003cbr\u003e\n        The characters represented by the keys are defined by the client properties\n        \u003ctt\u003e\"ui/numeric_text_input_\u0026lt;ui/translation_language_code\u0026gt;_\u0026lt;key\u0026gt;_lower\u003c/tt\u003e\n        The content it references must also match one of the media types specified in the MediaMask.\n        @param NTEString A string containing a mix of normal and NumericTextKey characters (u2460-2468, u24ae)\n        @param MediaMask string specifying what content types to search (i.e. \"TM\" for TV \u0026amp; Music, \u0027T\u0027\u003dTV, \u0027M\u0027\u003dMusic, \u0027V\u0027\u003dVideo, \u0027D\u0027\u003dDVD, \u0027P\u0027\u003dPictures, \u0027B\u0027\u003dBluRay)\n        @return an array of Strings which represent all of the titles in the database that matched the search that also have content that matches the MediaMask\n        @since 8.0",
        "operationId": "SearchForTitlesNTE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "NTEString",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "MediaMask",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSearchForTitlesRegex": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Database"
        ],
        "description": "Returns a list of all of the titles in the database that match the passed in regular expression.\n        The content it references must also match one of the media types specified in the MediaMask.\n        @param RegexPattern The compiled regular expression used for matching (if it\u0027s not compiled, then it will be converted to a compiled regular expression)\n        @param MediaMask string specifying what content types to search (i.e. \"TM\" for TV \u0026amp; Music, \u0027T\u0027\u003dTV, \u0027M\u0027\u003dMusic, \u0027V\u0027\u003dVideo, \u0027D\u0027\u003dDVD, \u0027P\u0027\u003dPictures, \u0027B\u0027\u003dBluRay)\n        @return an array of Strings which represent all of the titles in the database that matched the search that also have content that matches the MediaMask\n        @since 5.1",
        "operationId": "SearchForTitlesRegex",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/java.util.regex.Pattern",
            "required": true,
            "description": "RegexPattern",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "MediaMask",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSearchSelectedExactFields": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Database"
        ],
        "description": "Searches the specified fields of all the Airings in the database for the specified search string. This requires\n        that the SearchString matches the specified field\u0027s value exactly. Unlike {@link #SearchSelectedFields SearchSelectedFields}\n        which only requires that the SearchString exist within the field\u0027s value somewhere (i.e. a substring)\n        The content it references must also match one of the media types specified in the MediaMask.\n        @param SearchString the string to search with\n        @param CaseSensitive if true then the search is case senstive, if false then it\u0027s case insensitive\n        @param Titles if true then the title fields will be searched, if false then they will not be\n        @param Episode if true then the episode fields will be searched, if false then they will be not be\n        @param Description if true then the description fields will be searched, if false then they will not be\n        @param People if true then the people fields will be searched, if false then they will not be\n        @param Category if true then the category fields will be searched, if false then they will not be\n        @param Rated if true then the rated fields will be searched, if false then they will not be\n        @param ExtendedRatings if true then the extended ratings fields will be searched, if false then they will not be\n        @param Year if true then the year fields will be searched, if false then they will not be\n        @param Misc if true then the miscellaneous fields will be searched, if false then they will not be\n        @param MediaMask string specifying what content types to search (i.e. \"TM\" for TV \u0026amp; Music, \u0027T\u0027\u003dTV, \u0027M\u0027\u003dMusic, \u0027V\u0027\u003dVideo, \u0027D\u0027\u003dDVD, \u0027P\u0027\u003dPictures, \u0027B\u0027\u003dBluRay)\n        @return an array of Airings which matches the search criteria\n        @since 5.1",
        "operationId": "SearchSelectedExactFields",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "SearchString",
            "in": "query"
          },
          {
            "name": "2",
            "type": "boolean",
            "required": true,
            "description": "CaseSensitive",
            "in": "query"
          },
          {
            "name": "3",
            "type": "boolean",
            "required": true,
            "description": "Titles",
            "in": "query"
          },
          {
            "name": "4",
            "type": "boolean",
            "required": true,
            "description": "Episode",
            "in": "query"
          },
          {
            "name": "5",
            "type": "boolean",
            "required": true,
            "description": "Description",
            "in": "query"
          },
          {
            "name": "6",
            "type": "boolean",
            "required": true,
            "description": "People",
            "in": "query"
          },
          {
            "name": "7",
            "type": "boolean",
            "required": true,
            "description": "Category",
            "in": "query"
          },
          {
            "name": "8",
            "type": "boolean",
            "required": true,
            "description": "Rated",
            "in": "query"
          },
          {
            "name": "9",
            "type": "boolean",
            "required": true,
            "description": "ExtendedRatings",
            "in": "query"
          },
          {
            "name": "10",
            "type": "boolean",
            "required": true,
            "description": "Year",
            "in": "query"
          },
          {
            "name": "11",
            "type": "boolean",
            "required": true,
            "description": "Misc",
            "in": "query"
          },
          {
            "name": "12",
            "type": "string",
            "required": true,
            "description": "MediaMask",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is java.util.Vector)",
            "schema": {
              "$ref": "#/definitions/java.util.Vector"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSearchSelectedFields": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Database"
        ],
        "description": "Searches the specified fields of all the Airings in the database for the specified search string.\n        The content it references must also match one of the media types specified in the MediaMask.\n        @param SearchString the string to search with\n        @param CaseSensitive if true then the search is case senstive, if false then it\u0027s case insensitive\n        @param Titles if true then the title fields will be searched, if false then they will not be\n        @param Episode if true then the episode fields will be searched, if false then they will be not be\n        @param Description if true then the description fields will be searched, if false then they will not be\n        @param People if true then the people fields will be searched, if false then they will not be\n        @param Category if true then the category fields will be searched, if false then they will not be\n        @param Rated if true then the rated fields will be searched, if false then they will not be\n        @param ExtendedRatings if true then the extended ratings fields will be searched, if false then they will not be\n        @param Year if true then the year fields will be searched, if false then they will not be\n        @param Misc if true then the miscellaneous fields will be searched, if false then they will not be\n        @param MediaMask string specifying what content types to search (i.e. \"TM\" for TV \u0026amp; Music, \u0027T\u0027\u003dTV, \u0027M\u0027\u003dMusic, \u0027V\u0027\u003dVideo, \u0027D\u0027\u003dDVD, \u0027P\u0027\u003dPictures, \u0027B\u0027\u003dBluRay)\n        @return an array of Airings which matches the search criteria\n        @since 5.1",
        "operationId": "SearchSelectedFields",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "SearchString",
            "in": "query"
          },
          {
            "name": "2",
            "type": "boolean",
            "required": true,
            "description": "CaseSensitive",
            "in": "query"
          },
          {
            "name": "3",
            "type": "boolean",
            "required": true,
            "description": "Titles",
            "in": "query"
          },
          {
            "name": "4",
            "type": "boolean",
            "required": true,
            "description": "Episode",
            "in": "query"
          },
          {
            "name": "5",
            "type": "boolean",
            "required": true,
            "description": "Description",
            "in": "query"
          },
          {
            "name": "6",
            "type": "boolean",
            "required": true,
            "description": "People",
            "in": "query"
          },
          {
            "name": "7",
            "type": "boolean",
            "required": true,
            "description": "Category",
            "in": "query"
          },
          {
            "name": "8",
            "type": "boolean",
            "required": true,
            "description": "Rated",
            "in": "query"
          },
          {
            "name": "9",
            "type": "boolean",
            "required": true,
            "description": "ExtendedRatings",
            "in": "query"
          },
          {
            "name": "10",
            "type": "boolean",
            "required": true,
            "description": "Year",
            "in": "query"
          },
          {
            "name": "11",
            "type": "boolean",
            "required": true,
            "description": "Misc",
            "in": "query"
          },
          {
            "name": "12",
            "type": "string",
            "required": true,
            "description": "MediaMask",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is java.util.Vector)",
            "schema": {
              "$ref": "#/definitions/java.util.Vector"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSearchSelectedFieldsNTE": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Database"
        ],
        "description": "Searches the specified fields of all the Airings in the database and tries to match them against\n        the passed in text where the Unicode characters u2460-u2468 and u24EA  (Unicode Circled Digits) in the text represent the\n        numeric Text Keys 1-9 and 0. This is similar to the predictive text entry input of mobile phones.\u003cbr\u003e\n        The characters represented by the keys are defined by the client properties\n        \u003ctt\u003e\"ui/numeric_text_input_\u0026lt;ui/translation_language_code\u0026gt;_\u0026lt;key\u0026gt;_lower\u003c/tt\u003e.\n        The content it references must also match one of the media types specified in the MediaMask.\n        @param NTEString A string containing a mix of normal and NumericTextKey characters (u2460-2468, u24ae)\n        @param Titles if true then the title fields will be searched, if false then they will not be\n        @param Episode if true then the episode fields will be searched, if false then they will be not be\n        @param Description if true then the description fields will be searched, if false then they will not be\n        @param People if true then the people fields will be searched, if false then they will not be\n        @param Category if true then the category fields will be searched, if false then they will not be\n        @param Rated if true then the rated fields will be searched, if false then they will not be\n        @param ExtendedRatings if true then the extended ratings fields will be searched, if false then they will not be\n        @param Year if true then the year fields will be searched, if false then they will not be\n        @param Misc if true then the miscellaneous fields will be searched, if false then they will not be\n        @param MediaMask string specifying what content types to search (i.e. \"TM\" for TV \u0026amp; Music, \u0027T\u0027\u003dTV, \u0027M\u0027\u003dMusic, \u0027V\u0027\u003dVideo, \u0027D\u0027\u003dDVD, \u0027P\u0027\u003dPictures, \u0027B\u0027\u003dBluRay)\n        @return an array of Airings which matches the search criteria\n        @since 8.0",
        "operationId": "SearchSelectedFieldsNTE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "NTEString",
            "in": "query"
          },
          {
            "name": "2",
            "type": "boolean",
            "required": true,
            "description": "Titles",
            "in": "query"
          },
          {
            "name": "3",
            "type": "boolean",
            "required": true,
            "description": "Episode",
            "in": "query"
          },
          {
            "name": "4",
            "type": "boolean",
            "required": true,
            "description": "Description",
            "in": "query"
          },
          {
            "name": "5",
            "type": "boolean",
            "required": true,
            "description": "People",
            "in": "query"
          },
          {
            "name": "6",
            "type": "boolean",
            "required": true,
            "description": "Category",
            "in": "query"
          },
          {
            "name": "7",
            "type": "boolean",
            "required": true,
            "description": "Rated",
            "in": "query"
          },
          {
            "name": "8",
            "type": "boolean",
            "required": true,
            "description": "ExtendedRatings",
            "in": "query"
          },
          {
            "name": "9",
            "type": "boolean",
            "required": true,
            "description": "Year",
            "in": "query"
          },
          {
            "name": "10",
            "type": "boolean",
            "required": true,
            "description": "Misc",
            "in": "query"
          },
          {
            "name": "11",
            "type": "string",
            "required": true,
            "description": "MediaMask",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is java.util.Vector)",
            "schema": {
              "$ref": "#/definitions/java.util.Vector"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSearchSelectedFieldsRegex": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Database"
        ],
        "description": "Searches the specified fields of all the Airings in the database and tries to match them against\n        the passed in regular expression.\n        The content it references must also match one of the media types specified in the MediaMask.\n        @param RegexPattern The compiled regular expression used for matching (if it\u0027s not compiled, then it will be converted to a compiled regular expression)\n        @param Titles if true then the title fields will be searched, if false then they will not be\n        @param Episode if true then the episode fields will be searched, if false then they will be not be\n        @param Description if true then the description fields will be searched, if false then they will not be\n        @param People if true then the people fields will be searched, if false then they will not be\n        @param Category if true then the category fields will be searched, if false then they will not be\n        @param Rated if true then the rated fields will be searched, if false then they will not be\n        @param ExtendedRatings if true then the extended ratings fields will be searched, if false then they will not be\n        @param Year if true then the year fields will be searched, if false then they will not be\n        @param Misc if true then the miscellaneous fields will be searched, if false then they will not be\n        @param MediaMask string specifying what content types to search (i.e. \"TM\" for TV \u0026amp; Music, \u0027T\u0027\u003dTV, \u0027M\u0027\u003dMusic, \u0027V\u0027\u003dVideo, \u0027D\u0027\u003dDVD, \u0027P\u0027\u003dPictures, \u0027B\u0027\u003dBluRay)\n        @return an array of Airings which matches the search criteria\n        @since 5.1",
        "operationId": "SearchSelectedFieldsRegex",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/java.util.regex.Pattern",
            "required": true,
            "description": "RegexPattern",
            "in": "query"
          },
          {
            "name": "2",
            "type": "boolean",
            "required": true,
            "description": "Titles",
            "in": "query"
          },
          {
            "name": "3",
            "type": "boolean",
            "required": true,
            "description": "Episode",
            "in": "query"
          },
          {
            "name": "4",
            "type": "boolean",
            "required": true,
            "description": "Description",
            "in": "query"
          },
          {
            "name": "5",
            "type": "boolean",
            "required": true,
            "description": "People",
            "in": "query"
          },
          {
            "name": "6",
            "type": "boolean",
            "required": true,
            "description": "Category",
            "in": "query"
          },
          {
            "name": "7",
            "type": "boolean",
            "required": true,
            "description": "Rated",
            "in": "query"
          },
          {
            "name": "8",
            "type": "boolean",
            "required": true,
            "description": "ExtendedRatings",
            "in": "query"
          },
          {
            "name": "9",
            "type": "boolean",
            "required": true,
            "description": "Year",
            "in": "query"
          },
          {
            "name": "10",
            "type": "boolean",
            "required": true,
            "description": "Misc",
            "in": "query"
          },
          {
            "name": "11",
            "type": "string",
            "required": true,
            "description": "MediaMask",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is java.util.Vector)",
            "schema": {
              "$ref": "#/definitions/java.util.Vector"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSort": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Database"
        ],
        "description": "Sorts a list of data according to the specified sorting technique. The order of the sort can be reversed using\n        the Descending parameter. If you use a method name for the SortTechnique, then the data will be sorted by the natural\n        ordering of the values returned from that mehod call. If that data type does not implement java.lang.Comparable then they\n        will be converted to Strings and those Strings will be compared. NOTE: If you pass more than 3 arguments to this function then the extra arguments will\n        be passed along to the SortTechnique if it refers to a Method that should be executed.\n        @param Data the data to sort, this must be a java.util.Collection, a java.util.Map, or an array; for Collections all the elements must be the same Class\n        @param Descending if true then the data will be sorted in descending order, if false then the order will be reversed\n        @param SortTechnique the technique to sort the data by; this can be a java.util.Comparator\n                which then explicitly controls the sort, or it can be one of the named sorting techniques of:\n                Intelligent, ChannelNumber, CaseInsensitive, FavoritePriority, CaptureDevicePriority, Natural or a method name. If null is passed then the elements \"natural\" sorting is used.\n        @return the sorted data, for passed in Maps this\u0027ll be a sorted Map; for Collections or arrays this will be an Object[] array",
        "operationId": "Sort",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "Data",
            "in": "query"
          },
          {
            "name": "2",
            "type": "boolean",
            "required": true,
            "description": "Descending",
            "in": "query"
          },
          {
            "name": "3",
            "type": "#/definitions/Object",
            "required": true,
            "description": "SortTechnique",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSortLexical": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Database"
        ],
        "description": "Sorts a list of data based on the result of calling the \"SortByMethod\" on each item and using toString on the return value of that method.\n        The order of the sort can be reversed using the Descending parameter. There are many cases where this will return the same thing as a call to {@link #Sort Sort()}\n        SortLexical should be used when sorting text if possible, as it uses more advanced language-specific sorting techniques to determine a proper order.\n        This sort is performed case-insensitive.\n        NOTE: If you pass more than 3 arguments to this function then the extra arguments will be passed along to the SortByMethod.\n        @param Data the data to sort, this must be a java.util.Collection, a java.util.Map, or an array; for Collections all the elements must be the same Class\n        @param Descending if true then the data will be sorted in descending order, if false then the order will be reversed\n        @param SortByMethod the method to call on each data item to get the value it should be sorted by, if this is null then the data elements are converted to Strings directly and then compared\n        @return the sorted data, for passed in Maps this\u0027ll be a sorted Map; for Collections or arrays this will be an Object[] array\n        @since 5.1",
        "operationId": "SortLexical",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "Data",
            "in": "query"
          },
          {
            "name": "2",
            "type": "boolean",
            "required": true,
            "description": "Descending",
            "in": "query"
          },
          {
            "name": "3",
            "type": "string",
            "required": true,
            "description": "SortByMethod",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dStripLeadingArticles": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Database"
        ],
        "description": "Strips any leading \u0027a, an or the\u0027 prefixes from the passed in string and returns the resulting string.\n        If the property \"ui/ignore_the_when_sorting\" is set to false, this method will do nothing. The articles stripped\n        by this method can be defined with the property \"ui/prefixes_to_ignore_on_sort\".\n        @param Text the string to strip the leading articles from\n        @return the String after the leading articles have been stripped from the past in string\n       \n        @since 7.0",
        "operationId": "StripLeadingArticles",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Text",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dAddFavorite": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Creates a new Favorite object in SageTV. Airings that match this Favorite will be recorded and saved into the SageTV Recordings.\n        @param Title the title that an Airing must match to be included in this Favorite, use the empty string or null if the title isn\u0027t a field that needs to match\n        @param FirstRuns true if this Favorite should match First Runs, false otherwise\n        @param ReRuns true if this Favorite should match ReRuns, false otherwise (if both FirstRuns and ReRuns are false, then it will match both)\n        @param Category the category that an Airing must match to be included in this Favorite, use the empty string or null if category isn\u0027t a field that needs to match\n        @param SubCategory the subcategory that an Airing must match to be included in this Favorite, use the empty string or null if subcategory isn\u0027t a field that needs to match\n        @param Person the name of the person that needs to be included in an Airing for it to match this Favorite, use the empty string or null if person doesn\u0027t need to match\n        @param RoleForPerson the name of the role the corresponding person needs to be in, or the emptry string or null if role doesn\u0027t matter\n        @param Rated the rating that an Airing must match to be included in this Favorite, use the empty string or null if rating isn\u0027t a field that needs to match\n        @param Year the year that an Airing must match to be included in this Favorite, use the empty string or null if year isn\u0027t a field that needs to match\n        @param ParentalRating the parental rating that an Airing must match to be included in this Favorite, use the empty string or null if parental rating isn\u0027t a field that needs to match\n        @param Network the network name that an Airing must be on to be included in this Favorite, use null or the empty string if network doesn\u0027t matter\n        @param ChannelCallSign the channel name that an Airing must be on to be included in this Favorite, use null or the empty string if channel doesn\u0027t matter; you may also use a semicolon or comma-delimited list of channel names for multi-channel favorites\n        @param Timeslot the timeslot that an Airing must be in to be included in this Favorite, use null or the empty string if timeslot doesn\u0027t matter.\n                The timeslot should be in one of three formats: 1) Day Time, 2) Day, 3) Time. Where Day is a day of the week, and Time is an\n                hour of the day such as 3pm or 8:00 (if the user\u0027s locale uses am/pm then it\u0027ll be like 3pm, otherwise it\u0027ll use like 8:00)\n                Multiple timeslots are allowed and should be sent as a semicolon delimited list; an Airing only needs to overlap one of the timeslots to match the Favorite then.\n       \t\t   Multiple timeslots must also all be of the same type (i.e. all DayTime, all Day or all Time).\n        @param Keyword the keyword that an Airing must match to be included in this Favorite, use the empty string or null if keyword doesn\u0027t matter\n        @return the newly created Favorite object, null is returned if there was no valid criteria specified in the arguments",
        "operationId": "AddFavorite",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Title",
            "in": "query"
          },
          {
            "name": "2",
            "type": "boolean",
            "required": true,
            "description": "FirstRuns",
            "in": "query"
          },
          {
            "name": "3",
            "type": "boolean",
            "required": true,
            "description": "ReRuns",
            "in": "query"
          },
          {
            "name": "4",
            "type": "string",
            "required": true,
            "description": "Category",
            "in": "query"
          },
          {
            "name": "5",
            "type": "string",
            "required": true,
            "description": "SubCategory",
            "in": "query"
          },
          {
            "name": "6",
            "type": "#/definitions/Person",
            "required": true,
            "description": "Person",
            "in": "query"
          },
          {
            "name": "7",
            "type": "string",
            "required": true,
            "description": "RoleForPerson",
            "in": "query"
          },
          {
            "name": "8",
            "type": "string",
            "required": true,
            "description": "Rated",
            "in": "query"
          },
          {
            "name": "9",
            "type": "string",
            "required": true,
            "description": "Year",
            "in": "query"
          },
          {
            "name": "10",
            "type": "string",
            "required": true,
            "description": "ParentalRating",
            "in": "query"
          },
          {
            "name": "11",
            "type": "string",
            "required": true,
            "description": "Network",
            "in": "query"
          },
          {
            "name": "12",
            "type": "string",
            "required": true,
            "description": "ChannelCallSign",
            "in": "query"
          },
          {
            "name": "13",
            "type": "string",
            "required": true,
            "description": "Timeslot",
            "in": "query"
          },
          {
            "name": "14",
            "type": "string",
            "required": true,
            "description": "Keyword",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Favorite)",
            "schema": {
              "$ref": "#/definitions/Favorite"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dConfirmManualRecordOverFavoritePriority": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Confirms that the user is aware that a manual recording they\u0027ve selected creates a conflict with this favorite recording. This is purely\n        for notifcation purposes.\n        @param ManualRecordAiring the manual record Airing object to confirm the recording priority of\n        @param FavoriteAiring the Airing for the Favorite that won\u0027t be recorded due to the manual record",
        "operationId": "ConfirmManualRecordOverFavoritePriority",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Airing",
            "required": true,
            "description": "ManualRecordAiring",
            "in": "query"
          },
          {
            "name": "2",
            "type": "#/definitions/Airing",
            "required": true,
            "description": "FavoriteAiring",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dCreateFavoritePriority": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Establishes a priority of one Favorite over another. This will take undo any previous prioritization that it directly conflicts with.\n        Favorites with a higher priority will be recorded over ones with a lower priority if there\u0027s a case where both cannot be recorded at once.\n        @param HigherPriorityFavorite the Favorite object that you wish to make a higher priority than the other specified Favorite object\n        @param LowerPriorityFavorite the Favorite object that you wish to make a lower priority than the other specified Favorite object",
        "operationId": "CreateFavoritePriority",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Favorite",
            "required": true,
            "description": "HigherPriorityFavorite",
            "in": "query"
          },
          {
            "name": "2",
            "type": "#/definitions/Favorite",
            "required": true,
            "description": "LowerPriorityFavorite",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dDoesFavoriteMatchAiring": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Returns true if the specified Favorite object matches the specified Airing object.\n        @param Favorite the Favorite object to test\n        @param Airing the Airing object to test\n        @return true if the specified Favorite matches the specified Airing, false otherwise",
        "operationId": "DoesFavoriteMatchAiring",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          },
          {
            "name": "2",
            "type": "#/definitions/Airing",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetFavoriteAirings": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Returns a list of all of the Airings in the database that match this Favorite.  If this Favorite is disabled,\n        no Airings will be returned.  To get a list of Airings that match a disabled Favorite, call\n        GetPotentialFavoriteAirings instead.\n       \n        @param Favorite the Favorite object\n        @return the list of Airings in the DB that match this Favorite",
        "operationId": "GetFavoriteAirings",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Airing"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetFavoriteAutomaticConversionDestination": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Gets the directory that automatic conversions of this favorite should be saved to.\n        Returns the empty string when using the same directory the recording is in.\n        @param Favorite the Favorite object\n        @return the destination directory for the automatic conversions of this Favorite; or null if its the same as the recording directory\n        @since 7.0",
        "operationId": "GetFavoriteAutomaticConversionDestination",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is java.io.File)",
            "schema": {
              "$ref": "#/definitions/java.io.File"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetFavoriteAutomaticConversionFormat": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Gets the name of the format that recordings of this Favorite will automatically be converted to when they have completed recording. It will return an empty\n        string if automatic conversion is disabled for this Favorite\n        @param Favorite the Favorite object\n        @return the name of the transcode format that should be used when converting this Favorite, the empty string if no automatic conversion should be done\n        @since 7.0",
        "operationId": "GetFavoriteAutomaticConversionFormat",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetFavoriteCategory": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Returns the category that an Airing must match to be included in this Favorite.\n        @param Favorite the Favorite object\n        @return the category that an Airing must match to be included in this Favorite, returns the empty string if category isn\u0027t a field that needs to match",
        "operationId": "GetFavoriteCategory",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetFavoriteChannel": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Returns the channel name (call sign) that an Airing must be on to be included in this Favorite.\n        @param Favorite the Favorite object\n        @return the channel name that an Airing must be on to be included in this Favorite, returns the empty string if channel doesn\u0027t matter; for mult-channel favorites this will be a semicolon or comma-delimited list of channel names",
        "operationId": "GetFavoriteChannel",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetFavoriteDescription": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Returns a String that describes this Favorite.\n        @param Favorite the Favorite object\n        @return a descriptive string for this Favorite",
        "operationId": "GetFavoriteDescription",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetFavoriteForAiring": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Gets the Favorite that matches this Airing if one exists.\n        @param Airing the Airing object to get a matching Favorite for\n        @return a Favorite object that matches this Airing or null if there is no such Favorite",
        "operationId": "GetFavoriteForAiring",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Airing",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Favorite)",
            "schema": {
              "$ref": "#/definitions/Favorite"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetFavoriteForID": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Gets the Favorite object with the corresponding ID from the database. Use with {@link #GetFavoriteID GetFavoriteID()}\n        @param FavoriteID the ID to look up in the DB for a Favorite object\n        @return the Favorite object with the specified ID if it exists, null otherwise",
        "operationId": "GetFavoriteForID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "integer",
            "required": true,
            "description": "FavoriteID",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Favorite)",
            "schema": {
              "$ref": "#/definitions/Favorite"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetFavoriteID": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Gets a unique ID for this Favorite which can be used with {@link #GetFavoriteForID GetFavoriteForID()} for retrieving the object later.\n        @param Favorite the Favorite object\n        @return the unique ID for this Favorite",
        "operationId": "GetFavoriteID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetFavoriteKeyword": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Returns the keyword string that an Airing must match to be included in this Favorite. This is case insensitive. Double quotes\n        can be used to require word to be in a certain order. Otherwise; each individual word is searched for in the Airing\u0027s details and must\n        match a whole word for the match to succeed.  The  character can be used to match 0 or more characters. The ? character can be used\n        to match a single character. Regex is the matching language used for this so any other regex parsing characters besides  and ? can be used.\n        All of the fields of the object are searched as part of this.\n        @param Favorite the Favorite object\n        @return the keyword that an Airing must match to be included in this Favorite, returns the empty string if keyword doesn\u0027t matter",
        "operationId": "GetFavoriteKeyword",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetFavoriteNetwork": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Returns the network name that an Airing must be on to be included in this Favorite.\n        @param Favorite the Favorite object\n        @return the network name that an Airing must be on to be included in this Favorite, returns the empty string if network doesn\u0027t matter",
        "operationId": "GetFavoriteNetwork",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetFavoriteParentalRating": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Returns the parental rating that an Airing must match to be included in this Favorite.\n        @param Favorite the Favorite object\n        @return the parental rating that an Airing must match to be included in this Favorite, returns the empty string if parental rating isn\u0027t a field that needs to match",
        "operationId": "GetFavoriteParentalRating",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetFavoritePerson": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Returns the person that an Airing must have to be included in this Favorite. The person may also be restricted by their role in the content.\n        @param Favorite the Favorite object\n        @return the person that an Airing must have to be included in this Favorite, returns the empty string if person isn\u0027t a field that needs to match",
        "operationId": "GetFavoritePerson",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetFavoritePersonRole": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Returns the role that an Airing must have the Favorite Person in to be included in this Favorite. This only applies if a person is set for this Favorite.\n        @param Favorite the Favorite object\n        @return the role that the favorite person for an Airing must have to be included in this Favorite, returns the empty string if role doesn\u0027t matter",
        "operationId": "GetFavoritePersonRole",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetFavoritePresentationName": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Returns a String that describes this Favorite in a \u0027clean\u0027 way. Should be used in conjunction with\n        GetFavoritePresentationPrefix to create a complete string for presenting a Favorite named uniquely.\n        @param Favorite the Favorite object\n        @return a descriptive string for this Favorite\n        @since 8.0",
        "operationId": "GetFavoritePresentationName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetFavoritePresentationPrefix": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Returns a String that describes this type of Favorite this is, such as Show, Keyword, Person, etc.\n        @param Favorite the Favorite object\n        @return a descriptive string for the type of Favorite\n        @since 8.0",
        "operationId": "GetFavoritePresentationPrefix",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetFavoriteProperties": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Returns a java.util.Properties object that has all of the user-set properties for this Favorite in it.\n        @param Favorite the Favorite object\n        @return a java.util.Properties object that has all of the user-set properties for this Favorite in it; this is a copy of the original one so it is safe to modify it\n        @since 7.1",
        "operationId": "GetFavoriteProperties",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is java.util.Properties)",
            "schema": {
              "$ref": "#/definitions/java.util.Properties"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetFavoriteProperty": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Returns a property value for a specified Favorite. This must have been set using SetFavoriteProperty.\n        Returns the empty string when the property is undefined.\n        @param Favorite the Favorite object\n        @param PropertyName the name of the property\n        @return the property value for the specified Favorite, or the empty string if it is not defined\n        @since 7.0",
        "operationId": "GetFavoriteProperty",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "PropertyName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetFavoriteQuality": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Gets the name of the recording quality that should be used when recording this Favorite.\n        @param Favorite the Favorite object\n        @return the name of the recording quality that should be used when recording this Favorite, the empty string if the default recording quality should be used",
        "operationId": "GetFavoriteQuality",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetFavoriteRated": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Returns the rating that an Airing must match to be included in this Favorite.\n        @param Favorite the Favorite object\n        @return the rating that an Airing must match to be included in this Favorite, returns the empty string if rating isn\u0027t a field that needs to match",
        "operationId": "GetFavoriteRated",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetFavoriteSubCategory": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Returns the subcategory that an Airing must match to be included in this Favorite.\n        @param Favorite the Favorite object\n        @return the subcategory that an Airing must match to be included in this Favorite, returns the empty string if subcategory isn\u0027t a field that needs to match",
        "operationId": "GetFavoriteSubCategory",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetFavoriteTimeslot": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Returns the timeslot that an Airing must be in to be included in this Favorite. It just needs to overlap the timeslot.\n        @param Favorite the Favorite object\n        @return the timeslot that an Airing must be in to be included in this Favorite, returns the empty string if timeslot doesn\u0027t matter",
        "operationId": "GetFavoriteTimeslot",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetFavoriteTitle": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Returns the title that an Airing must match to be included in this Favorite.\n        @param Favorite the Favorite object\n        @return the title that an Airing must match to be included in this Favorite, returns the empty string if the title isn\u0027t a field that needs to match",
        "operationId": "GetFavoriteTitle",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetFavoriteYear": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Returns the year that an Airing must match to be included in this Favorite.\n        @param Favorite the Favorite object\n        @return the year that an Airing must match to be included in this Favorite, returns the empty string if year isn\u0027t a field that needs to match",
        "operationId": "GetFavoriteYear",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetFavorites": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Gets all of the Favorite objects from the database\n        @return all of the Favorite objects in the database",
        "operationId": "GetFavorites",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Favorite"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetFavoritesForAiring": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Gets the list of all Favorites that match this Airing\n        @param Airing the Airing object to get the matching Favorites for\n        @return a Favorite array who\u0027s elements all match this Airing\n        @since 8.0",
        "operationId": "GetFavoritesForAiring",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Airing",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Favorite"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetKeepAtMost": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Returns the maximum number of recordings that match this Favorite that should be kept on disk. If AutoDelete is\n        set to true then SageTV will continue to record new airings of this Favorite as they air, and delete the oldest\n        recording on disk if it hits the keep at most limit. If AutoDelete is false then SageTV will stop recording this Favorite\n        once it has this many recordings on disk\n        @param Favorite the Favorite object\n        @return the maximum number of recordings SageTV should keep on disk of this Favorite, 0 if it is unlimited",
        "operationId": "GetKeepAtMost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetStartPadding": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Returns the amount of time any recording for this Favorite should start before the actual Airing begins.\n        @param Favorite the Favorite object\n        @return the amount of time any recording for this Favorite should start before the actual Airing begins, in milliseconds",
        "operationId": "GetStartPadding",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetStopPadding": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Returns the amount of time any recording for this Favorite should stop after the actual Airing ends.\n        @param Favorite the Favorite object\n        @return the amount of time any recording for this Favorite should stop after the actual Airing ends, in milliseconds",
        "operationId": "GetStopPadding",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsAutoDelete": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Returns true if SageTV is allowed to automatically delete recordings of this\n        Favorite when it needs more disk space. If this is false, then SageTV will never automatically\n        delete files recorded for this Favorite; the user will have to delete the files themself.\n        @param Favorite the Favorite object\n        @return true if this Favorite is configured for auto delete, false otherwise",
        "operationId": "IsAutoDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsDeleteAfterAutomaticConversion": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "If an automatic conversion quality is set for this Favorite; then this will return true if\n        the original file will be deleted after that conversion is performed\n        @param Favorite the Favorite object\n        @return true if this Favorite is configured to delete the original file after automatic conversion\n        @since 7.0",
        "operationId": "IsDeleteAfterAutomaticConversion",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsFavoriteEnabled": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Returns true if SageTV considers this favorite when performing scheduling.\n        @param Favorite the Favorite object\n        @return true if this Favorite is enabled, false otherwise\n        @since 9.0",
        "operationId": "IsFavoriteEnabled",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsFavoriteObject": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Returns true if the argument is a Favorite object, false otherwise\n        @param Favorite an object to test to see if its an instance of Favorite\n        @return true if the argument is an instance of a Favorite object, false otherwise",
        "operationId": "IsFavoriteObject",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsFirstRuns": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Returns true if this Favorite is configured to record first runs (it may or may not record reruns)\n        @param Favorite the Favorite object\n        @return true if this Favorite is configured to record first runs, false otherwise",
        "operationId": "IsFirstRuns",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsFirstRunsAndReRuns": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Returns true if this Favorite is configured to record both first runs and reruns.\n        @param Favorite the Favorite object\n        @return true if this Favorite is configured to record both first runs AND reruns, false otherwise",
        "operationId": "IsFirstRunsAndReRuns",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsFirstRunsOnly": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Returns true if this Favorite is configured to record first runs but not reruns.\n        @param Favorite the Favorite object\n        @return true if this Favorite is configured to record first runs only, false otherwise",
        "operationId": "IsFirstRunsOnly",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsReRuns": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Returns true if this Favorite is configured to record reruns (it may or may not record first runs)\n        @param Favorite the Favorite object\n        @return true if this Favorite is configured to record reruns, false otherwise",
        "operationId": "IsReRuns",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsReRunsOnly": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Returns true if this Favorite is configured to record reruns but not first runs.\n        @param Favorite the Favorite object\n        @return true if this Favorite is configured to record reruns only, false otherwise",
        "operationId": "IsReRunsOnly",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dRemoveFavorite": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Removes a Favorite object from the database. Airings matching this Favorite will not necesarilly be automatically recorded anymore (intelligent recording may still record them)\n        @param Favorite the Favorite object to remove",
        "operationId": "RemoveFavorite",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetDeleteAfterAutomaticConversion": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Sets whether or not SageTV should delete the original file after doing an automatic conversion\n        for this Favorite\n        @param Favorite the Favorite object\n        @param DeleteAfterAutomaticConversion true if this Favorite is configured to delete the source file after automatic conversion\n        @since 7.0",
        "operationId": "SetDeleteAfterAutomaticConversion",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          },
          {
            "name": "2",
            "type": "boolean",
            "required": true,
            "description": "DeleteAfterAutomaticConversion",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetDontAutodelete": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Sets whether or not SageTV is allowed to automatically delete recordings of this\n        Favorite when it needs more disk space. If this is true, then SageTV will never automatically\n        delete files recorded for this Favorite; the user will have to delete the files themself.\n        @param Favorite the Favorite object\n        @param DontAutoDelete true if this Favorite is configured to NOT auto delete, false otherwise",
        "operationId": "SetDontAutodelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          },
          {
            "name": "2",
            "type": "boolean",
            "required": true,
            "description": "DontAutoDelete",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetFavoriteAutomaticConversionDestination": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Sets the directory that automatic conversions of this favorite should be saved to.\n        Use null to use the same directory the recording is in.\n        @param Favorite the Favorite object\n        @param Folder the destination directory for the automatic conversions of this Favorite; null to use the same directory as the recording directory\n        @since 7.0",
        "operationId": "SetFavoriteAutomaticConversionDestination",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          },
          {
            "name": "2",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "Folder",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetFavoriteAutomaticConversionFormat": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Sets the name of the format to transcode this Favorite to after a recording has been completed. Format names should come from {@link TranscodeAPI#GetTranscodeFormats GetTranscodeFormats()}.\n        Use the empty string or null to disable automatic conversion for this Favorite.\n        @param Favorite the Favorite object\n        @param Format the name of the transcode format to use when converting recordings of this Favorite; the empty string or null to disable automatic conversion\n        @since 7.0",
        "operationId": "SetFavoriteAutomaticConversionFormat",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Format",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetFavoriteCategories": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Sets the category and optionally the subcategory that an Airing must match to be included in this Favorite.\n        @param Favorite the Favorite object\n        @param Category the category that an Airing must match to be included in this Favorite, use the empty string or null if the category isn\u0027t a field that needs to match\n        @param SubCategory the category that an Airing must match to be included in this Favorite, use the empty string the subcategory doesn\u0027t need to match\n        @return true if the change was successful, false if the change would alter this Favorite to be identical to an existing Favorite or if the user doesn\u0027t have permissions to make this change",
        "operationId": "SetFavoriteCategories",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Category",
            "in": "query"
          },
          {
            "name": "3",
            "type": "string",
            "required": true,
            "description": "SubCategory",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetFavoriteChannel": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Sets the channel name (call sign) that an Airing must be on to be included in this Favorite.\n        @param Favorite the Favorite object\n        @param Channel the channel name (String) or Channel object (Channel) that an Airing must be on to be included in this Favorite, use null or the empty string if channel doesn\u0027t matter; you may also use a semicolon or comma-delimited list of channel names for mult-channel favorites\n        @return true if the change was successful, false if the change would alter this Favorite to be identical to an existing Favorite or if the user doesn\u0027t have permissions to make this change",
        "operationId": "SetFavoriteChannel",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          },
          {
            "name": "2",
            "type": "#/definitions/Object",
            "required": true,
            "description": "Channel",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetFavoriteEnabled": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Sets whether or not SageTV will use this favorite when scheduling recordings\n        @param Favorite the Favorite object\n        @param Enabled true if this Favorite is to be used for scheduling, false otherwise\n        @since 9.0",
        "operationId": "SetFavoriteEnabled",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          },
          {
            "name": "2",
            "type": "boolean",
            "required": true,
            "description": "Enabled",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetFavoriteKeyword": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Sets the keyword string that an Airing must match to be included in this Favorite. This is case insensitive. Double quotes\n        can be used to require word to be in a certain order. Otherwise; each individual word is searched for in the Airing\u0027s details and must\n        match a whole word for the match to succeed.  The  character can be used to match 0 or more characters. The ? character can be used\n        to match a single character. Regex is the matching language used for this so any other regex parsing characters besides  and ? can be used.\n        All of the fields of the object are searched as part of this.\n        @param Favorite the Favorite object\n        @param Keyword the keyword that an Airing must match to be included in this Favorite, use the empty string or null if keyword doesn\u0027t matter\n        @return true if the change was successful, false if the change would alter this Favorite to be identical to an existing Favorite or if the user doesn\u0027t have permissions to make this change",
        "operationId": "SetFavoriteKeyword",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Keyword",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetFavoriteNetwork": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Sets the network name that an Airing must be on to be included in this Favorite.\n        @param Favorite the Favorite object\n        @param Network the network name that an Airing must be on to be included in this Favorite, use null or the empty string if network doesn\u0027t matter\n        @return true if the change was successful, false if the change would alter this Favorite to be identical to an existing Favorite or if the user doesn\u0027t have permissions to make this change",
        "operationId": "SetFavoriteNetwork",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Network",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetFavoriteParentalRating": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Sets the parental rating that an Airing must match to be included in this Favorite.\n        @param Favorite the Favorite object\n        @param ParentalRating the parental rating that an Airing must match to be included in this Favorite, use the empty string or null if parental rating isn\u0027t a field that needs to match\n        @return true if the change was successful, false if the change would alter this Favorite to be identical to an existing Favorite or if the user doesn\u0027t have permissions to make this change",
        "operationId": "SetFavoriteParentalRating",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "ParentalRating",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetFavoritePerson": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Sets a person (and optionally the role the person must appear in) that must be in an Airing for it to be included in this Favorite\n        @param Favorite the Favorite object\n        @param Person the name of the person that needs to be included in an Airing for it to match this Favorite, use the empty string or null if person doesn\u0027t need to match\n        @param Role the name of the role the corresponding person needs to be in, or the emptry string or null if role doesn\u0027t matter\n        @return true if the change was successful, false if the change would alter this Favorite to be identical to an existing Favorite or if the user doesn\u0027t have permissions to make this change",
        "operationId": "SetFavoritePerson",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          },
          {
            "name": "2",
            "type": "#/definitions/Person",
            "required": true,
            "description": "Person",
            "in": "query"
          },
          {
            "name": "3",
            "type": "string",
            "required": true,
            "description": "Role",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetFavoriteProperty": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Sets a property for this Favorite. This can be any name/value combination (but the name cannot be null). If the value is null;\n        then the specified property will be removed from this Favorite. This only impacts the return values from GetFavoriteProperty and has no other side effects.\n        @param Favorite the Favorite object\n        @param PropertyName the name of the property\n        @param PropertyValue the value of the property\n        @since 7.0",
        "operationId": "SetFavoriteProperty",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "PropertyName",
            "in": "query"
          },
          {
            "name": "3",
            "type": "string",
            "required": true,
            "description": "PropertyValue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetFavoriteQuality": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Sets the name of the recording quality that should be used when recording this Favorite.\n        @param Favorite the Favorite object\n        @param Quality the name of the recording quality that should be used when recording this Favorite, the empty string if the default recording quality should be used",
        "operationId": "SetFavoriteQuality",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Quality",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetFavoriteRated": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Sets the rating that an Airing must match to be included in this Favorite.\n        @param Favorite the Favorite object\n        @param Rated the rating that an Airing must match to be included in this Favorite, use the empty string or null if rating isn\u0027t a field that needs to match\n        @return true if the change was successful, false if the change would alter this Favorite to be identical to an existing Favorite or if the user doesn\u0027t have permissions to make this change",
        "operationId": "SetFavoriteRated",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Rated",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetFavoriteTimeslot": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Sets the timeslot that an Airing must be in to be included in this Favorite. It just needs to overlap the timeslot.\n        @param Favorite the Favorite object\n        @param Timeslot the timeslot that an Airing must be in to be included in this Favorite, use null or the empty string if timeslot doesn\u0027t matter.\n                The timeslot should be in one of three formats: 1) Day Time, 2) Day, 3) Time. Where Day is a day of the week, and Time is an\n                hour of the day such as 3pm or 8:00 (if the user\u0027s locale uses am/pm then it\u0027ll be like 3pm, otherwise it\u0027ll use like 8:00).\n                Multiple timeslots are allowed and should be sent as a semicolon delimited list; an Airing only needs to overlap one of the timeslots to match the Favorite then.\n       \t\t   Multiple timeslots must also all be of the same type (i.e. all DayTime, all Day or all Time).\n        @return true if the change was successful, false if the change would alter this Favorite to be identical to an existing Favorite or if the user doesn\u0027t have permissions to make this change",
        "operationId": "SetFavoriteTimeslot",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Timeslot",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetFavoriteTitle": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Sets the title that an Airing must match to be included in this Favorite.\n        @param Favorite the Favorite object\n        @param Title the title that an Airing must match to be included in this Favorite, use the empty string or null if the title isn\u0027t a field that needs to match\n        @return true if the change was successful, false if the change would alter this Favorite to be identical to an existing Favorite or if the user doesn\u0027t have permissions to make this change",
        "operationId": "SetFavoriteTitle",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Title",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetFavoriteYear": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Sets the year that an Airing must match to be included in this Favorite.\n        @param Favorite the Favorite object\n        @param Year the year that an Airing must match to be included in this Favorite, use the empty string or null if year isn\u0027t a field that needs to match\n        @return true if the change was successful, false if the change would alter this Favorite to be identical to an existing Favorite or if the user doesn\u0027t have permissions to make this change",
        "operationId": "SetFavoriteYear",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Year",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetKeepAtMost": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Sets the maximum number of recordings that match this Favorite that should be kept on disk. If AutoDelete is\n        set to true then SageTV will continue to record new airings of this Favorite as they air, and delete the oldest\n        recording on disk if it hits the keep at most limit. If AutoDelete is false then SageTV will stop recording this Favorite\n        once it has this many recordings on disk\n        @param Favorite the Favorite object\n        @param NumberToKeep the maximum number of recordings SageTV should keep on disk of this Favorite, 0 if it is unlimited",
        "operationId": "SetKeepAtMost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "NumberToKeep",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetRunStatus": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Sets whether first runs, reruns or both types of airings should be recorded for this Favorite. If both arguments\n        are false, SageTV will record both first runs and reruns.\n        @param Favorite the Favorite object\n        @param FirstRuns true if first runs should be recorded with this favorite, false otherwise\n        @param ReRuns true if reruns should be recorded with this Favorite, false otherwise\n        @return true if the change was successful, false if the change would alter this Favorite to be identical to an existing Favorite or if the user doesn\u0027t have permissions to make this change",
        "operationId": "SetRunStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          },
          {
            "name": "2",
            "type": "boolean",
            "required": true,
            "description": "FirstRuns",
            "in": "query"
          },
          {
            "name": "3",
            "type": "boolean",
            "required": true,
            "description": "ReRuns",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetStartPadding": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Sets the amount of time any recording for this Favorite should start before the actual Airing begins.\n        @param Favorite the Favorite object\n        @param StartPadding the amount of time any recording for this Favorite should start before the actual Airing begins, in milliseconds",
        "operationId": "SetStartPadding",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "StartPadding",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetStopPadding": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Sets the amount of time any recording for this Favorite should stop after the actual Airing ends.\n        @param Favorite the Favorite object\n        @param StopPadding the amount of time any recording for this Favorite should stop after the actual Airing ends, in milliseconds",
        "operationId": "SetStopPadding",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "StopPadding",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dUpdateFavorite": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "FavoriteAPI"
        ],
        "description": "Updates all of the fields of a Favorite that can be used to match. The rules for the arguments are specified in the\n        individual methods that allow settting of the corresponding parameter.\n        @param Favorite the Favorite object to update\n        @param Title the title that an Airing must match to be included in this Favorite, use the empty string or null if the title isn\u0027t a field that needs to match\n        @param FirstRuns true if this Favorite should match First Runs, false otherwise\n        @param ReRuns true if this Favorite should match ReRuns, false otherwise\n        @param Category the category that an Airing must match to be included in this Favorite, use the empty string or null if category isn\u0027t a field that needs to match\n        @param SubCategory the subcategory that an Airing must match to be included in this Favorite, use the empty string or null if subcategory isn\u0027t a field that needs to match\n        @param Person the name of the person that needs to be included in an Airing for it to match this Favorite, use the empty string or null if person doesn\u0027t need to match\n        @param RoleForPerson the name of the role the corresponding person needs to be in, or the emptry string or null if role doesn\u0027t matter\n        @param Rated the rating that an Airing must match to be included in this Favorite, use the empty string or null if rating isn\u0027t a field that needs to match\n        @param Year the year that an Airing must match to be included in this Favorite, use the empty string or null if year isn\u0027t a field that needs to match\n        @param ParentalRating the parental rating that an Airing must match to be included in this Favorite, use the empty string or null if parental rating isn\u0027t a field that needs to match\n        @param Network the network name that an Airing must be on to be included in this Favorite, use null or the empty string if network doesn\u0027t matter\n        @param ChannelCallSign the channel name that an Airing must be on to be included in this Favorite, use null or the empty string if channel doesn\u0027t matter; you may also use a semicolon or comma-delimited list of channel names for mult-channel favorites\n        @param Timeslot the timeslot that an Airing must be in to be included in this Favorite, use null or the empty string if timeslot doesn\u0027t matter.\n                The timeslot should be in one of three formats: 1) Day Time, 2) Day, 3) Time. Where Day is a day of the week, and Time is an\n                hour of the day such as 3pm or 8:00 (if the user\u0027s locale uses am/pm then it\u0027ll be like 3pm, otherwise it\u0027ll use like 8:00)\n                Multiple timeslots are allowed and should be sent as a semicolon delimited list; an Airing only needs to overlap one of the timeslots to match the Favorite then.\n       \t\t   Multiple timeslots must also all be of the same type (i.e. all DayTime, all Day or all Time).\n        @param Keyword the keyword that an Airing must match to be included in this Favorite, use the empty string or null if keyword doesn\u0027t matter\n        @return the updated Favorite object, or if the changes would make this Favorite the same as an existing Favorite, the other existing Favorite is returned, null is returned if there was no valid criteria specified in the arguments",
        "operationId": "UpdateFavorite",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Favorite",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Title",
            "in": "query"
          },
          {
            "name": "3",
            "type": "boolean",
            "required": true,
            "description": "FirstRuns",
            "in": "query"
          },
          {
            "name": "4",
            "type": "boolean",
            "required": true,
            "description": "ReRuns",
            "in": "query"
          },
          {
            "name": "5",
            "type": "string",
            "required": true,
            "description": "Category",
            "in": "query"
          },
          {
            "name": "6",
            "type": "string",
            "required": true,
            "description": "SubCategory",
            "in": "query"
          },
          {
            "name": "7",
            "type": "#/definitions/Person",
            "required": true,
            "description": "Person",
            "in": "query"
          },
          {
            "name": "8",
            "type": "string",
            "required": true,
            "description": "RoleForPerson",
            "in": "query"
          },
          {
            "name": "9",
            "type": "string",
            "required": true,
            "description": "Rated",
            "in": "query"
          },
          {
            "name": "10",
            "type": "string",
            "required": true,
            "description": "Year",
            "in": "query"
          },
          {
            "name": "11",
            "type": "string",
            "required": true,
            "description": "ParentalRating",
            "in": "query"
          },
          {
            "name": "12",
            "type": "string",
            "required": true,
            "description": "Network",
            "in": "query"
          },
          {
            "name": "13",
            "type": "string",
            "required": true,
            "description": "ChannelCallSign",
            "in": "query"
          },
          {
            "name": "14",
            "type": "string",
            "required": true,
            "description": "Timeslot",
            "in": "query"
          },
          {
            "name": "15",
            "type": "string",
            "required": true,
            "description": "Keyword",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Favorite)",
            "schema": {
              "$ref": "#/definitions/Favorite"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dAddGlobalContext": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Sets the variable with the specified name to the specified value. This variable\n        will exist for the lifetime of the SageTV application and is always in scope for all expression evaluation. This is a \u0027global variable\u0027.\n        @param Name the name to use for this \u0027global context\u0027 variable\n        @param Value the value to set this \u0027global context\u0027 variable to\n        @return the passed in Value",
        "operationId": "AddGlobalContext",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Name",
            "in": "query"
          },
          {
            "name": "2",
            "type": "#/definitions/Object",
            "required": true,
            "description": "Value",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dAddStaticContext": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Sets the variable with the specified name to the specified value. This variable will\n        exist for the lifetime of the current Menu. When the next Menu transition occurs,\n        all values in the static context will be copied to the highest level context for the new Menu.\n        The static context is then cleared. This is the way you can pass an Object from one menu to\n        another, an example is showing the detailed info for an Airing by adding the Airing to the\n        static context and then transitioning to a Menu that will display the details for that Airing.\n       \n        @param Name the name to use for this \u0027static context\u0027 variable\n        @param Value the value to set this \u0027static context\u0027 variable to\n        @return the passed in Value",
        "operationId": "AddStaticContext",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Name",
            "in": "query"
          },
          {
            "name": "2",
            "type": "#/definitions/Object",
            "required": true,
            "description": "Value",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dApplyServiceLevelToLineup": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Applies a service level to a given lineup. This is specific to the EPG data source that is being used.\n        @param Lineup the name of the EPG lineup to modify\n        @param ServiceLevel the service level to apply to the lineup",
        "operationId": "ApplyServiceLevelToLineup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Lineup",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "ServiceLevel",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dAreAiringsSameShow": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns true if two Airings represent the same Show. This means that they both are the same content (i.e. one is a repeat of the other)\n        Just because two Airings use the same Show object (in terms of object reference) doesn\u0027t mean this call will return true.\n        @param Airing1 one of the two Airing objects to compare\n        @param Airing2 the other Airing object to compare\n        @return true if two Airings represent the same Show, false otherwise",
        "operationId": "AreAiringsSameShow",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Airing",
            "required": true,
            "description": "Airing1",
            "in": "query"
          },
          {
            "name": "2",
            "type": "#/definitions/Airing",
            "required": true,
            "description": "Airing2",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dAreScreenshotsSupported": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns true if it\u0027s possible to take screenshots of the UI using the API on this UI client\n        @return true if it\u0027s possible to take screenshots of the UI using the API on this UI client\n        @since 8.0",
        "operationId": "AreScreenshotsSupported",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dAreThereUnresolvedConflicts": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns whether or not there are unresolved scheduling conflicts\n        @return true if there are unresolved scheduling conflicts, false otherwise",
        "operationId": "AreThereUnresolvedConflicts",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dCDBurnTheBurnList": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Instructs the CD burning engine inside SageTV to start prepping the specified Playlist to be burned to a CD, and then perform the actual burn.\n        NOTE: Currently this is only supported on the Linux operating system\n        @param BurnList the Playlist of all of the music files to burn to the CD\n        @return true if the burn process was successfully started, otherwise a localized error message string is returned",
        "operationId": "CDBurnTheBurnList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Playlist",
            "required": true,
            "description": "BurnList",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dCDCancelBurn": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Cancels a previous request that was made to perform CD burning.",
        "operationId": "CDCancelBurn",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dCDCancelRip": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Cancels a previous request that was made to perform CD ripping",
        "operationId": "CDCancelRip",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dCDGetCurrentBurnStatus": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Gets the current status of a previously invoked CD burning process.\n        @return true if the CD burning process is completed and was a success, \"Error\" if it completed and was a failure,\n                 otherwise a localized status message indicating progress is returned",
        "operationId": "CDGetCurrentBurnStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dCDGetCurrentRipStatus": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Gets the current status of a previously invoked CD ripping process.\n        @return true if the CD ripping process is completed and was a success, \"Error\" if it completed and was a failure,\n                 otherwise a localized status message indicating progress is returned",
        "operationId": "CDGetCurrentRipStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dCDRipToLibrary": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Instructs the CD ripping engine to rip the contents of a CD and encode it in MP3 format and then store it in the music library.\n        NOTE: This is currently only supported on the Linux operating system\n        @param LibraryDir the directory that the ripped files should be stored in, if the space on this disk is managed by SageTV it will make room for the files that are to be ripped\n        @param BitrateKbps the bitrate to use for the audio encoding in kilobits per second\n        @return true if the ripping process was successfully started, otherwise a localized error message string is returned",
        "operationId": "CDRipToLibrary",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "LibraryDir",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "BitrateKbps",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dCachePlaceshifterLogin": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "This is used to store an authentication block on the current client that it can use in the future to automatically\n        connect to this server w/out having to login. The channel must be encrypted when this call is made. See the API call\n        SetRemoteEventEncryptionEnabled for more details on that.\n       \n        @since 6.6",
        "operationId": "CachePlaceshifterLogin",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dCanCachePlaceshifterLogin": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "This indicates whether the server and the client both support caching of placeshifter logins.\n        @return true if both the server and client support caching of placeshifter login information\n        @since 6.6",
        "operationId": "CanCachePlaceshifterLogin",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dCancelBackgroundFileDownload": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Cancels a previous request that was made to perform a background file download.\n        @param DestFile the destination file specified in the original download request\n        @since 7.0",
        "operationId": "CancelBackgroundFileDownload",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "DestFile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dCancelFileCopy": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Cancels a previous request that was made to perform a file copy",
        "operationId": "CancelFileCopy",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dCancelFileDownload": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Cancels a previous request that was made to perform a file download",
        "operationId": "CancelFileDownload",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dCloseOptionsMenu": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Closes the OptionsMenu who\u0027s Widget name (or themed Widget name) matches that of the argument and continues execution of the Action\n        chain that spawned that OptionsMenu at the sibling after this OptionsMenu. The\n        feature of continuing execution can be used to prompt the user with a question\n        through an OptionsMenu before continuing on execution of an Action chain.\n        An example is confirming something they just did before it actually gets done.\n        If this OptionsMenu is not on top, then it cannot be closed until it becomes the one on top.\n        @param WidgetName the name of the Widget for the OptionsMenu or the themed OptionsMenu source for that Widget that should be closed\n        @param WaitForClose if true then this call will not return until the specified OptionsMenu target is closed\n        @return returns true if the target OptionsMenu is not open or if it was closed as a result of this call, will only return false if waitForClose is true and the target OptionsMenu is not on top\n        @since 7.1",
        "operationId": "CloseOptionsMenu",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "WidgetName",
            "in": "query"
          },
          {
            "name": "2",
            "type": "boolean",
            "required": true,
            "description": "WaitForClose",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dCreateTimedRecording": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Creates a new time based recording for SageTV.\n        @param Channel the Channel object that this recording should be performed on\n        @param StartTime the time the recording should begin\n        @param StopTime the time the recording should end\n        @param Recurrence the name of the recurrence to use; this can be either Once, Daily, Weekly or Continuous (Continuous as of V6.6)\n                      (or a localized version of one of those); OR it can be a combination of any of the following strings to indicate specified\n                       days: Su, Mo, Tu, We, Th, Fr, Sa (for example, MoTuWe to do Mondays, Tuesdays and Wednesdays)\n        @return true if the creation of the timed recording succeeded, otherwise a localized error string is returned",
        "operationId": "CreateTimedRecording",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Channel",
            "required": true,
            "description": "Channel",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "StartTime",
            "in": "query"
          },
          {
            "name": "3",
            "type": "integer",
            "required": true,
            "description": "StopTime",
            "in": "query"
          },
          {
            "name": "4",
            "type": "string",
            "required": true,
            "description": "Recurrence",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dDVDBurnTheBurnList": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Instructs the DVD burning engine inside SageTV to start prepping the specified Playlist to be burned to a DVD, and then perform the actual burn.\n        NOTE: Currently this is only supported on the Linux operating system\n        @param BurnList the Playlist of all of the video files to burn to the DVD\n        @return true if the burn process was successfully started, otherwise a localized error message string is returned",
        "operationId": "DVDBurnTheBurnList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Playlist",
            "required": true,
            "description": "BurnList",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dDVDCancelBurn": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Cancels a previous request that was made to perform DVD burning.",
        "operationId": "DVDCancelBurn",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dDVDGetCurrentBurnStatus": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Gets the current status of a previously invoked DVD burning process.\n        @return true if the DVD burning process is completed and was a success, \"Error\" if it completed and was a failure,\n                 otherwise a localized status message indicating progress is returned",
        "operationId": "DVDGetCurrentBurnStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dDebugLog": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Prints out a message to SageTV\u0027s debug log\n        @param DebugString the string to print out",
        "operationId": "DebugLog",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "DebugString",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dDiscoverSageTVServers": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns a list of the SageTV servers on the network. Each item will be \"name;IP address\"\n        @param Timeout the timeout for the discovery process in milliseconds\n        @return an array of the SageTV servers on the network. Each item will be \"name;IP address\"\n       \n        @since 6.3",
        "operationId": "DiscoverSageTVServers",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "integer",
            "required": true,
            "description": "Timeout",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dEnsureVisibilityForVariable": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Searches the tables in the current menu for a cell that matches the passed in name/value pair;\n        if found it will ensure that it is currently visible in the UI at the specified visual index of the table.\n        The name should match the name of the TableComponent-Cell. For example if the TableComponent with a Cell\n        subtype had a name of \"File\" and listed all of the MediaFiles; then calling\n        EnsureVisibilityForVariable(\"File\", MyMediaFile, 1) would cause the table to scroll so that the second row\n        showed the cell whose File value corresponded to MyMediaFile.  This does NOT change the focus,\n        if you wish to scroll a table and shift the focus then use SetFocusForVariable\n       \n        @param Name the name of the variable to match on\n        @param Value the value of the variable to match\n        @param DisplayIndex 0-based value signifying which visually displayed row or column should show the corresonding cell\n        @return true if there was a matching variable found",
        "operationId": "EnsureVisibilityForVariable",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Name",
            "in": "query"
          },
          {
            "name": "2",
            "type": "#/definitions/Object",
            "required": true,
            "description": "Value",
            "in": "query"
          },
          {
            "name": "3",
            "type": "integer",
            "required": true,
            "description": "DisplayIndex",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dExit": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Causes the SageTV application to terminate. If this is called from the non-primary UI session then it will terminate the UI session it is called from.",
        "operationId": "Exit",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dFork": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Spawns a new thread of execution that will be used for further processing of Widget chain. This is analagous to \u0027forking\u0027 a thread\n        to continue execution of a widget chain in parallel to the current system execution.",
        "operationId": "Fork",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAiringsThatWontBeRecorded": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns all of the Airings that the user has requested to record that SageTV will not be recording. This would be due to\n        scheduling conflicts.\n        @param OnlyUnresolved if true then only unresolved scheduling conflicts will be returned, if false then all conflicts will be returned\n        @return the list of Airings that will not be recorded due to scheduling conflicts",
        "operationId": "GetAiringsThatWontBeRecorded",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "boolean",
            "required": true,
            "description": "OnlyUnresolved",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is java.util.Vector)",
            "schema": {
              "$ref": "#/definitions/java.util.Vector"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAllLineups": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns the name of all the EPG lineups in the system\n        @return a list of all the names of the EPG lineups in the system",
        "operationId": "GetAllLineups",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetApplicationLaunchTime": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns the time that the SageTV application was instantiated.\n        @return the time that the SageTV application was instantiated",
        "operationId": "GetApplicationLaunchTime",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetBackgroundFileDownloadStatus": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Gets the current status of a previously invoked file background download process.\n        @param DestFile the destination file specified in the original download request\n        @return true if the file download process is completed and was a success, \"Error\" will be the prefix if it was a failure,\n                 otherwise a localized status message indicating progress is returned\n        @since 7.0",
        "operationId": "GetBackgroundFileDownloadStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "DestFile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetBackgroundFileDownloadStreamTime": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Gets the current stream time of a previously invoked file download process. This is only valid\n        for when the file being downloaded is an FLV, MP3, MP4 or Quicktime file\n        @param DestFile the destination file specified in the original download request\n        @return the stream time in milliseconds of the current download; or zero if it doesn\u0027t know or the download is completed\n        @since 7.0",
        "operationId": "GetBackgroundFileDownloadStreamTime",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "DestFile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetBackgroundFileDownloadTotalSize": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Gets the total size of the specified background download target. This may not always be known in cases\n        where the server does not indicate the specific length of the file.\n        @param DestFile the destination file specified in the original download request\n        @return the size in bytes of the remote file being downloaded; zero if the download specified is complete or invalid\n        @since 7.0",
        "operationId": "GetBackgroundFileDownloadTotalSize",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "DestFile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetChildUIComponentForVariable": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Searches all child UI elements in of the specified UIComponent until it finds one that has a variable with the specified name\n        matching the specified value. It then returns on Object representing that UI component\n        @param UIComponent the UI component who\u0027s children should be searched\n        @param MatchName the name of the variable to match\n        @param MatchValue the value of the variable to match on\n        @return the UI component with the specified variable set\n        @since 7.0",
        "operationId": "GetChildUIComponentForVariable",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "UIComponent",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "MatchName",
            "in": "query"
          },
          {
            "name": "3",
            "type": "#/definitions/Object",
            "required": true,
            "description": "MatchValue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetClientServerConnectionProgress": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns a string describing the state of the client/server connection process.\n        NOTE: This is only useful on embedded with a fat client setup.\n        @return a string describing the state of the client/server connection process, null if this cannot be determined properly\n        @since 8.0",
        "operationId": "GetClientServerConnectionProgress",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetConnectedClients": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns a list of all the clients that are currently connected to this server.\n        @return a list of all the clients that are currently connected to this server.",
        "operationId": "GetConnectedClients",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetCurrentlyRecordingMediaFiles": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns a list of all of the files that SageTV is currently recording\n        @return a list of all of the files that SageTV is currently recording",
        "operationId": "GetCurrentlyRecordingMediaFiles",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MediaFile"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetDataFromTableFocusedOffset": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Gets the data value for the table that is used for the cell at the specified position relative to what is currently\n        \u003cb\u003efocused\u003c/b\u003e for the table. The UIComponent should either be the table itself; or it should have the desired table as an ancestor of it.\n        Position values are zero-based; and may be negative. If WrapIndex is false then positions greater then the size of the table\u0027s data or\n        less than zero will return null; otherwise they will be mod\u0027d to return a value within the range of the data.\n        @param UIComponent the specified UIComponent, can be retrieved using {@link #GetUIComponentForVariable GetUIComponentForVariable} API call\n        @param Offset the offset of the cell who\u0027s table data should be returned; relative to the current focused position (last focused if not currently focused)\n        @param WrapIndex true if offsets that fall outside of the size of the data should be wrapped so that they return a data value\n        @return the value of the table data at the specified offset\n        @since 7.0",
        "operationId": "GetDataFromTableFocusedOffset",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "UIComponent",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "Offset",
            "in": "query"
          },
          {
            "name": "3",
            "type": "boolean",
            "required": true,
            "description": "WrapIndex",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetDataFromTableVisiblePosition": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Gets the data value for the table that is used for the cell at the specified position relative to what is currently\n        \u003cb\u003evisible\u003c/b\u003e for the table. The UIComponent should either be the table itself; or it should have the desired table as an ancestor of it.\n        Offset values are zero-based; and may be negative. If WrapIndex is false then positions greater then the size of the table\u0027s data or\n        less than zero will return null; otherwise they will be mod\u0027d to return a value within the range of the data.\n        @param UIComponent the specified UIComponent, can be retrieved using {@link #GetUIComponentForVariable GetUIComponentForVariable} API call\n        @param Offset the offset of the cell who\u0027s table data should be returned; relative to the first visible position\n        @param WrapIndex true if offsets that fall outside of the size of the data should be wrapped so that they return a data value\n        @return the value of the table data at the specified offset\n        @since 7.0",
        "operationId": "GetDataFromTableVisiblePosition",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "UIComponent",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "Offset",
            "in": "query"
          },
          {
            "name": "3",
            "type": "boolean",
            "required": true,
            "description": "WrapIndex",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetDisplayResolution": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns a string describing the current display resolution set\n        @return a string describing the current display resolution set\n       \n        @since 6.3",
        "operationId": "GetDisplayResolution",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetDisplayResolutionDetails": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns the detailed format description for the specific resolution returned from GetDisplayResolutionOptions()\n        NOTE: This API call is only valid on embedded platforms.\n        @param Resolution the resolution to get the details for\n        @return a the detailed format description for a specific Resolution\n       \n        @since 6.4",
        "operationId": "GetDisplayResolutionDetails",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Resolution",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetDisplayResolutionHeight": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns the height in pixels of the current display resolution set\n        @return the height in pixels of the current display resolution set\n       \n        @since 5.1",
        "operationId": "GetDisplayResolutionHeight",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetDisplayResolutionOptions": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns a list of the possible display resolutions. This is currently only used\n        on media extender devices that have adjustable output resolution\n        @return an array of the display resolution names that can be used, null if this change is not supported\n       \n        @since 6.0",
        "operationId": "GetDisplayResolutionOptions",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetDisplayResolutionWidth": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns the width in pixels of the current display resolution set\n        @return the width in pixels of the current display resolution set\n       \n        @since 5.1",
        "operationId": "GetDisplayResolutionWidth",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetEPGProperty": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Gets a property from a specific EPG data source with an optional parameter\n        @param EPGDataSource the name of the EPG data source\n        @param Property the property name to get\n        @param Parameter optional parameter\n        @return the value of the requested property\n        @since 9.0",
        "operationId": "GetEPGProperty",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "EPGDataSource",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Property",
            "in": "query"
          },
          {
            "name": "3",
            "type": "string",
            "required": true,
            "description": "Parameter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetEPGUpdateState": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns a string describing the state of the epg system.\n      @return a string describing the Epg state one of: [Idle, Maintenance, Updating]\n      @since 8.1",
        "operationId": "GetEPGUpdateState",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetEmbeddedPanel": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Gets a java.awt.Panel which can be used for embedding Java UI elements directly into SageTV\n        @return a java.awt.Panel object which can be sized, made visible and have children added to it",
        "operationId": "GetEmbeddedPanel",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (value type is java.awt.Panel)",
            "schema": {
              "$ref": "#/definitions/java.awt.Panel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetFileCopyStatus": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Gets the current status of a previously invoked file copy process.\n        @return true if the file copy process is completed and was a success, \"Error\" will be the prefix if it was a failure,\n                 otherwise a localized status message indicating progress is returned",
        "operationId": "GetFileCopyStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetFileDownloadStatus": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Gets the current status of a previously invoked file download process.\n        @return true if the file download process is completed and was a success, \"Error\" will be the prefix if it was a failure,\n                 otherwise a localized status message indicating progress is returned",
        "operationId": "GetFileDownloadStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetFileDownloadStreamTime": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Gets the current stream time of a previously invoked file download process. This is only valid\n        for when the file being downloaded is an FLV, MP3, MP4 or Quicktime file\n        @return the stream time in milliseconds of the current download; or zero if it doesn\u0027t know\n        @since 6.3",
        "operationId": "GetFileDownloadStreamTime",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetFocusContext": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Copies all variables from the currently focused UI element\u0027s variable context to the current context\n        of the calling Action. Any variables that are in a common parent hierarchy are not copied as part of this.\n        @return true if there was a focused element and it\u0027s context was copied, false if there was no focused element found",
        "operationId": "GetFocusContext",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetFullUIHeight": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns the height in pixels of the user interface for the calling SageTV UI context.\n        @return the height in pixels of the user interface for the calling SageTV UI context\n       \n        @since 5.1",
        "operationId": "GetFullUIHeight",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetFullUIWidth": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns the width in pixels of the user interface for the calling SageTV UI context.\n        @return the width in pixels of the user interface for the calling SageTV UI context\n       \n        @since 5.1",
        "operationId": "GetFullUIWidth",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetHotplugStorageMap": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns a map of name-\u0026gt;file for any hotplug storage devies on the system. The\n        names are user-presentable and the path is the java.io.File root which corresponds to the root of that device.\n        NOTE: This is only valid on embedded platforms.\n        @return a Map of name-\u0026gt;file for hotplugged storage devices\n       \n        @since 6.4",
        "operationId": "GetHotplugStorageMap",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (value type is java.util.Map)",
            "schema": {
              "$ref": "#/definitions/java.util.Map"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetLastEPGDownloadTime": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns the last time that SageTV did an EPG update. The returned value uses the same units as java.lang.System.currentTimeMillis()\n        @return the last time that SageTV did an EPG update",
        "operationId": "GetLastEPGDownloadTime",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetLineupsForZipCodeFromEPGServer": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Gets a list from the EPG server of all the possible EPG Lineups that are available in a given zip code\n        @param ZipCode the zip code to search for EPG lineups in\n        @return a String[] from the EPG server of all the possible EPG lineups in the specified zip code or a String error message of \"NO_KEY\", \"INVALID_KEY\", or \"CONNECTION_FAILURE\"",
        "operationId": "GetLineupsForZipCodeFromEPGServer",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "ZipCode",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetLocalMarketsFromEPGServer": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Gets a list of all the possible United States local broadcast markets from the EPG server\n        @return a String[] of all the possible United States local broadcast markets from the EPG server or a String error message of \"NO_KEY\", \"INVALID_KEY\", or \"CONNECTION_FAILURE\"",
        "operationId": "GetLocalMarketsFromEPGServer",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetLogo": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Gets an Image object that represents the specified name. This is normally used for Channel Logos.\n        @param LogoName the name to use to lookup the logo image\n        @return the image object that corresponds to the specified name if one exists, the null image otherwise",
        "operationId": "GetLogo",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "LogoName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is MetaImage)",
            "schema": {
              "$ref": "#/definitions/MetaImage"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetOS": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Gets the name of the operating system that is being used.\n        @return the name of the operating system that is being used",
        "operationId": "GetOS",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPreferredDisplayResolutions": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns a list of the preferred display resolutions. This is currently only used\n        on media extender devices that have adjustable output resolution. This information is obtained from the HDMI/DVI connector\n        @return a list of the preferred display resolutions\n       \n        @since 6.3",
        "operationId": "GetPreferredDisplayResolutions",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetRecentlyWatched": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Gets a list of all of the Airings that have been watched within the specified amount of time\n        @param DurationToLookBack tha amount of time in milliseconds that should be searched for watched Airings\n        @return a list of all of the Airings that have been watched within the specified amount of time",
        "operationId": "GetRecentlyWatched",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "integer",
            "required": true,
            "description": "DurationToLookBack",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Airing"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetRemoteClientVersion": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns the version string for this connected remote client\n        @return the version string for this connected remote client, or the empty string if it\u0027s undefined or not a remote client\n        @since 6.4",
        "operationId": "GetRemoteClientVersion",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetRemoteUIType": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns the type of client that is connected on this remote interface\n        @return the type of client that is connected on this remote interface; this can be one of \"SD Media Extender\", \"HD Media Extender\", \"HD Media Player\", \"Placeshifter\" or \"Local\"\n        @since 6.4",
        "operationId": "GetRemoteUIType",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSageCommandNames": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Gets the names of all of the SageTV commands that are available in the system\n        @return a list of the names of all of the SageTV commands that are available in the system",
        "operationId": "GetSageCommandNames",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (value type is java.util.Vector)",
            "schema": {
              "$ref": "#/definitions/java.util.Vector"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetScheduledRecordings": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Gets a list of all of the Airings that SageTV is planning to record in the future\n        @return a list of all of the Airings that SageTV is planning to record in the future",
        "operationId": "GetScheduledRecordings",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Airing"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetScheduledRecordingsForDevice": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Gets a list of all of the Airings that SageTV is planning to record in the future on the specified CaptureDevice\n        @param CaptureDevice the name of a CaptureDevice for SageTV to get the scheduled recordings for\n        @return a list of all of the Airings that SageTV is planning to record in the future on the specified CaptureDevice",
        "operationId": "GetScheduledRecordingsForDevice",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDevice",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Airing"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetScheduledRecordingsForDeviceForTime": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Gets a list of all of the Airings that SageTV is planning on recording during the specified time span on a specified CaptureDevice\n        @param CaptureDevice the name of a CaptureDevice for SageTV to get the scheduled recordings for\n        @param StartTime the starting time to get all of the scheduled recordings for\n        @param StopTime the ending time to get all of the scheduled recordings for\n        @return a list of all of the Airings that SageTV is planning on recording during the specified start-stop time window on the specified CaptureDevice",
        "operationId": "GetScheduledRecordingsForDeviceForTime",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDevice",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "StartTime",
            "in": "query"
          },
          {
            "name": "3",
            "type": "integer",
            "required": true,
            "description": "StopTime",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Airing"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetScheduledRecordingsForTime": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Gets a list of all of the Airings that SageTV is planning on recording during the specified time span\n        @param StartTime the starting time to get all of the scheduled recordings for\n        @param StopTime the ending time to get all of the scheduled recordings for\n        @return a list of all of the Airings that SageTV is planning on recording during the specified start-stop time window",
        "operationId": "GetScheduledRecordingsForTime",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "integer",
            "required": true,
            "description": "StartTime",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "StopTime",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Airing"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetServerAddress": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Gets the hostname of the SageTV server if this is a client, otherwise it returns the name of the host SageTV is running on\n        @return the hostname of the SageTV server if this is a client, otherwise it returns the name of the host SageTV is running on",
        "operationId": "GetServerAddress",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSuggestedIntelligentRecordings": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Gets a list of all of the Airings that SageTV would record if Intelligent Recording was enabled.\n        This does not include Manual Recordings or Favorites.\n        @return a list of all of the Airings that SageTV would record if Intelligent Recording was enabled.\n        @since 4.1",
        "operationId": "GetSuggestedIntelligentRecordings",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Airing"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetTableFocusedPosition": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Gets the table position that currently has focus in the specified table. The argument may be the table itself; or a component between\n        the table and the focused component. This is the equivalent of the \"TableRow\" variable for the currently focused table cell; which is\n        the cell\u0027s index in the data backing the table.\n        @param UIComponent the specified UIComponent, can be retrieved using {@link #GetUIComponentForVariable GetUIComponentForVariable} API call\n        @return the position (1-based) which is currently focused in the table, -1 is returned if the value can\u0027t be resolved\n        @since 7.0",
        "operationId": "GetTableFocusedPosition",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "UIComponent",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetTableFocusedVisibleColumn": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Gets the column number that currently has focus in the specified table. The argument may be the table itself; or a component between\n        the table and the focused component.\n        @param UIComponent the specified UIComponent, can be retrieved using {@link #GetUIComponentForVariable GetUIComponentForVariable} API call\n        @return the column number (1-based) which is currently focused in the table, -1 is returned if the value can\u0027t be resolved\n        @since 7.0",
        "operationId": "GetTableFocusedVisibleColumn",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "UIComponent",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetTableFocusedVisiblePosition": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Gets the \u003cb\u003evisible\u003c/b\u003e table position that currently has focus in the specified table. The argument may be the table itself; or a component between\n        the table and the focused component. This starts counting from the first component which is currently visible in the table.\n        @param UIComponent the specified UIComponent, can be retrieved using {@link #GetUIComponentForVariable GetUIComponentForVariable} API call\n        @return the visible position (1-based) which is currently focused in the table, -1 is returned if the value can\u0027t be resolved\n        @since 7.0",
        "operationId": "GetTableFocusedVisiblePosition",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "UIComponent",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetTableFocusedVisibleRow": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Gets the row number that currently has focus in the specified table. The argument may be the table itself; or a component between\n        the table and the focused component.\n        @param UIComponent the specified UIComponent, can be retrieved using {@link #GetUIComponentForVariable GetUIComponentForVariable} API call\n        @return the row number (1-based) which is currently focused in the table, -1 is returned if the value can\u0027t be resolved\n        @since 7.0",
        "operationId": "GetTableFocusedVisibleRow",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "UIComponent",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetTextForUIComponent": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Gets the value displayed for the textual component of the specified UI object. If its not a Text component; then\n        its children will be searched depth-first until one is found and then that will be used for the return value.\n        @param UIComponent the specified UIComponent, can be retrieved using {@link #GetUIComponentForVariable GetUIComponentForVariable} API call\n        @return the text value displayed by the argument itself; or if its not a text component then the value displayed by the first text child of the component; null if neither condition is met\n        @since 7.0",
        "operationId": "GetTextForUIComponent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "UIComponent",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetTimeUntilNextEPGDownload": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "The amount of time in milliseconds until SageTV will perform an EPG update again. Zero if no update is planned.\n        @return the amount of time in milliseconds until SageTV will perform an EPG update again. Zero if no update is planned",
        "operationId": "GetTimeUntilNextEPGDownload",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetTotalDiskspaceAvailable": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Gets the total diskspace available for television recording by SageTV. This is the unused space in the video directories.\n        @return the total diskspace available for television recording by SageTV (in bytes)",
        "operationId": "GetTotalDiskspaceAvailable",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetTotalLibraryDuration": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns the total duration of all of the content in the media library\n        @return the total duration of all of the content in the media library in milliseconds",
        "operationId": "GetTotalLibraryDuration",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetTotalVideoDuration": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns the total duration of all of the recorded television content\n        @return the total duration of all of the recorded television content in milliseconds",
        "operationId": "GetTotalVideoDuration",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetUIComponentContext": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns the UI component that this execution originated from. For\n        \u0027green\u0027 process chains; this will correspond to the UI component that received the event. For \u0027blue\u0027\n        UI chains; this will correspond to the UI component who\u0027s conditionality is being determined or who\u0027s data\n        is being evaluated. This will be null if there is no UI context; such as for non-UI hooks and calls made from\n        Java directly.\n        @return the UIComponent that corresponds to the UI context used for the current evaluation, null if there is no context\n        @since 7.0",
        "operationId": "GetUIComponentContext",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetUIComponentForVariable": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Searches all UI elements in the current menu until it finds one that has a variable with the specified name\n        matching the specified value. It then returns on Object representing that UI component. The search method\n        prefers visible components over hidden ones.\n        @param MatchName the name of the variable to match\n        @param MatchValue the value of the variable to match on\n        @return the UI component with the specified variable set\n        @since 7.0",
        "operationId": "GetUIComponentForVariable",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MatchName",
            "in": "query"
          },
          {
            "name": "2",
            "type": "#/definitions/Object",
            "required": true,
            "description": "MatchValue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetUIComponentHeight": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns the height in pixels in the UI of the specified UI component.\n        @param UIComponent the specified UIComponent, can be retrieved using {@link #GetUIComponentForVariable GetUIComponentForVariable} API call\n        @return the height in pixels of the specified component\n        @since 7.0",
        "operationId": "GetUIComponentHeight",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "UIComponent",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetUIComponentHeightf": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns the height in the UI of the specified UI component relative to the entire UI height.\n        @param UIComponent the specified UIComponent, can be retrieved using {@link #GetUIComponentForVariable GetUIComponentForVariable} API call\n        @return the height of the specified component relative to the entire UI height, this will be a floating point number\n        @since 8.0",
        "operationId": "GetUIComponentHeightf",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "UIComponent",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetUIComponentLastFocusedChild": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "If the specified component currently has a focused child; that child\u0027s UI object will\n        be returned. If not, then the last focused child for this component will be returned.\n        @param UIComponent the specified UIComponent, can be retrieved using {@link #GetUIComponentForVariable GetUIComponentForVariable} API call\n        @return the currently focused child UI object for the specified component if it exists; otherwise the last focused child UI object for the specified component\n        @since 7.0",
        "operationId": "GetUIComponentLastFocusedChild",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "UIComponent",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetUIComponentPositionX": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns the X position in pixels in the UI of the specified UI component. This will be a value relative to the overall UI; not its parent.\n        @param UIComponent the specified UIComponent, can be retrieved using {@link #GetUIComponentForVariable GetUIComponentForVariable} API call\n        @return the X position in pixels relative to the overall UI of the specified component\n        @since 7.0",
        "operationId": "GetUIComponentPositionX",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "UIComponent",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetUIComponentPositionXf": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns the X position in the UI of the specified UI component. This will be a value relative to the overall UI; not its parent.\n        @param UIComponent the specified UIComponent, can be retrieved using {@link #GetUIComponentForVariable GetUIComponentForVariable} API call\n        @return the X position relative to the overall UI width of the specified component, this will be a floating point number\n        @since 8.0",
        "operationId": "GetUIComponentPositionXf",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "UIComponent",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetUIComponentPositionY": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns the Y position in pixels in the UI of the specified UI component. This will be a value relative to the overall UI; not its parent.\n        @param UIComponent the specified UIComponent, can be retrieved using {@link #GetUIComponentForVariable GetUIComponentForVariable} API call\n        @return the Y position in pixels relative to the overall UI of the specified component\n        @since 7.0",
        "operationId": "GetUIComponentPositionY",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "UIComponent",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetUIComponentPositionYf": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns the Y position in the UI of the specified UI component. This will be a value relative to the overall UI; not its parent.\n        @param UIComponent the specified UIComponent, can be retrieved using {@link #GetUIComponentForVariable GetUIComponentForVariable} API call\n        @return the Y position relative to the overall UI height of the specified component, this will be a floating point number\n        @since 8.0",
        "operationId": "GetUIComponentPositionYf",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "UIComponent",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetUIComponentWidth": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns the width in pixels in the UI of the specified UI component.\n        @param UIComponent the specified UIComponent, can be retrieved using {@link #GetUIComponentForVariable GetUIComponentForVariable} API call\n        @return the width in pixels of the specified component\n        @since 7.0",
        "operationId": "GetUIComponentWidth",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "UIComponent",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetUIComponentWidthf": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns the width in the UI of the specified UI component relative to the entire UI width.\n        @param UIComponent the specified UIComponent, can be retrieved using {@link #GetUIComponentForVariable GetUIComponentForVariable} API call\n        @return the width of the specified component relative to the entire UI width, this will be a floating point number\n        @since 8.0",
        "operationId": "GetUIComponentWidthf",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "UIComponent",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetUIContextName": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns the name of the UI context that makes the API call. See {@link #GetUIContextNames GetUIContextNames()}\n        for more information.\n        @return the UI context name that made this API call, null if there is no UI context\n        @since 5.1",
        "operationId": "GetUIContextName",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetUIContextNames": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns a list of the names of the different UI contexts that are available. One will be the local context\n        which is the UI for the SageTV app (which doesn\u0027t exist in service mode). The other contexts can be UIs that\n        are for remote devices such as media extenders. This context name can then be passed back in using\n        the sage.SageTV.apiUI(String uiContextName, String methodName, Object[] args) call in order to execute an API call\n        from Java within a specific UI context.  For media extenders, these names generally correspond to the MAC address\n        of the media extender.\n        @return a list of the UI context names available\n        @since 4.1",
        "operationId": "GetUIContextNames",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetUsedLibraryDiskspace": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns the total number of bytes on disk used by the content in the imported video, picturees and music libraries\n        @return the total number of bytes on disk used by the content in the imported video, picturees and music libraries",
        "operationId": "GetUsedLibraryDiskspace",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetUsedVideoDiskspace": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns the total number of bytes on disk used by recorded television content\n        @return the total number of bytes on disk used by recorded television content",
        "operationId": "GetUsedVideoDiskspace",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetVariableFromContext": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Searches all UI elements in the current menu until it finds one that has a variable with the specified name\n        matching the specified value. Once it finds this UI element, it then does a lookup of the other\n        specified variable in that UI element\u0027s context and returns that value\n        @param MatchName the name of the variable to match\n        @param MatchValue the value of the variable to match on\n        @param LookupName the variable to lookup in the matching context\n        @return the value of the variable\n        @since 7.0",
        "operationId": "GetVariableFromContext",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MatchName",
            "in": "query"
          },
          {
            "name": "2",
            "type": "#/definitions/Object",
            "required": true,
            "description": "MatchValue",
            "in": "query"
          },
          {
            "name": "3",
            "type": "string",
            "required": true,
            "description": "LookupName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetVariableFromUIComponent": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Retrieves the variable with the specified name from the context of the passed in UIComponent.\n        @param UIComponent the UI component who\u0027s variable should be returned\n        @param VarName the name of the variable to lookup\n        @return the value of the variable\n        @since 7.0",
        "operationId": "GetVariableFromUIComponent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "UIComponent",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "VarName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetVisibilityForVariable": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Searches all UI elements in the current menu until it finds one that has a variable with the specified name\n        matching the specified value. Once it finds this UI element, it will return true if that UI element is currently\n        visible and false otherwise\n        @param MatchName the name of the variable to match\n        @param MatchValue the value of the variable to match on\n        @return true if the found component is visible, false otherwise\n        @since 7.0",
        "operationId": "GetVisibilityForVariable",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MatchName",
            "in": "query"
          },
          {
            "name": "2",
            "type": "#/definitions/Object",
            "required": true,
            "description": "MatchValue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsAsleep": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns true if SageTV is in the Sleep state.\n        @return true if SageTV is in the Sleep state",
        "operationId": "IsAsleep",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsBackgroundFileDownloadProgressivePlay": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns whether or not the current file being downloaded can be played back while being downloaded. This is only valid\n        for when the file being downloaded is an FLV, MP3, MP4 or Quicktime file. It will always be true for MP3 \u0026amp; FLV files;\n        and for MP4/Quicktime files it\u0027ll be true if the sample section is before the movie data in the file. If this is true\n        and the download stream time is greater than zero; then it\u0027s OK to start progressive playback of downloaded media.\n        @param DestFile the destination file specified in the original download request\n        @return true if the current file being downloaded can potentially be played back while being downloaded, false if it definitely cannot be or is an invalid or completed download\n        @since 7.0",
        "operationId": "IsBackgroundFileDownloadProgressivePlay",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "DestFile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsChannelDownloadComplete": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns true if the channel download has been completed on the specified lineup\n        @param Lineup the name of the Lineup\n        @return true if the channel download has been completed on the specified lineup, false otherwise",
        "operationId": "IsChannelDownloadComplete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Lineup",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsClient": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns true if this is an instance of SageTV Client\n        @return true if this is an instance of SageTV Client, false otherwise",
        "operationId": "IsClient",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsClientDisconnected": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns true if this is an instance of SageTVClient (or a remote client connected via SageTVClient)\n        and there is currently not a connection to the server. This should be used during startup to go to the\n        server connection lost menu for remote clients connected through SageTVClient (SageTVClient itself will do it automatically).\n        @return true if the SageTVClient connection is currently disconnected\n        @since 8.0",
        "operationId": "IsClientDisconnected",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsDesktopUI": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns true if this UI is being run in a desktop environment. It may or may not be remoted. This is\n        intended to distinguish Placeshifter clients from Media Extenders since both return true for IsRemoteUI().\n        @return true if this UI is being run in a desktop environment, false otherwise\n       \n        @since 4.1.10",
        "operationId": "IsDesktopUI",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsDoingLibraryImportScan": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns true if the server is currently scanning the import directories for new files\n        @return true if the server is currently scanning the import directories for new files\n       \n        @since 6.6",
        "operationId": "IsDoingLibraryImportScan",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsEmbeddedServer": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns true if running on an \u0027embedded\u0027 platform in standalone mode or running as a SageTV Client that is connected to a server running on an embedded platform.\n        This will be true for the standalone environment on products like the HD300\n        and false otherwise. Used for making STVs that have different options based on whether they\u0027re on a PC vs. embedded system.\n        @return true if running against an embedded server, false otherwise\n        @since 7.1",
        "operationId": "IsEmbeddedServer",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsEmbeddedSystem": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns true if running on an \u0027embedded\u0027 platform. This will be true for the standalone environment on products like the HD300\n        and false otherwise. Used for making STVs that have different options based on whether they\u0027re on a PC vs. embedded system.\n        @return true if running on an embedded system, false otherwise\n        @since 7.0",
        "operationId": "IsEmbeddedSystem",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsFileDownloadProgressivePlay": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns whether or not the current file being downloaded can be played back while being downloaded. This is only valid\n        for when the file being downloaded is an FLV, MP3, MP4 or Quicktime file. It will always be true for MP3 \u0026amp; FLV files;\n        and for MP4/Quicktime files it\u0027ll be true if the sample section is before the movie data in the file. If this is true\n        and the download stream time is greater than zero; then it\u0027s OK to start progressive playback of downloaded media.\n        @return true if the current file being downloaded can potentially be played back while being downloaded, false if it definitely cannot be\n        @since 6.3",
        "operationId": "IsFileDownloadProgressivePlay",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsFullScreen": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns whether or not SageTV is in full screen mode\n        @return true if SageTV is in full screen mode, false otherwise",
        "operationId": "IsFullScreen",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsLinuxOS": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns true if SageTV is currently running on a Linux operating system.\n        @return true if SageTV is currently running on a Linux operating system, false otherwise\n       \n        @since 6.0.20",
        "operationId": "IsLinuxOS",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsMacOS": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns true if SageTV is currently running on a Macintosh operating system.\n        @return true if SageTV is currently running on a Macintosh operating system, false otherwise\n       \n        @since 6.0.20",
        "operationId": "IsMacOS",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsOptionsMenuOpen": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns true if an options menu is currently open in the UI.\n        @return true if an options menu is currently open in the UI, false otherwise\n        @since 7.1",
        "operationId": "IsOptionsMenuOpen",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsPVR": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns true if running on a system or connected to a server that has PVR functionality. Used for making STVs that have different options based on whether\n        or not PVR functionality is available. Even if no capture devices are configured and the system is PVR capable, this will still return true.\n        @return true if PVR is available, false otherwise\n        @since 7.1",
        "operationId": "IsPVR",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsRemoteUI": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns true if this UI is being remoted onto another device such as a media extender. This also returns\n        true for Placeshifter clients.\n        @return true if this UI is being remoted onto another device such as a media extender, false otherwise\n       \n        @since 4.1",
        "operationId": "IsRemoteUI",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsSDEPGServiceAvailable": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns true if the Schedules Direct EPG service is available.\n        This is determined by trying to communicate with Schedules Direct if an unexpired token is\n        present. If no token currently exists or it is expired, a new token will be acquired. If\n        the token is unable to be obtained for any reason, the service is considered unavailable.\n        @return true if the Schedules Direct EPG service is configured and able to authenticate, false otherwise\n        @since 9.0",
        "operationId": "IsSDEPGServiceAvailable",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsServerUI": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns true if this UI is being run on the same system as the SageTV Server it\u0027s connected to.\n        Also returns true for standalone SageTV applications. This indicates the UI should have the ability\n        to configure all \u0027server\u0027 based options. For SageTVClient, you must be connected to the loopback address\n        for this to return true.\n        @return true if this is the main UI for a SageTV Server\n        @since 5.0.5",
        "operationId": "IsServerUI",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsTableTransitionToNext": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns true if the specified table argument (or the first table parent of the argument) is on the leading edge of a transition\n        to a cell after the current one. It could be a page event, or a moving a single unit. Right and Down directionality is considered to be \u0027next\u0027.\n        This can be used to trigger effects that relate to navigation occurring in a table. This will only be true for a single rendering pass on the\n        leading edge of the transition. Focus will be moved before this becomes true. If effect animations are disabled; this will always return false.\n        @param UIComponent the specified UIComponent, can be retrieved using {@link #GetUIComponentForVariable GetUIComponentForVariable} API call\n        @return true if the table is currently transitioning in the next direction\n        @since 7.0",
        "operationId": "IsTableTransitionToNext",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "UIComponent",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsTableTransitionToPrevious": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns true if the specified table argument (or the first table parent of the argument) is on the leading edge of a transition\n        to a cell before the current one. It could be a page event, or a moving a single unit. Left and Up directionality is considered to be \u0027previous\u0027.\n        This can be used to trigger effects that relate to navigation occurring in a table. This will only be true for a single rendering pass on the\n        leading edge of the transition. Focus will be moved before this becomes true. If effect animations are disabled; this will always return false.\n        @param UIComponent the specified UIComponent, can be retrieved using {@link #GetUIComponentForVariable GetUIComponentForVariable} API call\n        @return true if the table is currently transitioning in the previous direction\n        @since 7.0",
        "operationId": "IsTableTransitionToPrevious",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "UIComponent",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsTouchUI": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns true if this UI is being run in a touch environment, such as a phone or tablet.\n        @return true if this UI is being run in a touch environment, false otherwise\n       \n        @since 9.0.4",
        "operationId": "IsTouchUI",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsTransitioningFromMenu": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns true if the specified menu name matches the name of the menu widget for the previously loaded menu. The name match is case-insensitive.\n        Unlike \u003cb\u003eIsTransitioningToMenu\u003c/b\u003e, this is true even after the transition is complete. A null argument always returns false.\n        @param MenuName the name of the menu to test to see if it was the previously loaded menu\n        @return true if the specified menu name matches the name of the menu widget for the previously loaded menu, false otherwise\n        @since 7.0",
        "operationId": "IsTransitioningFromMenu",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MenuName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsTransitioningFromMenus": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns true if one of the specified menu names matches the name of the menu widget for the previously loaded menu. The name match is case-insensitive.\n        Unlike \u003cb\u003eIsTransitioningToMenus\u003c/b\u003e, this is true even after the transition is complete. A null argument or empty list always returns false.\n        @param MenuNames the names of the menus to test to see if it was the previously loaded menu\n        @return true if one of the specified menu names matches the name of the menu widget for the previously loaded menu, false otherwise\n        @since 8.0",
        "operationId": "IsTransitioningFromMenus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MenuNames",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsTransitioningToMenu": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns true if the specified menu name matches the name of the menu widget that the UI is in the process\n        of transitioning to. This will only be true during the processing of MenuUnloaded effects. If a null argument is given; then this is\n        true in the case that any menu transition is about to occur. The name match is case-insensitive.\n        @param MenuName the name of the menu to test to see if we\u0027re transitioning to; null if it matches any menu name\n        @return true if the specified menu name matches the name of the menu widget that the UI is in the process of transitioning to, false otherwise\n        @since 7.0",
        "operationId": "IsTransitioningToMenu",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MenuName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsTransitioningToMenus": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns true if one of the specified menu name matches the name of the menu widget that the UI is in the process\n        of transitioning to. This will only be true during the processing of MenuUnloaded effects. If a null argument or empty list is given; then this is\n        true in the case that any menu transition is about to occur. The name match is case-insensitive.\n        @param MenuNames the names of the menu to test to see if we\u0027re transitioning to; null or empty list if it matches any menu name\n        @return true if one of the specified menu name matches the name of the menu widget that the UI is in the process of transitioning to, false otherwise\n        @since 8.0",
        "operationId": "IsTransitioningToMenus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MenuNames",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsWindowsOS": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Returns true if SageTV is currently running on a Windows operating system.\n        @return true if SageTV is currently running on a Windows operating system, false otherwise",
        "operationId": "IsWindowsOS",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dPassiveListen": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Should only be used in the Action chain from a Listener Widget. Normally SageTV will stop processing Listeners\n        for an event once the first one is reached. If you use PassiveListen() in the action chain for a\n        Listener then SageTV will not stop processing at the current Listener.",
        "operationId": "PassiveListen",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dPrepareForFirmwareLoad": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Prepares the device for a firmware download \u0026amp; flash. This internally will stop the library importing process,\n        empty all of the database tables, clear the UI caches, and then force a complete garbage collection.\n        NOTE: This is only valid on embedded platforms.\n       \n        @since 7.0",
        "operationId": "PrepareForFirmwareLoad",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dRefresh": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Re-evaluates and redraws all UI elements on the current menu",
        "operationId": "Refresh",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dRefreshArea": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Finds the Widget on the current menu who\u0027s name matches the argument and then re-evaluates and redraws all UI elements, and their children for this Widget\n        @param WidgetName the name that a UI component\u0027s Widget must match, if null or zero length, then this is the same as calling {@link #Refresh Refresh()}",
        "operationId": "RefreshArea",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "WidgetName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dRefreshAreaForVariable": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Searches all visible UI elements in the current menu finding any that have a variable with the specified name\n        matching the specified value. For any elements it finds, it will re-evaluate and redraws its UI elements, and its children\n        @param Name the name of the variable to match\n        @param Value the value of the variable to match on\n        @since 6.6",
        "operationId": "RefreshAreaForVariable",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Name",
            "in": "query"
          },
          {
            "name": "2",
            "type": "#/definitions/Object",
            "required": true,
            "description": "Value",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dReloadSystemHooks": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "This is a Windows only API call which tells SageTV to unload and then reload any system hooks it has installed.\n        This allows reconfiguration of parameters in the UI and then realization of those changes on the fly.\n       \n        @since 4.1.13",
        "operationId": "ReloadSystemHooks",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dRemoveUnusedLineups": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Removes all of the lineups from SageTV\u0027s configuration that are no longer in use by a CaptureDevice\n        @return true if any lineups were removed, false otherwise",
        "operationId": "RemoveUnusedLineups",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dRepaint": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Redraws all UI elements on the current menu",
        "operationId": "Repaint",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dRepaintArea": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Finds the Widget on the current menu who\u0027s name matches the argument and then redraws all UI elements, and their children for this Widget\n        @param WidgetName the name that a UI component\u0027s Widget must match, if null or zero length, then this is the same as calling {@link #Repaint Repaint()}",
        "operationId": "RepaintArea",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "WidgetName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dRunLibraryImportScan": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Tells SageTV to run a library import scan now. This will scan all of the library import directories for new content.\n        @param WaitUntilDone if this parameter is true then this call will not return until SageTV has finished the import scan, otherwise it returns immediately",
        "operationId": "RunLibraryImportScan",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "boolean",
            "required": true,
            "description": "WaitUntilDone",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSageCommand": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Causes the corresponding Sage Command to be executed just like it would be if the user performed it.\n        These are always done asynchronously with the exception of \"Back\" and \"Forward\" since those effect\n        the current UI and may be used to override a menu transition. The payload will be passed along and\n        be accessible in the listener object in the STV.\n        @param Command the name of the Sage Command to execute\n        @param Payload an object to pass along with the event\n        @since 8.1",
        "operationId": "SageCommand",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Command",
            "in": "query"
          },
          {
            "name": "2",
            "type": "#/definitions/Object",
            "required": true,
            "description": "Payload",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSaveScreenshotToFile": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Takes a screenshot of the current UI and saves it to the specified file in PNG format. This is only supported\n        on clients that return true to the API call {@link #AreScreenshotsSupported AreScreenshotsSupported()}.\n        @param FilePath the file path to save the screenshot to (should have a .png file extension)\n        @return true if the screenshot was successfully saved to the specified file, false otherwise\n        @since 8.0",
        "operationId": "SaveScreenshotToFile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "FilePath",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSendEventToUIComponent": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Sends an event to a specific UI component for processing. Similar to using the {@link #SageCommand SageCommand()} API call, but this\n        version is targeted at a specific component. Normal event processing of cursor navigation, selection, entry events will continue up the hierarchy from the target component if it\n        does not consume it; it will stop at the menu level though and any menu-level default handling for the event will not occur (i.e. media player control, menu navigation, power, etc.).\n        @param UIComponent the UIComponent object to target the event at, can be retrieved using {@link #GetUIComponentForVariable GetUIComponentForVariable} API call\n        @param Command the name of the command to send\n        @param RepeatCount the number of times to send the command\n        @return true if the event was consumed by the target component\u0027s hierarchy\n        @since 7.0",
        "operationId": "SendEventToUIComponent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "UIComponent",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Command",
            "in": "query"
          },
          {
            "name": "3",
            "type": "integer",
            "required": true,
            "description": "RepeatCount",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetDisplayResolution": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Sets the current output display resolution. This is currently only used\n        on media extender devices that have adjustable output resolution.\n        @param Resolution this must be a value from {@link #GetDisplayResolutionOptions GetDisplayResolutionOptions()} and should be the new desired output resolution\n       \n        @since 6.0",
        "operationId": "SetDisplayResolution",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Resolution",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetEPGProperty": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Sets a property for a specific EPG data source to the provided value\n        @param EPGDataSource the name of the EPG data source\n        @param Property the property name to set\n        @param Value the value to set\n        @return result of setting the property\n        @since 9.0",
        "operationId": "SetEPGProperty",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "EPGDataSource",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Property",
            "in": "query"
          },
          {
            "name": "3",
            "type": "string",
            "required": true,
            "description": "Value",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetEmbeddedPanelBounds": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Sets the bounding region to be used for the embedded panel. These are floating point numbers relative to the total size of the UI.\n        @param x the relative X position (0.0-1.0)\n        @param y the relative Y position (0.0-1.0)\n        @param width the relative width (0.0-1.0)\n        @param height the relative height (0.0-1.0)\n        @since 6.4",
        "operationId": "SetEmbeddedPanelBounds",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "float",
            "required": true,
            "description": "x",
            "in": "query"
          },
          {
            "name": "2",
            "type": "float",
            "required": true,
            "description": "y",
            "in": "query"
          },
          {
            "name": "3",
            "type": "float",
            "required": true,
            "description": "width",
            "in": "query"
          },
          {
            "name": "4",
            "type": "float",
            "required": true,
            "description": "height",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetFocusForVariable": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Searches all UI elements in the current menu until it finds one that has a variable with the specified name\n        matching the specified value. Once it finds this UI element, it gives it the focus.  If scrolling of a table\n        or panel is necessary to make it visible, that scrolling will occur.\n        @param Name the name of the variable to match\n        @param Value the value of the variable to match on\n        @return true if the focus was set",
        "operationId": "SetFocusForVariable",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Name",
            "in": "query"
          },
          {
            "name": "2",
            "type": "#/definitions/Object",
            "required": true,
            "description": "Value",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetFocusToUIComponent": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Sets focus in the specified UI component. The UIComponent must be focusable for this to succeed\n        @param UIComponent the specified UIComponent, can be retrieved using {@link #GetUIComponentForVariable GetUIComponentForVariable} API call\n        @return true if setting the focus in the specified component succeeded, false otherwise\n        @since 7.0",
        "operationId": "SetFocusToUIComponent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "UIComponent",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetFullScreen": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Sets SageTV to be in full or non-full screen mode\n        @param FullScreen true if SageTV should be put into full screen mode, false if it should be put into windowed mode",
        "operationId": "SetFullScreen",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "boolean",
            "required": true,
            "description": "FullScreen",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetRemoteEventEncryptionEnabled": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "This is used to enable/disable encryption on the event channel for the SageTV MiniClient. The MiniClient is used\n        for the media extenders and for placeshifting. When using a non-local MiniClient connection, or if local MiniClient\n        connections are configured to require authentication; the event channel between the two will start off in an encrypted\n        mode so that a password can be exchanged.  This API call can then be used with a false argument to disable encryption\n        of the event channel in order to increase performance. It can also be used to re-enable encryption at a later time if\n        sensitive information is going to be transmitted again.\n       \n        @param EnableEncryption true if the MiniClient event channel should start encrypting events, false if it should stop\n        @return true if the MiniClient supports encryption and the operation should succeed, the connection will terminate if it fails\n        @since 4.1.7",
        "operationId": "SetRemoteEventEncryptionEnabled",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "boolean",
            "required": true,
            "description": "EnableEncryption",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetVariableForUIComponent": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Sets the variable with the specified name in the context of the passed in UIComponent. This behaves the same way as\n        if an assignment was done to that variable within the passed in UIComponent context within the Studio. This may result\n        in setting the value at a higher level in the hierarchy if the variable is defined above the specified component.\n        @param UIComponent the UI component who\u0027s context should be used when setting the variable\n        @param VarName the name of the variable to set\n        @param VarValue the value to set the variable to\n        @since 7.1",
        "operationId": "SetVariableForUIComponent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "UIComponent",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "VarName",
            "in": "query"
          },
          {
            "name": "3",
            "type": "#/definitions/Object",
            "required": true,
            "description": "VarValue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dStartBackgroundFileDownload": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Instructs the file transfer engine to download the specified file from the server to the local destination file. You may also\n        download from remote http:// or ftp:// addresses; in that case just specify the URL in the ServerAddress argument and leave sourceFile as null.\n        When downloading from http or ftp addresses, the target will be the server\u0027s filesystem for remote clients; otherwise it is the local filesystem.\n        When smb:// URLs are specified; they will be access from the server\u0027s network for remote clients, otherwise the source will be from the local network.\n        smb:// URLs target download will be the local filesystem. This call is different then the regular StartFileDownload API call because it allows for multiple\n        downloads to occur at the same time. The \u0027key\u0027 for the downloads are the DestFile objects.\n        @param ServerAddress the address of the SageTV server to download from, or null if you\u0027re using SageTVClient and you want to download from the server you\u0027re connected to, or a valid smb, http or ftp URL\n        @param SourceFile the file path on the server you want to download\n        @param DestFile the destination file for the file download\n        @param RequestProperties a Properties object that specifies the request properties to use in an HTTP download request, can be null\n        @return true if the copy process was successfully started, false if the file doesn\u0027t exist on the server or it couldn\u0027t be contacted\n        @since 7.0",
        "operationId": "StartBackgroundFileDownload",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "ServerAddress",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "SourceFile",
            "in": "query"
          },
          {
            "name": "3",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "DestFile",
            "in": "query"
          },
          {
            "name": "4",
            "type": "#/definitions/java.util.Properties",
            "required": true,
            "description": "RequestProperties",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dStartCircularFileDownload": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Instructs the file transfer engine to download the specified file from the server to the local destination file. You may also\n        download from remote http:// or ftp:// addresses; in that case just specify the URL in the ServerAddress argument and leave sourceFile as null.\n        When downloading from http or ftp addresses, the target will be the server\u0027s filesystem for remote clients; otherwise it is the local filesystem.\n        When smb:// URLs are specified; they will be access from the server\u0027s network for remote clients, otherwise the source will be from the local network.\n        smb:// URLs target download will be the local filesystem.\n        The \u0027Circular\u0027 version of this API call will write to a temporary circular file; this is designed for systems with limited storage capacity.\n        This version of the API call may not be used by SageTVClient (if it is; then it will internally switch to the non-circular file method)\n        @param ServerAddress the address of the SageTV server to download from, or null if you\u0027re using SageTVClient and you want to download from the server you\u0027re connected to, or a valid smb, http or ftp URL\n        @param SourceFile the file path on the server you want to download\n        @param DestFile the destination file for the file download\n        @param RequestProperties a Properties object that specifies the request properties to use in an HTTP download request, can be null\n        @return true if the copy process was successfully started, false if the file doesn\u0027t exist on the server or it couldn\u0027t be contacted\n        @since 9.0",
        "operationId": "StartCircularFileDownload",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "ServerAddress",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "SourceFile",
            "in": "query"
          },
          {
            "name": "3",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "DestFile",
            "in": "query"
          },
          {
            "name": "4",
            "type": "#/definitions/java.util.Properties",
            "required": true,
            "description": "RequestProperties",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dStartFileCopy": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Instructs the file transfer engine to copy the specified file(s) from the source directory to the destination directory.\n        If there is no filename specified then the contents of the directory are copied recursively. If the destination directory\n        is within the path of SageTV managed diskspace then the appropriate free space will be cleared on the disk in order for the file copy to succeed.\n        This also works for uploading files from a SageTV client to a SageTV server.\n        @param Filename the name of the file in the SourceDirectory to copy, or null if the whole directory should be copied\n        @param SourceDirectory the source directory for the file copy (smb:// paths are OK)\n        @param DestDirectory the destination directory for the file copy\n        @return true if the copy process was successfully started, false if the file copy is unable to be performed",
        "operationId": "StartFileCopy",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Filename",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "SourceDirectory",
            "in": "query"
          },
          {
            "name": "3",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "DestDirectory",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dStartFileDownload": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Instructs the file transfer engine to download the specified file from the server to the local destination file. You may also\n        download from remote http:// or ftp:// addresses; in that case just specify the URL in the ServerAddress argument and leave sourceFile as null.\n        When downloading from http or ftp addresses, the target will be the server\u0027s filesystem for remote clients; otherwise it is the local filesystem.\n        When smb:// URLs are specified; they will be access from the server\u0027s network for remote clients, otherwise the source will be from the local network.\n        smb:// URLs target download will be the local filesystem. Only one download process is allowed per-UI using the \u0027FileDownload\u0027 API calls. If you wish\n        to handle multiple downloads; then use the \u0027BackgroundFileDownload\u0027 API calls.\n        @param ServerAddress the address of the SageTV server to download from, or null if you\u0027re using SageTVClient and you want to download from the server you\u0027re connected to, or a valid smb, http or ftp URL\n        @param SourceFile the file path on the server you want to download\n        @param DestFile the destination file for the file download\n        @param RequestProperties a Properties object that specifies the request properties to use in an HTTP download request, can be null\n        @return true if the copy process was successfully started, false if the file doesn\u0027t exist on the server or it couldn\u0027t be contacted\n        @since 9.0",
        "operationId": "StartFileDownload",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "ServerAddress",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "SourceFile",
            "in": "query"
          },
          {
            "name": "3",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "DestFile",
            "in": "query"
          },
          {
            "name": "4",
            "type": "#/definitions/java.util.Properties",
            "required": true,
            "description": "RequestProperties",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSwitchEmbeddedModeTo": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Executes a predefined application in the context of an embedded client. This is used for launching things\n        like Netflix, YouTube Leanback and also specifying alternate modes the embedded client can exit into.\n        @param NewMode the name of the application\n       \n        @since 8.0",
        "operationId": "SwitchEmbeddedModeTo",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "NewMode",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dTransmitCommandUsingInfraredTuningPlugin": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "Causes SageTV to instruct the specified tuning plugin to send a command\n        @param TuningPlugin the name of the tuning plugin that should send the command\n        @param TuningPluginPort the name of the port the specified tuning plugin is on\n        @param RemoteName the name of the \u0027Remote Control\u0027 that should be used to send the command\n        @param CommandName the name of the command to be sent\n        @param RepeatFactor the \u0027repeat factor\u0027 to use for sending the infrared command, 2 is the default",
        "operationId": "TransmitCommandUsingInfraredTuningPlugin",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "TuningPlugin",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "TuningPluginPort",
            "in": "query"
          },
          {
            "name": "3",
            "type": "string",
            "required": true,
            "description": "RemoteName",
            "in": "query"
          },
          {
            "name": "4",
            "type": "string",
            "required": true,
            "description": "CommandName",
            "in": "query"
          },
          {
            "name": "5",
            "type": "integer",
            "required": true,
            "description": "RepeatFactor",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dUpdateLocatorServer": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Global"
        ],
        "description": "This API call can be used to tell SageTV to do an update with the Locator server right now.\n        It\u0027s useful for when you change external network configuration stuff like ports or IPs.\n       \n        @since 4.1.13",
        "operationId": "UpdateLocatorServer",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dAddMediaFile": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Adds a new MediaFile to the database. This file will remain in the database until it is manually removed by the\n        user or when the file no longer exists.\n        @param File the file path for the new MediaFile\n        @param NamePrefix the \u0027prefix\u0027 to prepend to the name of this media file for hierarchical purposes (i.e. the subdirectory that the file is in relative to the import root)\n        @return the newly added MediaFile object",
        "operationId": "AddMediaFile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "File",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "NamePrefix",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is MediaFile)",
            "schema": {
              "$ref": "#/definitions/MediaFile"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dAutorotatePictureFile": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Automatically rotates the specified picture file according to the orientation set in the EXIF data.\n        @param MediaFile the MediaFile object that represents the picture\n        @return true if the automatic rotation succeeded, false otherwise\n        @since 6.4",
        "operationId": "AutorotatePictureFile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaFile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dCanAutorotatePictureFile": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Returns true if the specified picture file can be autorotated and is currently not in that autorotated position\n        @param MediaFile the MediaFile object\n        @return true if the specified picture file can be autorotated and is currently not in that autorotated position\n        @since 6.4",
        "operationId": "CanAutorotatePictureFile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaFile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dCopyToLocalFile": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Downloads the specified MediaFile from the SageTV server and saves it as the specified LocalFile. This call should\n        only be made by SageTV Client.\n        @param MediaFile the MediaFile object to download a copy of\n        @param LocalFile the destination file to store the MediaFile as on the local filesystem",
        "operationId": "CopyToLocalFile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaFile",
            "in": "query"
          },
          {
            "name": "2",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "LocalFile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dCreateTempMediaFile": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Creates a temporary MediaFile object which can be used for playback later. This will not be added into the database;\n        but any metadata that is attached to this MediaFile object will be put in the database until the next cleanup process occurs.\n        @param FilePath the file path for the temporary MediaFile (can also be an smb:// URL)\n        @return the newly created temporary MediaFile object or null if it can\u0027t properly resolve the path to a file\n        @since 6.6",
        "operationId": "CreateTempMediaFile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "FilePath",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is MediaFile)",
            "schema": {
              "$ref": "#/definitions/MediaFile"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dDeleteFile": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Deletes the files that correspond to this MediaFile from disk and also deletes the MediaFile object from the database.\n        NOTE: This actually delete the files from the disk.\n        This has a slightly different effect on Intelligent Recording versus the {@link #DeleteFileWithoutPrejudice DeleteFileWithoutPrejudice()}\n        @param MediaFile the MediaFile object to delete\n        @return true if the deletion succeeded, false otherwise. A deletion can fail because the file is currently being recorded or watched or because the native filesystem is unable to delete the file.",
        "operationId": "DeleteFile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaFile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dDeleteFileWithoutPrejudice": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Deletes the files that correspond to this MediaFile from disk and also deletes the MediaFile object from the database.\n        NOTE: This actually delete the files from the disk.\n        This has a slightly different effect on Intelligent Recording versus {@link #DeleteFile DeleteFile()}. DeleteFileWithoutPrejudice should\n        be used when the file was incorrectly recorded or in other cases where this deletion decision should have no effect on intelligent recording.\n        @param MediaFile the MediaFile object to delete\n        @return true if the deletion succeeded, false otherwise. A deletion can fail because the file is currently being recorded or watched or because the native filesystem is unable to delete the file.",
        "operationId": "DeleteFileWithoutPrejudice",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaFile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dFlipPictureFile": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Performs a lossless flip of the specified JPEG picture file. This will modify the file that is\n        stored on disk.\n        @param MediaFile the MediaFile object\n        @param Horizontal true if it should be flipped horizontally (i.e. around a vertical axis), false if it should be flipped vertically (i.e. around a horizontal axis)\n        @return true if the flip was successful, false otherwise\n        @since 5.1",
        "operationId": "FlipPictureFile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaFile",
            "in": "query"
          },
          {
            "name": "2",
            "type": "boolean",
            "required": true,
            "description": "Horizontal",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGenerateThumbnail": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Generates a thumbnail for the specified MediaFile at the requested offset time in the file using the desired width \u0026amp; height.\n        The resulting thumbnail will be saved to the specified file. This call DOES NOT need to be used for GetThumbnail to work properly; this\n        API call is intended as an extra for developers who want additional thumbnails beyond the one that is normally auto-generated for MediaFiles.\n        This API call will not return until the generation of the thumbnail is complete. If both width \u0026amp; height are zero, then the size will be determined\n        automatically to match the aspect ratio of the video (the largest dimension will match what SageTV uses internally for thumbnail sizes). If only one\n        of width or height is zero, then the other dimension will be determined automatically to match the aspect ratio of the video.\n        @param MediaFile the MediaFile object, must be a Video file (no BluRays or DVDs)\n        @param Time the offset time in seconds at which the thumbnail should be generated (relative to the start of the file), while fractional seconds are supported, accuracy cannot be guaranteed\n        @param Width the width in pixels of the desired thumbnail\n        @param Height the height in pixels of the desired thumbnail\n        @param File the file path to save the thumbnail to\n        @return true if the generation succeeded, false if it failed\n        @since 7.1",
        "operationId": "GenerateThumbnail",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaFile",
            "in": "query"
          },
          {
            "name": "2",
            "type": "float",
            "required": true,
            "description": "Time",
            "in": "query"
          },
          {
            "name": "3",
            "type": "integer",
            "required": true,
            "description": "Width",
            "in": "query"
          },
          {
            "name": "4",
            "type": "integer",
            "required": true,
            "description": "Height",
            "in": "query"
          },
          {
            "name": "5",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "File",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAlbumForFile": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Gets the Album object that corresponds to this MediaFile. This only returns a useful object if the argument is a music file.\n        @param MediaFile the MediaFile object\n        @return the Album object that corresponds to this MediaFile",
        "operationId": "GetAlbumForFile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaFile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Album)",
            "schema": {
              "$ref": "#/definitions/Album"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetDurationForSegment": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Returns the duration in milliseconds for the specified segment number in this MediaFile.\n        @param MediaFile the MediaFile object\n        @param SegmentNumber the 0-based segment number to get the duration of\n        @return the duration in milliseconds for the specified segment number in this MediaFile",
        "operationId": "GetDurationForSegment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaFile",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "SegmentNumber",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetEndForSegment": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Gets the ending time for a specified segment number in this MediaFile.\n        @param MediaFile the MediaFile object\n        @param SegmentNumber the 0-based segment number to get the end time of\n        @return the ending time for a specified segment number in this MediaFile",
        "operationId": "GetEndForSegment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaFile",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "SegmentNumber",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetFileDuration": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Returns the total duration of the content in this MediaFile\n        @param MediaFile the MediaFile object\n        @return the total duration in milliseconds of the content in the specified MediaFile",
        "operationId": "GetFileDuration",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaFile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetFileEndTime": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Returns the ending time for the content in ths specified MediaFile. This corresponds to when the file\u0027s recording ended or the\n        timestamp on the file itself plus the file\u0027s duration. See java.lang.System.currentTimeMillis() for information on the time units.\n        @param MediaFile the MediaFile object\n        @return the ending time for the content in the specified MediaFile",
        "operationId": "GetFileEndTime",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaFile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetFileForSegment": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Gets the file that represents the specified segment number in this MediaFile\n        @param MediaFile the MediaFile object\n        @param SegmentNumber the 0-based segment number to get the file for\n        @return the file that represents the specified segment number in this MediaFile",
        "operationId": "GetFileForSegment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaFile",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "SegmentNumber",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is java.io.File)",
            "schema": {
              "$ref": "#/definitions/java.io.File"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetFileStartTime": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Returns the starting time for the content in ths specified MediaFile. This corresponds to when the file\u0027s recording started or the\n        timestamp on the file itself. See java.lang.System.currentTimeMillis() for information on the time units.\n        @param MediaFile the MediaFile object\n        @return the starting time for the content in the specified MediaFile",
        "operationId": "GetFileStartTime",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaFile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetFullImage": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Returns the MetaImage object which represents the picture file for this MediaFile. If the specified MediaFile\n        is not a picture file, then null is returned\n        @param MediaFile the MediaFile object\n        @return the MetaImage object which represents the picture file for this MediaFile. If the specified MediaFile\n                  is not a picture file, then null is returned",
        "operationId": "GetFullImage",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaFile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is MetaImage)",
            "schema": {
              "$ref": "#/definitions/MetaImage"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetMediaFileAiring": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Gets the Airing object that represents the content metadata for this MediaFile\n        @param MediaFile the MediaFile object\n        @return the Airing object that represents the content metadata for this MediaFile",
        "operationId": "GetMediaFileAiring",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaFile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Airing)",
            "schema": {
              "$ref": "#/definitions/Airing"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetMediaFileEncoding": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Gets the encoding that was used to record this file. This will only return something useful for recorded television files.\n        @param MediaFile the MediaFile object\n        @return the encoding that was used to record this file",
        "operationId": "GetMediaFileEncoding",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaFile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetMediaFileForFilePath": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Returns the MediaFile from the database that corresponds to a specified file on disk\n        @param FilePath the file path to find the corresponding MediaFile for\n        @return the MediaFile for the corresponding file path, or null if there is no corresponding MediaFile",
        "operationId": "GetMediaFileForFilePath",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "FilePath",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is MediaFile)",
            "schema": {
              "$ref": "#/definitions/MediaFile"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetMediaFileForID": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Returns the MediaFile object that corresponds to the passed in ID. The ID should have been obtained from a call to {@link #GetMediaFileID GetMediaFileID()}\n        @param id the id of the MediaFile object to get\n        @return the MediaFile object that corresponds to the passed in ID",
        "operationId": "GetMediaFileForID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "integer",
            "required": true,
            "description": "id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is MediaFile)",
            "schema": {
              "$ref": "#/definitions/MediaFile"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetMediaFileFormatDescription": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Returns a string that provides a description of this MediaFile\u0027s format, i.e. MPEG2-PS[MPEG2-Video/2.0Mbps 4:3 480i@30fps, MP2/192kbps@48kHz]\n        @param MediaFile the MediaFile object\n        @return a string that provides a description of this MediaFile\u0027s format\n        @since 5.1",
        "operationId": "GetMediaFileFormatDescription",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaFile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetMediaFileID": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Returns the unique ID used to identify this MediaFile. Can get used later on a call to {@link #GetMediaFileForID GetMediaFileForID()}\n        @param MediaFile the MediaFileobject\n        @return the unique ID used to identify this MediaFile",
        "operationId": "GetMediaFileID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaFile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetMediaFileMetadata": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Returns a string for the corresponding metadata property in the MediaFile\u0027s format. These are set during format detection/import.\n        Names set in the property \"custom_metadata_properties\" (which is a semicolon/comma delimited list) will be available; as well\n        as all standard SageTV metadata fields and details on format information.\n        These include Title, Description, EpisodeName, Track, Duration, Genre, Language, RunningTime,\n        Rated, ParentalRating, PartNumber, TotalParts, HDTV, CC, Stereo, SAP, Subtitled, 3D, DD5.1, Dolby, Letterbox, Live, New, Widescreen, Surround,\n        Dubbed, Taped, Premiere, SeasonPremiere, SeriesPremiere, ChannelPremiere, SeasonFinale, SeriesFinale,  SeasonNumber, EpisodeNumber,\n        ExternalID, Album, Year, OriginalAirDate, ExtendedRatings, Misc, All \"Role\" Names, Format.Video.Codec,\n        Format.Video.Resolution, Format.Video.Aspect, Format.Video.Bitrate, Format.Video.Width, Format.Video.Height, Format.Video.FPS,\n        Format.Video.Interlaced, Format.Video.Progressive, Format.Video.Index, Format.Video.ID, Format.Audio.NumStreams, Format.Audio[.#].Codec, Format.Audio[.#].Channels,\n        Format.Audio[.#].Language, Format.Audio[.#].SampleRate, Format.Audio[.#].BitsPerSample, Format.Audio[.#].Index, Format.Audio[.#].ID, Format.Subtitle.NumStreams,\n        Format.Subtitle[.#].Codec, Format.Subtitle[.#].Language, Format.Subtitle[.#].Index, Format.Subtitle[.#].ID, Format.Container and Picture.Resolution\n        @param MediaFile the MediaFile object\n        @param Name the name of the property to get\n        @return a string corresponding to the metadata property value, or the emptry string if it is undefined\n        @since 6.6",
        "operationId": "GetMediaFileMetadata",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaFile",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetMediaFileMetadataProperties": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Returns a java.util.Properties object that contains all of the metadata properties for a MediaFile object.\n        This will only include properties that can be modified (i.e. no format information is included). These properties will include all\n        the standard database fields, as well as any custom metadata properties that were set for this MediaFile object.\n        See {@link #SetMediaFileMetadata SetMediaFileMetadata()} and {@link #GetMediaFileMetadata GetMediaFileMetadata()} for more details on those properties.\n        @param MediaFile the MediaFile object\n        @return a java.util.Properties object with all the metadata properties for this MediaFile, this is a copy and is safe to modify\n        @since 7.1",
        "operationId": "GetMediaFileMetadataProperties",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaFile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is java.util.Properties)",
            "schema": {
              "$ref": "#/definitions/java.util.Properties"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetMediaFileRelativePath": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Returns the path of this MediaFile object relative to the root of the import directory it is in.\n        @param MediaFile the MediaFile object\n        @return the path of this MediaFile object relative to the root of the import directory it is in\n        @since 7.0",
        "operationId": "GetMediaFileRelativePath",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaFile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetMediaFiles": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Returns all of the MediaFile objects in the database\n        The content it references must also match one of the media types specified in the MediaMask.\n        There\u0027s also an additional supported type of \u0027L\u0027 which indicates files that pass IsLibraryFile()\n        @param MediaMask string specifying what content types to search (i.e. \"TM\" for TV \u0026amp; Music, \u0027T\u0027\u003dTV, \u0027M\u0027\u003dMusic, \u0027V\u0027\u003dVideo, \u0027D\u0027\u003dDVD, \u0027P\u0027\u003dPictures, \u0027B\u0027\u003dBluRay)\n        @return a list of all of the MediaFile objects in the database that match the mask\n        @since 6.4",
        "operationId": "GetMediaFiles",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaMask",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MediaFile"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetMediaTitle": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Returns the title for the specified MediaFile object\n        @param MediaFile the MediaFile object\n        @return the title for the specified MediaFile object",
        "operationId": "GetMediaTitle",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaFile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetNumberOfSegments": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Returns the number of segments in ths specified MediaFile. Each segment corresponds to a different physical file on disk.\n        @param MediaFile the MediaFile object\n        @return the number of segments in ths specified MediaFile",
        "operationId": "GetNumberOfSegments",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaFile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetParentDirectory": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Gets the directory that the files for this MediaFile are in.\n        @param MediaFile the MediaFile object\n        @return the directory that the files for this MediaFile are in",
        "operationId": "GetParentDirectory",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaFile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is java.io.File)",
            "schema": {
              "$ref": "#/definitions/java.io.File"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSegmentFiles": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Returns the list of files that make up the specified MediaFile object. A MediaFile object can represent more than\n        one physical file on disk. This occurs when a recording of a television show is not contiguous; this can happen for various\n        reasons including the user changing the channel or restarting the system.\n        @param MediaFile the MediaFile object\n        @return the list of files that make up this MediaFile object",
        "operationId": "GetSegmentFiles",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaFile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/java.io.File"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSize": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Gets the total size in bytes of the files on disk that represent this MediaFile\n        @param MediaFile the MediaFile object\n        @return the total size in bytes of the files on disk that represent this MediaFile",
        "operationId": "GetSize",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaFile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetStartForSegment": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Gets the starting time for a specified segment number in this MediaFile.\n        @param MediaFile the MediaFile object\n        @param SegmentNumber the 0-based segment number to get the start time of\n        @return the starting time for a specified segment number in this MediaFile",
        "operationId": "GetStartForSegment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaFile",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "SegmentNumber",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetStartTimesForSegments": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Returns a list of all of the start times of the segments in the specified MediaFile\n        @param MediaFile the MediaFile object\n        @return a list of all of the start times of the segments in the specified MediaFile",
        "operationId": "GetStartTimesForSegments",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaFile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetThumbnail": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Gets the representative thumbnail image which should be used for iconic display of this MediaFile. For picture files,\n        this will be a thumbnail image. For music files it will be the album art. For any other files it\u0027ll be the thumbnail for\n        the file if one exists, otherwise it\u0027ll be the channel logo for the file. If none of those exist then null is returned.\n        @param MediaFile the MediaFile object\n        @return the representative thumbnail image which should be used for iconic display of this MediaFile",
        "operationId": "GetThumbnail",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaFile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is MetaImage)",
            "schema": {
              "$ref": "#/definitions/MetaImage"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dHasAnyThumbnail": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Returns true if this MediaFile object has a thumbnail representation of it. If this is true, then {@link #GetThumbnail GetThumbnail()}\n        will not return null.\n        @param MediaFile the MediaFile object\n        @return true if this MediaFile object has a thumbnail representation of it, false otherwise",
        "operationId": "HasAnyThumbnail",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaFile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dHasSpecificThumbnail": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Returns true if this MediaFile object has a thumbnail for it that is unique to the content itself. This is true\n        for any music file with album art or any other MediaFile that has another file on disk which contains the representative thumbnail.\n        @param MediaFile the MediaFile object\n        @return true if this MediaFile object has a thumbnail for it that is unique to the content itself, false otherwise",
        "operationId": "HasSpecificThumbnail",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaFile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsBluRay": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Returns true if this MediaFile represents BluRay content.\n        @param MediaFile the MediaFile object\n        @return true if this MediaFile represents BluRay content, false otherwise\n        @since 6.6",
        "operationId": "IsBluRay",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaFile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsCompleteRecording": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Returns true if SageTV considers this MediaFile a \u0027complete\u0027 recording. The rules behind this are somewhat complex,\n        but the intended purpose is that a \u0027complete\u0027 recording is one that should be presented in the list of recordings to a user.\n        @param MediaFile the MediaFile object\n        @return true if SageTV considers this MediaFile a \u0027complete\u0027 recording",
        "operationId": "IsCompleteRecording",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaFile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsDVD": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Returns true if this MediaFile represents DVD content. This can be either a DVD drive or a ripped DVD.\n        @param MediaFile the MediaFile object\n        @return true if this MediaFile represents DVD content, false otherwise",
        "operationId": "IsDVD",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaFile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsDVDDrive": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Returns true if this MediaFile represents the physical DVD drive in the system. Use this MediaFile to playback DVDs from an optical drive.\n        @param MediaFile the MediaFile object\n        @return true if this MediaFile represents the physical DVD drive in the system, false otherwise",
        "operationId": "IsDVDDrive",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaFile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsFileCurrentlyRecording": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Returns true if this MediaFile is currently in the process of recording.\n        @param MediaFile the MediaFile object\n        @return true if this MediaFile is currently in the process of recording, false otherwise",
        "operationId": "IsFileCurrentlyRecording",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaFile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsLibraryFile": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Returns true if the specified MediaFile has been either imported using a library path or if this is a television\n        recording that has had the \u0027Move to Library\u0027 operation performed on it.\n        @param MediaFile the MediaFile object\n        @return true if the specified MediaFile has been either imported using a library path or if this is a television recording that has had the \u0027Move to Library\u0027 operation performed on it; false otherwise",
        "operationId": "IsLibraryFile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaFile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsLocalFile": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Returns true if the specified MediaFile is local to this system (i.e. doesn\u0027t need to be streamed from a server)\n        @param MediaFile the MediaFile object\n        @return true if the specified MediaFile is local to this system (i.e. doesn\u0027t need to be streamed from a server), false otherwise",
        "operationId": "IsLocalFile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaFile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsMediaFileObject": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Returns true if the specified object is a MediaFile object. No automatic type conversion will be performed on the argument.\n        This will return false if the argument is a MediaFile object, BUT that object no longer exists in the SageTV database.\n        @param Object the object to test to see if it is a MediaFile object\n        @return true if the argument is a MediaFile object, false otherwise",
        "operationId": "IsMediaFileObject",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "Object",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsMusicFile": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Returns true if this MediaFile\u0027s content is audio only.\n        @param MediaFile the MediaFile object\n        @return true if this MediaFile\u0027s content is audio only, false otherwise",
        "operationId": "IsMusicFile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaFile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsPictureFile": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Returns true if this MediaFile\u0027s content represents a picture file\n        @param MediaFile the MediaFile object\n        @return true if this MediaFile\u0027s content represents a picture file, false otherwise",
        "operationId": "IsPictureFile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaFile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsTVFile": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Returns true if this MediaFile represents recorded television content\n        @param MediaFile the MediaFile object\n        @return true if this MediaFile represents recorded television content, false otherwise",
        "operationId": "IsTVFile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaFile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsThumbnailLoaded": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Checks whether the passed thumbnail for the specified MediaFile is loaded\n        into system memory or into the VRAM cache of the corresponding UI making the call.\n        @param MediaFile the MediaFile object\n        @return true if the thumbnail image for the specified MediaFile is loaded into system memory or the calling UI\u0027s VRAM, false otherwise\n        @since 6.1",
        "operationId": "IsThumbnailLoaded",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaFile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsVideoFile": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Returns true if this MediaFile\u0027s content is an audio/video or video file (this will be false for DVD/BluRay content)\n        @param MediaFile the MediaFile object\n        @return true if this MediaFile\u0027s content is an audio/video or video file (this will be false for DVD/BluRay content), false otherwise",
        "operationId": "IsVideoFile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaFile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dMoveFileToLibrary": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Marks a MediaFile object as being \u0027Moved to Library\u0027 which means the {@link #IsLibraryFile IsLibraryFile()} call will\n        now return true. This can be used to help organize the recorded television files.\n        @param MediaFile the MediaFile ojbect",
        "operationId": "MoveFileToLibrary",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaFile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dMoveTVFileOutOfLibrary": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Un-marks a MediaFile object as being \u0027Moved to Library\u0027 which means the {@link #IsLibraryFile IsLibraryFile()} call will\n        no longer return true. This can only be used on recorded television files and has the opposite effect of\n        {@link #MoveFileToLibrary MoveFileToLibrary()}\n        @param MediaFile the MediaFile ojbect",
        "operationId": "MoveTVFileOutOfLibrary",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaFile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dRegeneratePictureThumbnail": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Regenerates the thumbnail associated with the specified picture file. Sometimes the rotation may be mis-aligned from\n        the thumbnail and this allows a way to repair that.\n        @param MediaFile the MediaFile object\n        @since 6.4",
        "operationId": "RegeneratePictureThumbnail",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaFile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dRotatePictureFile": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Performs a lossless rotation of the specified JPEG picture file (90, 180 or 270 degrees). This will modify the file that is\n        stored on disk.\n        @param MediaFile the MediaFile object\n        @param Degrees the number of degress to rotate the picture in the clockwise direction, can be a positive or negative value and must be a multiple of 90\n        @return true if the rotation was successful, false otherwise\n        @since 5.1",
        "operationId": "RotatePictureFile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaFile",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "Degrees",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetMediaFileAiring": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Sets a link between a MediaFile object which represents a file(s) on disk and an Airing object which\n        represents metadata about the content. This is a way to link content information with media.\n        @param MediaFile the MediaFile object to set the content information for\n        @param Airing the Airing object that should be the content metadata pointer for this MediaFile\n        @return true if the operation succeeded, false otherwise; this operation will fail if the Airing is already linked to another MediaFile",
        "operationId": "SetMediaFileAiring",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaFile",
            "in": "query"
          },
          {
            "name": "2",
            "type": "#/definitions/Airing",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetMediaFileMetadata": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Sets the corresponding metadata property in the MediaFile\u0027s format. These are set in the database and are also exported\n        to the corresponding .properties file for that MediaFile. When it exports it will append these updates to the .properties file.\n        It will also update the property \"custom_metadata_properties\" (which is a semicolon/comma delimited list) which tracks the extra\n        metadata properties that should be retained. Usage of any of the following names will update the corresponding Airing/Show object\n        for the MediaFile as well: Title, Description, EpisodeName, Track, Duration, Genre, Language, RunningTime,\n        Rated, ParentalRating, PartNumber, TotalParts, HDTV, CC, Stereo, SAP, Subtitled, 3D, DD5.1, Dolby, Letterbox, Live, New,\n        Widescreen, Surround, Dubbed, Taped, SeasonNumber, EpisodeNumber Premiere, SeasonPremiere, SeriesPremiere, ChannelPremiere,\n        SeasonFinale, SeriesFinale, ExternalID, Album, Year, OriginalAirDate, ExtendedRatings, Misc and All \"Role\" Names\n        @param MediaFile the MediaFile object\n        @param Name the name of the property to set\n        @param Value the value of the property to set\n        @since 6.6",
        "operationId": "SetMediaFileMetadata",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaFile",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Name",
            "in": "query"
          },
          {
            "name": "3",
            "type": "string",
            "required": true,
            "description": "Value",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetMediaFileShow": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaFileAPI"
        ],
        "description": "Sets a link between a MediaFile object which represents a file(s) on disk and a Show object which\n        represents metadata about the content. This is a way to link content information with media.\n        This will create a new Airing representing this Show and add it to the database. Then that new Airing is\n        linked with this MediaFile (just like it is in {@link #SetMediaFileAiring SetMediaFileAiring()}\n        @param MediaFile the MediaFile object to set the content information for\n        @param Show the Show object that should be the content information for this MediaFile\n        @return true if the operation succeeded, false otherwise; this operation will fail only if one of the arguments is null",
        "operationId": "SetMediaFileShow",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaFile",
            "in": "query"
          },
          {
            "name": "2",
            "type": "#/definitions/Show",
            "required": true,
            "description": "Show",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dAppendNodeFilter": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaNodeAPI"
        ],
        "description": "Adds a filtering technique to used by the specified MediaNode hierarchy. This effects all levels of the hierarchy.\n        Filters can either be inclusive or exclusive. This method will not clear other filters that have been set.\n        Valid filtering technique names are: Directories, Pictures, Videos, Music, DVD, BluRay, TV, Watched, Archived, DontLike, Favorite,\n        HDTV, ManualRecord, FirstRun, CompleteRecording\n        @param MediaNode the specified MediaNode\n        @param Technique the name of the filtering technique to use, case insensitive\n        @param MatchPasses true if the items matching the filter should be retained, false if matching items should be removed\n        @since 7.0",
        "operationId": "AppendNodeFilter",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaNode",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Technique",
            "in": "query"
          },
          {
            "name": "3",
            "type": "boolean",
            "required": true,
            "description": "MatchPasses",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dCreateMediaNode": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaNodeAPI"
        ],
        "description": "Creates a static MediaNode that has no parents and no children. Can be used to add arbitrary items to MediaNode lists for display in\n        the UI. The data type for the node will be Virtual.\n        @param PrimaryLabel the value to set as the primary label for the MediaNode\n        @param SecondaryLabel the value to set as the secondary label for the MediaNode\n        @param Thumbnail the Object to use as the thumbnail for the MediaNode\n        @param Icon the Object to use as the icon for the MediaNode\n        @param DataObject the Object that should be the data object for the MediaNode\n        @return a new MediaNode object that has the specified attributes\n        @since 7.0",
        "operationId": "CreateMediaNode",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "PrimaryLabel",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "SecondaryLabel",
            "in": "query"
          },
          {
            "name": "3",
            "type": "#/definitions/Object",
            "required": true,
            "description": "Thumbnail",
            "in": "query"
          },
          {
            "name": "4",
            "type": "#/definitions/Object",
            "required": true,
            "description": "Icon",
            "in": "query"
          },
          {
            "name": "5",
            "type": "#/definitions/Object",
            "required": true,
            "description": "DataObject",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is MediaNode)",
            "schema": {
              "$ref": "#/definitions/MediaNode"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAllNodeDescendants": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaNodeAPI"
        ],
        "description": "Returns the data set that represents all the children under the specified MediaNode if that\n        data set has already been realized.\n        @param MediaNode the specified MediaNode\n        @return a Collection which holds all of the resulting descendants of the specified Media Node; this Collection should NOT be modified\n        @since 7.0",
        "operationId": "GetAllNodeDescendants",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaNode",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is java.util.Collection)",
            "schema": {
              "$ref": "#/definitions/java.util.Collection"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetChildrenCheckedCount": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaNodeAPI"
        ],
        "description": "Returns the number of children of the specified MediaNode that are in the specified checked state.\n        @param MediaNode the specified MediaNode\n        @param State true if the returned count should be for checked children, false if it should be for unchecked children\n        @return the number of children of the specified MediaNode that are in the specified checked state\n        @since 7.0",
        "operationId": "GetChildrenCheckedCount",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaNode",
            "in": "query"
          },
          {
            "name": "2",
            "type": "boolean",
            "required": true,
            "description": "State",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetChildrenCheckedNodes": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaNodeAPI"
        ],
        "description": "Returns the children of the specified MediaNode that are in the specified checked state.\n        @param MediaNode the specified MediaNode\n        @param State true if the returned list should be for checked children, false if it should be for unchecked children\n        @return an array of children of the specified MediaNode that are in the specified checked state\n        @since 7.0",
        "operationId": "GetChildrenCheckedNodes",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaNode",
            "in": "query"
          },
          {
            "name": "2",
            "type": "boolean",
            "required": true,
            "description": "State",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is java.util.Vector)",
            "schema": {
              "$ref": "#/definitions/java.util.Vector"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetMediaSource": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaNodeAPI"
        ],
        "description": "Retrieves a MediaNode which is the root of the specified \u0027Media Source\u0027. All names are case insensitive.\n        Valid names are:\n        Filesystem - provides a view of the native filesystem\n        VideoNavigator - provides various views of the imported videos\n        MusicNavigator - provides various views of the imported music\n        MusicVideosNavigator - provides various views of the imported videos with the \u0027music videos\u0027 category\n        MoviesNavigator - provides various views of all content with the \u0027Movie\u0027 category or that are DVDs or BluRays\n        TVNavigator - provides various views of recorded TV content\n        \u003cbr\u003e\n        You can also use names that are \"ContentByGrouping\" or just \"Content\".\n        Valid values for \"Content\" are:\n        Clips - all video files with a duration under 10 mins (controlled by the property max_duration_to_be_a_clip)\n        Music or ImportedMusic - all imported music files\n        Videos or ImportedVideso - all imported video files\n        Picture or Photos or ImportedPictures or ImportedPhotos - all imported picture files\n        DVDs or ImportedDVDs - all imported DVDs\n        BluRays or ImportedBluRays - all imported BluRays\n        Movies - all videos or TV recordings with the \u0027Movie\u0027 category or that are DVDs or BluRays\n        MusicVideos - all imported videos with the \u0027Music Video\u0027 category\n        TV - all recorded TV content\n        MediaFiles - all files in SageTV\n        Compilations - all music files that are by \u0027Various Artist\u0027\n        MusicPlaylists - all music playlists\n        VideoPlaylists - all video playlists\n        \u003cbr\u003e\n        Valid values for \"Grouping\" are:\n        Folder - grouped according to their relative import path\n        Category or Genre - grouped by category, for music files they are then subgrouped by Artist and then Album\n        Year - grouped by year, for music files they are subgrouped by Album\n        Director - grouped by Director\n        Actor - grouped by actors/actress\n        Studio - grouped by the studio that produced the content if known\n        Title - grouped by title\n        Series - grouped by television series if known (SeriesInfo object)\n        Album - grouped by album\n        Artist - grouped by artist and then subgrouped by album\n        Channel - grouped by channel\n       \n        @param Name the name of the media source\n        @return a MediaNode which contains the hierarchy for the specified media source\n        @since 7.0",
        "operationId": "GetMediaSource",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is MediaNode)",
            "schema": {
              "$ref": "#/definitions/MediaNode"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetMediaView": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaNodeAPI"
        ],
        "description": "Similar to the GetMediaSource API call; but the second argument allows specifying the actual data set to\n        be used for the view. The name describes the type of content or grouping just like in GetMediaSource. Can be used for\n        presenting a subset of another view or for creating a MediaNode view of a fixed list of data such as a list of MediaFiles or Actors.\n        @param Name the view name to use\n        @param Data the dataset that defines the content in the view, can be a Collection, Object[] or a single object\n        @return a MediaNode that represents the specified Data using the specified view Name\n        @since 7.0",
        "operationId": "GetMediaView",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Name",
            "in": "query"
          },
          {
            "name": "2",
            "type": "#/definitions/Object",
            "required": true,
            "description": "Data",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is MediaNode)",
            "schema": {
              "$ref": "#/definitions/MediaNode"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetNodeChildAt": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaNodeAPI"
        ],
        "description": "Returns the child of the specified MediaNode at the given index\n        @param MediaNode the specified MediaNode\n        @param Index the index of the child to return (0-based)\n        @return the child of the specified MediaNode at the given index\n        @since 7.0",
        "operationId": "GetNodeChildAt",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaNode",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "Index",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is MediaNode)",
            "schema": {
              "$ref": "#/definitions/MediaNode"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetNodeChildren": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaNodeAPI"
        ],
        "description": "Returns an array of the children of the specified MediaNode\n        @param MediaNode the specified MediaNode\n        @return an array of the children of the specified MediaNode\n        @since 7.0",
        "operationId": "GetNodeChildren",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaNode",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MediaNode"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetNodeDataObject": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaNodeAPI"
        ],
        "description": "Returns the Object that is wrapped by the specified MediaNode\n        @param MediaNode the specified MediaNode\n        @return the Object that is wrapped by the specified MediaNode\n        @since 7.0",
        "operationId": "GetNodeDataObject",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaNode",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetNodeDataType": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaNodeAPI"
        ],
        "description": "Returns the type of the Object that is wrapped by the specified MediaNode\n        @param MediaNode the specified MediaNode\n        @return the type of the Object that is wrapped by the specified MediaNode\n        @since 7.0",
        "operationId": "GetNodeDataType",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaNode",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetNodeFilterTechnique": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaNodeAPI"
        ],
        "description": "Returns the name of the current filtering technique used by the specified MediaNode hierarchy. Since\n        multiple filters can be set; an index must be specified to determine which one to get the technique of\n        @param MediaNode the specified MediaNode\n        @param FilterIndex the 0-based index of the filtering technique to retrieve\n        @return the name of the current filtering technique used by the specified MediaNode hierarchy at the specified index, null if the index is out of bounds\n        @since 7.0",
        "operationId": "GetNodeFilterTechnique",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaNode",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "FilterIndex",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetNodeFullPath": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaNodeAPI"
        ],
        "description": "Returns a string which represents the hierarchical path to this MediaNode. This is created by appending the primary labels\n        of all the parents up to the root of the hierarchy. The forward slash is used as a separator.\n        @param MediaNode the specified MediaNode\n        @return a string which represents the hierarchical path to this MediaNode\n        @since 7.0",
        "operationId": "GetNodeFullPath",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaNode",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetNodeIcon": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaNodeAPI"
        ],
        "description": "Returns the icon image associated with the specified MediaNode. This is currently the same as GetNodeThumbnail.\n        @param MediaNode the specified MediaNode\n        @return an Object which represents the icon for this MediaNode; this may be a MetaImage or a resource path that can be used to load an image\n        @since 7.0",
        "operationId": "GetNodeIcon",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaNode",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetNodeNumChildren": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaNodeAPI"
        ],
        "description": "Returns the number of children of the specified MediaNode\n        @param MediaNode the specified MediaNode\n        @return the number of children of the specified MediaNode\n        @since 7.0",
        "operationId": "GetNodeNumChildren",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaNode",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetNodeNumFilters": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaNodeAPI"
        ],
        "description": "Gets the number of filters that are currently set for the specified MediaNode.\n        @param MediaNode the specified MediaNode\n        @return the number of filters that are currently set for the specified MediaNode.\n        @since 7.0",
        "operationId": "GetNodeNumFilters",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaNode",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetNodeParent": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaNodeAPI"
        ],
        "description": "Returns the MediaNode parent of the specified MediaNode\n        @param MediaNode the specified MediaNode\n        @return the MediaNode parent of the specified MediaNode or null if it doesn\u0027t have a parent\n        @since 7.0",
        "operationId": "GetNodeParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaNode",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is MediaNode)",
            "schema": {
              "$ref": "#/definitions/MediaNode"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetNodePrimaryLabel": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaNodeAPI"
        ],
        "description": "Returns a string representation of the primary data associated with the specified MediaNode suitable for display in the UI.\n        @param MediaNode the specified MediaNode\n        @return a string representation of the primary data associated with the specified MediaNode suitable for display in the UI\n        @since 7.0",
        "operationId": "GetNodePrimaryLabel",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaNode",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetNodeProperty": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaNodeAPI"
        ],
        "description": "Returns a specific property associated with this MediaNode. This varies depending upon the data type of the\n        MediaNode. For MediaFile based nodes this will end up calling GetMediaFileMetadata.\n        @param MediaNode the specified MediaNode\n        @param PropertyName the name of the property\n        @return the value of the specified property for the specified MediaNode\n        @since 7.0",
        "operationId": "GetNodeProperty",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaNode",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "PropertyName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetNodeSecondaryLabel": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaNodeAPI"
        ],
        "description": "Returns a string representation of the secondary data associated with the specified MediaNode suitable for display in the UI.\n        This will usually relate to whatever the current sorting technique is.\n        @param MediaNode the specified MediaNode\n        @return a string representation of the secondary data associated with the specified MediaNode suitable for display in the UI\n        @since 7.0",
        "operationId": "GetNodeSecondaryLabel",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaNode",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetNodeSortTechnique": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaNodeAPI"
        ],
        "description": "Returns the name of the current sorting technique used by the specified MediaNode hierarchy.\n        @param MediaNode the specified MediaNode\n        @return the name of the current sorting technique used by the specified MediaNode hierarchy.\n        @since 7.0",
        "operationId": "GetNodeSortTechnique",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaNode",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetNodeThumbnail": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaNodeAPI"
        ],
        "description": "Returns the thumbnail image associated with the specified MediaNode.\n        @param MediaNode the specified MediaNode\n        @return an Object which represents the thumbnail for this MediaNode; this may be a MetaImage or a resource path that can be used to load an image\n        @since 7.0",
        "operationId": "GetNodeThumbnail",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaNode",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetNodeTypePath": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaNodeAPI"
        ],
        "description": "Returns a string which represents the hierarchical path to this MediaNode with type information only. This is created by appending the data types\n        of all the parents up to the root of the hierarchy. The forward slash is used as a separator. For Virtual nodes, it will use F if it represents\n        a folder in the import hierarchy; otherwise it\u0027ll use the primary label unless that is null, in which case it\u0027ll use V.\n        @param MediaNode the specified MediaNode\n        @return a string which represents the hierarchical type path to this MediaNode\n        @since 7.0",
        "operationId": "GetNodeTypePath",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaNode",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetRelativeMediaSource": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaNodeAPI"
        ],
        "description": "Creates a MediaNode view with a relative root for a specified media source. This is currently only useable\n        with the \u0027Filesystem\u0027 media source\n        @param Name should be Filesystem; anything else will behave like the GetMediaSource API call\n        @param RelativeRoot the subdirectory which should be the root of this view\n        @return a MediaNode that represents the relative view of the specified media source\n        @since 7.0",
        "operationId": "GetRelativeMediaSource",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Name",
            "in": "query"
          },
          {
            "name": "2",
            "type": "#/definitions/Object",
            "required": true,
            "description": "RelativeRoot",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is MediaNode)",
            "schema": {
              "$ref": "#/definitions/MediaNode"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsMediaNodeObject": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaNodeAPI"
        ],
        "description": "Returns true if the specified object is a MediaNode object. No automatic type conversion will be performed on the argument.\n        @param Object the object to test to see if it is a MediaNode object\n        @return true if the argument is a MediaNode object, false otherwise\n        @since 7.1",
        "operationId": "IsMediaNodeObject",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "Object",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsNodeFilterMatching": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaNodeAPI"
        ],
        "description": "Returns the match state of the current filtering technique used by the specified MediaNode hierarchy. Since\n        multiple filters can be set; an index must be specified to determine which one to get the matching state of\n        @param MediaNode the specified MediaNode\n        @param FilterIndex the 0-based index of the filtering match state to retrieve\n        @return true if the current filtering technique used by the specified MediaNode hierarchy at the specified index is MatchPasses, false otherwise or if the index is out of bounds\n        @since 7.0",
        "operationId": "IsNodeFilterMatching",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaNode",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "FilterIndex",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsNodeFolder": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaNodeAPI"
        ],
        "description": "Returns true if the specified MediaNode has children\n        @param MediaNode the specified MediaNode\n        @return true if the specified MediaNode has children, false otherwise\n        @since 7.0",
        "operationId": "IsNodeFolder",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaNode",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsNodeHierarchyRealized": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaNodeAPI"
        ],
        "description": "Returns true if the entire set of data objects that back this MediaNode hierarchy has already been realized.\n        This will be true for fixed sets of data; but false for abstractions like the filesystem. When this is true the\n        API call GetAllNodeDescendants will return a valid result.\n        @param MediaNode the specified MediaNode\n        @return true if the entire set of data objects that back this MediaNode hierarchy has already been realized, false otherwise\n        @since 7.0",
        "operationId": "IsNodeHierarchyRealized",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaNode",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsNodePlayable": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaNodeAPI"
        ],
        "description": "Returns true if the Object that this MediaNode wraps is suitable for passing to the Watch API call.\n        @param MediaNode the specified MediaNode\n        @return true if the Object that this MediaNode wraps is suitable for passing to the Watch API call\n        @since 7.0",
        "operationId": "IsNodePlayable",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaNode",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsNodeSortAscending": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaNodeAPI"
        ],
        "description": "Returns true if the current sorting technique used by the specified MediaNode hierarchy is in ascending order, false otherwise\n        @param MediaNode the specified MediaNode\n        @return true if the current sorting technique used by the specified MediaNode hierarchy is in ascending order, false otherwise\n        @since 7.0",
        "operationId": "IsNodeSortAscending",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaNode",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsNodeVirtual": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaNodeAPI"
        ],
        "description": "Returns true if the specified MediaNode doesn\u0027t wrap an actual data object; but just an abstraction of a hierarchy\n        @param MediaNode the specified MediaNode\n        @return true if the specified MediaNode doesn\u0027t wrap an actual data object; but just an abstraction of a hierarchy\n        @since 7.0",
        "operationId": "IsNodeVirtual",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaNode",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dRefreshNode": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaNodeAPI"
        ],
        "description": "Refreshes the hierarchy associated with the specified MediaNode.\n        @param MediaNode the specified MediaNode\n        @since 7.0",
        "operationId": "RefreshNode",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaNode",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetAllChildrenChecked": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaNodeAPI"
        ],
        "description": "Sets a flag on all the children of this MediaNode to indicate they are in the checked state. Useful for tracking multi-selection of\n        child MediaNodes.\n        @param MediaNode the specified MediaNode\n        @param State true if all the children of the MediaNode should be marked as being in the checked state, false if they should be marked as unchecked\n        @since 7.0",
        "operationId": "SetAllChildrenChecked",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaNode",
            "in": "query"
          },
          {
            "name": "2",
            "type": "boolean",
            "required": true,
            "description": "State",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetNodeChecked": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaNodeAPI"
        ],
        "description": "Sets a flag on this MediaNode to indicate it is in the checked state. Useful for tracking multi-selection of\n        child MediaNodes.\n        @param MediaNode the specified MediaNode\n        @param State true if the MediaNode should be marked as being in the checked state, false otherwise\n        @since 7.0",
        "operationId": "SetNodeChecked",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaNode",
            "in": "query"
          },
          {
            "name": "2",
            "type": "boolean",
            "required": true,
            "description": "State",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetNodeFilter": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaNodeAPI"
        ],
        "description": "Sets the filtering techniques used by the specified MediaNode hierarchy. This effects all levels of the hierarchy.\n        Filters can either be inclusive or exclusive. This method will clear all other filters and set this as the only filter.\n        Valid filtering technique names are: Directories, Pictures, Videos, Music, DVD, BluRay, TV, Watched, Archived, DontLike, Favorite,\n        HDTV, ManualRecord, FirstRun, CompleteRecording\n        @param MediaNode the specified MediaNode\n        @param Technique the name of the filtering technique to use, case insensitive\n        @param MatchPasses true if the items matching the filter should be retained, false if matching items should be removed\n        @since 7.0",
        "operationId": "SetNodeFilter",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaNode",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Technique",
            "in": "query"
          },
          {
            "name": "3",
            "type": "boolean",
            "required": true,
            "description": "MatchPasses",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetNodeSort": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaNodeAPI"
        ],
        "description": "Sets the sorting technique used by the specified MediaNode hierarchy. This effects all levels of the hierarchy.\n        MediaNodes that are folders are always listed first when sorting. Some of the sorting techniques\n        can also ignore \u0027the\u0027 as a prefix; this is controlled by the property \"ui/ignore_the_when_sorting\" which defaults to true.\n        Valid sorting technique names are: Date, Size, Name (can ignore the), Filename, Track, Duration, Title (can ignore the),\n        Artist (can ignore the), Album (can ignore the), Category, Year, Rating, Count, EpisodeName, EpisodeID, Rated, Runtime,\n        Studio (can ignore the), Fullpath, OriginalAirDate, ChannelName, Intelligent\n        @param MediaNode the specified MediaNode\n        @param Technique the name of the sorting technique to use, case insensitive\n        @param Ascending true if the sorting should occur in ascending order, false otherwise\n        @since 7.0",
        "operationId": "SetNodeSort",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "MediaNode",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Technique",
            "in": "query"
          },
          {
            "name": "3",
            "type": "boolean",
            "required": true,
            "description": "Ascending",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dApplyRelativeSubtitleAdjustment": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Adjusts the timing for subtitle display by increasing/decreasing the delay so that the sub at the relative SubCount position\n        would be currently displayed.\n        @param SubCount the relative position from the current sub of the sub that should be displayed now\n        @return the value in milliseconds of the current subtitle delay (same as return from GetSubtitleDelay())\n        @since 6.6",
        "operationId": "ApplyRelativeSubtitleAdjustment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "integer",
            "required": true,
            "description": "SubCount",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dCanAdjustSubtitleTiming": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Returns true if the subtitles for the currently loaded file can have their timing adjusted. This is true for subtitles\n        that come from external files\n        @return true if the subtitles for the currently loaded file can have their timing adjusted; false otherwise\n        @since 6.6",
        "operationId": "CanAdjustSubtitleTiming",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dChannelDown": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Performs a logical channel down in the MediaPlayer. This only has effect if the content that is\n        currently being viewed has the concept of channels, tracks, chapters, etc.",
        "operationId": "ChannelDown",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dChannelSet": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Performs a logical channel set in the MediaPlayer. This only has effect if the content that is\n        currently being viewed has the concept of channels, tracks, chapters, etc.\n        @param ChannelNumber the new channel/track/chapter to playback",
        "operationId": "ChannelSet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "ChannelNumber",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dChannelUp": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Performs a logical channel up in the MediaPlayer. This only has effect if the content that is\n        currently being viewed has the concept of channels, tracks, chapters, etc.",
        "operationId": "ChannelUp",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dClearRecentChannels": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Clears the list of recently viewed channels.\n        @since 8.0",
        "operationId": "ClearRecentChannels",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dCloseAndWaitUntilClosed": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Closes the file that is currently loaded by the MediaPlayer and waits for the MediaPlayer to\n        completely free all of its resources before returning.",
        "operationId": "CloseAndWaitUntilClosed",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dDVDAngleChange": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Sets the \u0027Angle\u0027 for playback of the current DVD content. The number of angels\n        are obtained from a call to {@link #GetDVDNumberOfAngles GetDVDNumberOfAngles()}.\n        If no arguments are given to this function then the current angle will be changed to the next available angle\n        @param AngleNum the 1-based index that indicates which angle should be used for playback",
        "operationId": "DVDAngleChange",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "integer",
            "required": true,
            "description": "AngleNum",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dDVDAudioChange": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Sets the audio language that should be used in the current DVD content. The names of the languages\n        are obtained from a call to {@link #GetDVDAvailableLanguages GetDVDAvailableLanguages()}.\n        If no arguments are given to this function then the current audio language will be changed to the next available language\n        @param AudioNum the 0-based index into the list of audio languages that should be used",
        "operationId": "DVDAudioChange",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "integer",
            "required": true,
            "description": "AudioNum",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dDVDChapterNext": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Informs the MediaPlayer to start playback of the next chapter in the current DVD content.",
        "operationId": "DVDChapterNext",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dDVDChapterPrevious": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Informs the MediaPlayer to start playback of the previous chapter in the current DVD content.",
        "operationId": "DVDChapterPrevious",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dDVDChapterSet": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Informs the MediaPlayer to start playback of the specified chapter in the current DVD content.\n        @param ChapterNumber the chapter number to start playback of in the current DVD",
        "operationId": "DVDChapterSet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "integer",
            "required": true,
            "description": "ChapterNumber",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dDVDEnter": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Performs the \u0027Enter\u0027 operation when using a menu system in DVD content.",
        "operationId": "DVDEnter",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dDVDMenu": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Performs the \u0027Menu\u0027 operation when playing back a DVD which should bring up the root menu of the DVD",
        "operationId": "DVDMenu",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dDVDReturn": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Performs the \u0027Return\u0027 operation when playing back a DVD which should bring the user back to the last DVD menu they were at",
        "operationId": "DVDReturn",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dDVDSubtitleChange": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Sets the subtitle that should be displayed in the current DVD content. The names of the languages for the\n        corresponding subtitles are obtained from a call to {@link #GetDVDAvailableSubpictures GetDVDAvailableSubpictures()}.\n        If no arguments are given to this function then the currently displayed subtitle will be changed to the next one\n        @param SubtitleNum the 0-based index into the list of subtitles that should be displayed",
        "operationId": "DVDSubtitleChange",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "integer",
            "required": true,
            "description": "SubtitleNum",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dDVDSubtitleToggle": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Toggles the state for subtitle display in the DVD content being played back.",
        "operationId": "DVDSubtitleToggle",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dDVDTitleMenu": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Performs the \u0027Menu\u0027 operation when playing back a DVD which should bring up the title menu of the DVD",
        "operationId": "DVDTitleMenu",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dDVDTitleNext": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Informs the MediaPlayer to start playback of the next title in the current DVD content.",
        "operationId": "DVDTitleNext",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dDVDTitlePrevious": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Informs the MediaPlayer to start playback of the previous title in the current DVD content.",
        "operationId": "DVDTitlePrevious",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dDirectPlaybackControl": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Submits an explicit playback control request to the MediaPlayer if it supports it. (Only DVD-based media players support this call)\n        @param Code this is the value of the control command to be sent to the player, must be one of the following:\n               MENU \u003d 201; Param1 should be 1 for title, 2 for root\n               TITLE_SET \u003d 202; Param1 should be the title number\n               CHAPTER_SET \u003d 205; Param1 should be the chapter number\n               CHAPTER_NEXT \u003d 206;\n               CHAPTER_PREV \u003d 207;\n               ACTIVATE_CURRENT \u003d 208;\n               RETURN \u003d 209;\n               BUTTON_NAV \u003d 210; Param1 should be 1(up), 2(right), 3(down) or 4(left)\n               MOUSE_HOVER \u003d 211; Param1 should be x and Param2 should be y\n               MOUSE_CLICK \u003d 212; Param1 should be x and Param2 should be y\n               ANGLE_CHANGE \u003d 213; Param1 should be the angle number (1-based)\n               SUBTITLE_CHANGE \u003d 214; Param1 should be the subtitle number (0-based)\n               SUBTITLE_TOGGLE \u003d 215;\n               AUDIO_CHANGE \u003d 216; Param1 should be the audio number (0-based)\n        @param Param1 the first parameter for the control command (see above)\n        @param Param2 the second parameter for the control command (see above)",
        "operationId": "DirectPlaybackControl",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "integer",
            "required": true,
            "description": "Code",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "Param1",
            "in": "query"
          },
          {
            "name": "3",
            "type": "integer",
            "required": true,
            "description": "Param2",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dDoesCurrentMediaFileHaveVideo": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Returns true if the MediaPlayer has a file loading or loaded that has video content in it\n        @return true if the MediaPlayer has a file loading or loaded that has video content in it, false otherwise",
        "operationId": "DoesCurrentMediaFileHaveVideo",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAvailableSeekingEnd": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Gets the latest time that the current media can be seeked to using the {@link #Seek Seek()} call. This\n        will be in absolute time.\n        @return the latest time that the current media can be seeked to in milliseconds",
        "operationId": "GetAvailableSeekingEnd",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAvailableSeekingStart": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Gets the earliest time that the current media can be seeked to using the {@link #Seek Seek()} call. This\n        will be in absolute time.\n        @return the earliest time that the current media can be seeked to in milliseconds",
        "operationId": "GetAvailableSeekingStart",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetBluRayTitleDescription": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Returns a description of the specified title number if playing back a BluRay. This description will have\n        the total unique duration of the specified title and an asterisk if it is considered to be the \u0027main\u0027 title.\n        @param TitleNum the title number (1-based) to retrieve a description of\n        @return a description of the specified title number if playing back a BluRay; the empty string otherwise\n        @since 7.0",
        "operationId": "GetBluRayTitleDescription",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "integer",
            "required": true,
            "description": "TitleNum",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetCurrentMediaFile": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Returns the MediaFile object that is currently loaded (or loading) by the MediaPlayer\n        @return the MediaFile object that is currently loaded (or loading) by the MediaPlayer",
        "operationId": "GetCurrentMediaFile",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (value type is MediaFile)",
            "schema": {
              "$ref": "#/definitions/MediaFile"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetCurrentMediaTitle": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Returns the title of the content that is currently loaded by the MediaPlayer.\n        @return the title of the content that is currently loaded by the MediaPlayer",
        "operationId": "GetCurrentMediaTitle",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetCurrentPlaylist": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Returns the current Playlist that is being played back by the MediaPlayer. Playlists can be played back\n        using the call {@link #StartPlaylist StartPlaylist()}\n        @return the current Playlist that is being played back by the MediaPlayer, null otherwise",
        "operationId": "GetCurrentPlaylist",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (value type is Playlist)",
            "schema": {
              "$ref": "#/definitions/Playlist"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetCurrentPlaylistIndex": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Returns the 0-based index into the root Playlist that is currently being played back by the MediaPlayer. 0 is returned\n        if no Playlist is currently being played back.\n        @return the 0-based index into the root Playlist that is currently being played back by the MediaPlayer. 0 is returned\n                  if no Playlist is currently being played back.",
        "operationId": "GetCurrentPlaylistIndex",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetDVDAvailableLanguages": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Gets a list of all of the audio languages that are currently available in the current DVD content\n        @return a list of all of the audio languages that are currently available in the current DVD content",
        "operationId": "GetDVDAvailableLanguages",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetDVDAvailableSubpictures": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Gets a list of all of the subtitles that are currently available in the current DVD content\n        @return a list of all of the subtitles that are currently available in the current DVD content",
        "operationId": "GetDVDAvailableSubpictures",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetDVDCurrentAngle": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Gets the current angle number that is being played back for DVD content\n        @return the current angle number that is being played back for DVD content",
        "operationId": "GetDVDCurrentAngle",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetDVDCurrentChapter": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Gets the current chapter number that is being played back for DVD content.\n        @return the current chapter number that is being played back for DVD content",
        "operationId": "GetDVDCurrentChapter",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetDVDCurrentDomain": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Gets the current \u0027domain\u0027 that the DVD playback is in.\n        @return the current \u0027domain\u0027 that the DVD playback is in, uses the following values:\n                1 \u003d DVD initialization, 2 \u003d disc menus, 3 \u003d title menus, 4 \u003d playback, 5 \u003d stopped",
        "operationId": "GetDVDCurrentDomain",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetDVDCurrentLanguage": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Gets the current audio playback language that is being used for the current DVD content\n        @return the current audio playback language that is being used for the current DVD content",
        "operationId": "GetDVDCurrentLanguage",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetDVDCurrentSubpicture": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Gets the current subtitle that is being used for the current DVD content\n        @return the current subtitle that is being used for the current DVD content, null if subtitles are currently disabled",
        "operationId": "GetDVDCurrentSubpicture",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetDVDCurrentTitle": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Gets the current title number that is being played back for DVD content.\n        @return the current title number that is being played back for DVD content, 0 otherwise",
        "operationId": "GetDVDCurrentTitle",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetDVDNumberOfAngles": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Gets the total number of angles that are currently available to select from in the current DVD content\n        @return the total number of angles that are currently available to select from in the current DVD content",
        "operationId": "GetDVDNumberOfAngles",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetDVDNumberOfChapters": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Gets the total number of chapters in the current title in the current DVD content\n        @return the total number of chapters in the current title in the current DVD content",
        "operationId": "GetDVDNumberOfChapters",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetDVDNumberOfTitles": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Gets the total number of titles in the current DVD content\n        @return the total number of titles in the current DVD content",
        "operationId": "GetDVDNumberOfTitles",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetMediaDuration": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Returns the duration of the currently loaded MediaFile in milliseconds.\n        @return the duration of the currently loaded MediaFile in milliseconds",
        "operationId": "GetMediaDuration",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetMediaPlayerClosedCaptionState": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Gets the current state that MediaPlayer close captioning is set to use. This can be either a localized\n        version of \"Captions Off\" or one of the strings: \"CC1\", \"CC2\", \"Text1\", \"Text2\"\n        @return the current state that MediaPlayer close captioning is set to use",
        "operationId": "GetMediaPlayerClosedCaptionState",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetMediaTime": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Gets the current playback time of the MediaPlayer. For DVD content this time will return a value appropriate for\n        a current time display (starting at zero). For all other content types, this value will be the time in java.lang.System.currentTimeMillis() units\n        and is relative to the start time of the Airing metadata which represents the currently loaded file. So for a current time display you\n        should subtract the airing start time of the current media file from the returned value.\n        @return the current playback time of the MediaPlayer in milliseconds",
        "operationId": "GetMediaTime",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPlaybackRate": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Returns the current playback rate as a floating point number. 1.0 is normal speed forward playback.\n        Negative numbers indicate reverse playback.\n        @return the current playback rate of the MediaPlayer",
        "operationId": "GetPlaybackRate",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetRawMediaTime": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Gets the current playback time of the MediaPlayer. This is the current playback time relative to the\n        start of the current playing file. For multiple segment files; this will be relative to the start of the currently\n        playing segment. This is intended to be used by plugin developers for linking events with the media time in the file.\n        @return the current playback time of the MediaPlayer in milliseconds\n        @since 7.0",
        "operationId": "GetRawMediaTime",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetRecentChannels": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Returns an array of recently viewed channels. This tracks channels viewed from any mechanism; live or DVR\u0027d.\n        @return an array of the most recently viewed channels, most recently viewed are at the head of the array\n        @since 8.0",
        "operationId": "GetRecentChannels",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Channel"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSubtitleDelay": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Gets the delay in milliseconds that is applied to external subtitle files when they are used during playback (can be positive or negative)\n        @return the delay in milliseconds that is applied to external subtitle files when they are used during playback.\n        @since 6.6",
        "operationId": "GetSubtitleDelay",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetVideoSnapshot": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Returns an image which is a frame grab of the currently rendered video frame. This is currently only\n        supported on Windows when using VMR9 with 3D acceleration\n        @return a java.awt.image.BufferedImage which holds the last rendered video frame, or null if the call cannot be completed",
        "operationId": "GetVideoSnapshot",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (value type is java.awt.image.BufferedImage)",
            "schema": {
              "$ref": "#/definitions/java.awt.image.BufferedImage"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetVolume": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Returns the current volume level of the MediaPlayer. If no MediaPlayer is loaded this will return\n        the system volume.\n        @return the current volume level of the MediaPlayer; if no MediaPlayer is loaded this will return\n                the system volume. The value will be between 0.0 and 1.0",
        "operationId": "GetVolume",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dHasMediaFile": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Returns true if the MediaPlayer currently has a file that is loading or loaded.\n        @return true if the MediaPlayer currently has a file that is loading or loaded, false otherwise",
        "operationId": "HasMediaFile",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsCorrectParentalLockCode": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Returns true if the argument passed in matches the parental lock code in the system\n        @param ParentalLockCode the code to test\n        @return true if the specified ParentalLockCode matches the parental lock code SageTV is configured to use",
        "operationId": "IsCorrectParentalLockCode",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "ParentalLockCode",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsCurrentMediaFileDVD": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Returns true if the MediaPlayer has a file loading or loaded, and that file is a DVD\n        @return true if the MediaPlayer has a file loading or loaded, and that file is a DVD",
        "operationId": "IsCurrentMediaFileDVD",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsCurrentMediaFileMusic": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Returns true if the MediaPlayer has a file loading or loaded, and that file is a music file\n        @return true if the MediaPlayer has a file loading or loaded, and that file is a music file",
        "operationId": "IsCurrentMediaFileMusic",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsCurrentMediaFileRecording": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Returns true if the MediaPlayer has a file loading or loaded, and that file is currently being recorded\n        @return true if the MediaPlayer has a file loading or loaded, and that file is currently being recorded",
        "operationId": "IsCurrentMediaFileRecording",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsMediaPlayerFullyLoaded": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Returns true if the MediaPlayer is fully loaded. This means it has the meta information for the\n        file loaded as well as the native media player.\n        @return true if the MediaPlayer is fully loaded, false otherwise",
        "operationId": "IsMediaPlayerFullyLoaded",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsMediaPlayerLoading": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Returns true if the MediaPlayer is loading. This is true from the point that a Watch() API call\n        is made until the point that the native media player is loaded or there is a failure loading the file.\n        @return true if the MediaPlayer is loading, false otherwise",
        "operationId": "IsMediaPlayerLoading",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsMediaPlayerSignalLost": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Returns true if the source the MediaPlayer is trying to playback from indicates a signal loss.\n        This can happen when trying to watch digital TV stations.\n        @return true if the MediaPlayer detects signal loss from the source it\u0027s playing back, false otherwise",
        "operationId": "IsMediaPlayerSignalLost",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsMuted": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Returns true if the MediaPlayer is currently in a muted state. This will not affect the system volume.\n        @return true if the MediaPlayer is muted, false otherwise",
        "operationId": "IsMuted",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsPlaying": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Returns true if the MediaPlayer is currently playing back content (i.e. content is fully loaded and not in the paused state)\n        @return true if the MediaPlayer is currently playing back content, false otherwise",
        "operationId": "IsPlaying",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsShowingDVDMenu": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Returns true if the MediaPlayer currently has DVD content loaded and that content is showing a DVD menu that can have user interaction\n        @return true if the MediaPlayer currently has DVD content loaded and that content is showing a DVD menu that can have user interaction, false otherwise",
        "operationId": "IsShowingDVDMenu",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dLockTuner": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Instructs SageTV to take control of the specified CaptureDeviceInput. The device may then be used\n        for channel scanning. This will cause any prompts to occur that are a result of taking control of the device.\n        When done using it; CloseAndWaitUntilClosed() should be called.\n        @param CaptureDeviceInput the capture input to control\n        @return true if the request was successful, a localized error message otherwise\n        @since 6.6",
        "operationId": "LockTuner",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDeviceInput",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dPause": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Pauses playback in the MediaPlayer. If the MediaPlayer is currently paused this will perform a frame step.",
        "operationId": "Pause",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dPlay": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Resumes playback in the MediaPlayer. If the MediaPlayer is playing at a speed other than x1, the playback speed will be\n        reset to x1.",
        "operationId": "Play",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dPlayFaster": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Sets the playback rate of the MediaPlayer to be twice the current playback rate. Not supported\n        on all platforms or with all media formats.",
        "operationId": "PlayFaster",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dPlayPause": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Pauses playback of the MediaPlayer if it is currently playing or resumes playback of the MediaPlayer\n        if it is currently paused.",
        "operationId": "PlayPause",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dPlaySlower": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Sets the playback rate of the MediaPlayer to be half the current playback rate. Not supported\n        on all platforms or with all media formats.",
        "operationId": "PlaySlower",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dReloadCurrentFile": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Reloads the current file that is loaded by the MediaPlayer. This is useful when changing configuration options\n        for the MediaPlayer and then showing playback with those changes.",
        "operationId": "ReloadCurrentFile",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSeek": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Performs a time seek in the MediaPlayer to the specified time. This time is relative to the\n        start time of the metadata for the MediaFile unless a DVD is being played back. In the case of a DVD\n        the time is absolute.\n        @param Time the time to seek the MediaPlayer to in milliseconds",
        "operationId": "Seek",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "integer",
            "required": true,
            "description": "Time",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetMediaPlayerClosedCaptionState": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Sets the current state that MediaPlayer close captioning should use. This can be one of the strings: \"CC1\", \"CC2\", \"Text1\", \"Text2\".\n        If any other value is used then closed captioning will be turned off.\n        @param CCType the new state that MediaPlayer close captioning should use",
        "operationId": "SetMediaPlayerClosedCaptionState",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CCType",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetMute": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Sets the mute state for the MediaPlayer. This does not affect the system volume.\n        @param Muted true if the MediaPlayer should be muted, false otherwise",
        "operationId": "SetMute",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "boolean",
            "required": true,
            "description": "Muted",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetPlaybackRate": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Sets the playback rate of the MediaPlayer to the specified value. 1.0 is normal speed forward playback.\n        Negative numbers indicate reverse playback. Not all values are supported on all platforms or for all formats.\n        @param PlaybackRate the playback rate to set the MediaPlayer to",
        "operationId": "SetPlaybackRate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "float",
            "required": true,
            "description": "PlaybackRate",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetSubtitleDelay": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Sets the delay in milliseconds that is applied to external subtitle files when they are used during playback (can be positive or negative)\n        @param DelayMsec the delay in milliseconds that is applied to external subtitle files when they are used during playback\n        @since 6.6",
        "operationId": "SetSubtitleDelay",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "integer",
            "required": true,
            "description": "DelayMsec",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetVideoAlwaysOnTop": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Sets the video portion of SageTV to always be on top of other windows in the desktop (Windows only).\n        @param OnTop true if the video window of SageTV should be on top of all other windows in the system, false otherwise",
        "operationId": "SetVideoAlwaysOnTop",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "boolean",
            "required": true,
            "description": "OnTop",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetVolume": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Explicitly sets the volume in the MediaPlayer to be the specified amount. This should be between 0.0 and 1.0\n        This may also effect the \u0027system\u0027 volume depending upon the configuration of SageTV.\n        @param Amount the level to set the volume to",
        "operationId": "SetVolume",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "float",
            "required": true,
            "description": "Amount",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSkipBackwards": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Performs a time seek backwards in the MediaPlayer. The amount of time skipped will be equivalent\n        to the value of the property videoframe/rew_time in milliseconds. (the default is 10 seconds)",
        "operationId": "SkipBackwards",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSkipBackwards2": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Performs a time seek backwards in the MediaPlayer. The amount of time skipped will be equivalent\n        to the value of the property videoframe/rew_time2 in milliseconds. (the default is 2 1/2 minutes)",
        "operationId": "SkipBackwards2",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSkipForward": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Performs a time seek forward in the MediaPlayer. The amount of time skipped will be equivalent\n        to the value of the property videoframe/ff_time in milliseconds. (the default is 10 seconds)",
        "operationId": "SkipForward",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSkipForward2": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Performs a time seek forward in the MediaPlayer. The amount of time skipped will be equivalent\n        to the value of the property videoframe/ff_time2 in milliseconds. (the default is 2 1/2 minutes)",
        "operationId": "SkipForward2",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dStartPlaylist": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Starts playback of the specified Playlist. The MediaPlayer will playback everything in the Playlist\n        sequentially until it is done.\n        @param Playlist the Playlist to being playback of\n        @return true if the request was successful, a localized error message otherwise (failure will only occur due to parental control issues)",
        "operationId": "StartPlaylist",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Playlist",
            "required": true,
            "description": "Playlist",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dStartPlaylistAt": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Starts playback of the specified Playlist. The MediaPlayer will playback everything in the Playlist\n        sequentially until it is done. Playback will begin at the item at the specified by the passed in index.\n        @param Playlist the Playlist to being playback of\n        @param StartIndex the index in the playlist to start playing at (1-based index)\n        @return true if the request was successful, a localized error message otherwise (failure will only occur due to parental control issues)",
        "operationId": "StartPlaylistAt",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Playlist",
            "required": true,
            "description": "Playlist",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "StartIndex",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dVolumeAdjust": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Adjusts the volume in the MediaPlayer be the specified amount. The overall volume for the\n        player is between 0.0 and 1.0. This may also effect the \u0027system\u0027 volume depending upon the\n        configuration of SageTV.\n        @param Amount the amount to adjust the volume by",
        "operationId": "VolumeAdjust",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "float",
            "required": true,
            "description": "Amount",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dVolumeDown": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Decreases the volume in the MediaPlayer. This may also effect the \u0027system\u0027 volume depending upon the\n        configuration of SageTV.",
        "operationId": "VolumeDown",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dVolumeUp": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Increases the volume in the MediaPlayer. This may also effect the \u0027system\u0027 volume depending upon the\n        configuration of SageTV.",
        "operationId": "VolumeUp",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dWatch": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Instructs SageTV to playback the specified media content. The argument can be either an\n        Airing, a MediaFile or a file path.  For Airings, it can correspond to a MediaFile (which has the\n        same effect as just calling this with the MediaFile itself) or it can correspond to a live\n        television Airing. For live TV airings, the appropriate work will be done to tune, record and start\n        playback of the requested content.  For MediaFiles or file paths, this will simply playback the specified content.\n        @param Content the Airing, MediaFile or file path to being playback of\n        @return true if the request was successful, a localized error message otherwise",
        "operationId": "Watch",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "Content",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dWatchLive": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Instructs SageTV to begin playback of content streamed from the specified CaptureDeviceInput. The content\n        may or may not be buffered to a file first depending upon the PauseBufferSize parameter as well as the\n        capabilities of the capture hardware and the network configuration.  The channel to view is also\n        specified in this form of the call. NOTE: This is NOT the same as jumping\n        to live when playing back buffered TV content; to do that simply call Seek(Time())\n        @param CaptureDeviceInput the capture input to playback content directly from\n        @param PauseBufferSize the size in bytes of the buffer SageTV should use to buffer the content for playback, this will\n                also allow pausing of this stream upto the size of the PauseBuffer; use 0 to request no buffering\n                (although SageTV may still decide to use buffering if it deems it necessary)\n        @param PhysicalChannel the physical channel number that should be tuned to before starting viewing\n        @return true if the request was successful, a localized error message otherwise\n        @since 6.6",
        "operationId": "WatchLive",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CaptureDeviceInput",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "PauseBufferSize",
            "in": "query"
          },
          {
            "name": "3",
            "type": "string",
            "required": true,
            "description": "PhysicalChannel",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dWatchLocalFile": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "MediaPlayerAPI"
        ],
        "description": "Instructs SageTV to playback the specified file path that\u0027s local to this client\n        @param file path to playback\n        @return true if the request was successful, a localized error message otherwise\n        @since 6.4",
        "operationId": "WatchLocalFile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "file",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPersonBirthplace": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PersonAPI"
        ],
        "description": "Returns a String representing the birthplace of the specified person, empty string if unknown\n        @param Person the Person object\n        @return a String representing the birthplace of the specified person, empty string if unknown\n        @since 8.0",
        "operationId": "GetPersonBirthplace",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Person",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPersonDateOfBirth": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PersonAPI"
        ],
        "description": "Returns a String representing the birthdate of the specified person, empty string if unknown\n        @param Person the Person object\n        @return a String representing the birthdate of the specified person, empty string if unknown\n        @since 8.0",
        "operationId": "GetPersonDateOfBirth",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Person",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPersonDateOfDeath": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PersonAPI"
        ],
        "description": "Returns a String representing the date of the specified person\u0027s death, empty string if unknown\n        @param Person the Person object\n        @return a String representing the date of the specified person\u0027s death, empty string if unknown\n        @since 8.0",
        "operationId": "GetPersonDateOfDeath",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Person",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPersonForID": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PersonAPI"
        ],
        "description": "Returns the Person object that corresponds to the passed in ID. The ID should have been obtained from a call to {@link #GetPersonID GetPersonID()}\n        @param PersonID the Person id\n        @return the Person object that corresponds to the passed in ID\n        @since 8.1",
        "operationId": "GetPersonForID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "integer",
            "required": true,
            "description": "PersonID",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Person)",
            "schema": {
              "$ref": "#/definitions/Person"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPersonID": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PersonAPI"
        ],
        "description": "Returns the unique ID used to identify this Person. Can get used later on a call to {@link #GetPersonForID GetPersonForID()}\n        @param Person the Person object\n        @return the unique ID used to identify this Person\n        @since 8.1",
        "operationId": "GetPersonID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Person",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPersonImage": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PersonAPI"
        ],
        "description": "Returns the image for the specified person\n        @param Person the Person object\n        @param Thumb true if a thumbnail is desired, false if a full size image is desired\n        @return a MetaImage object representing the requested image, null if one does not exist\n        @since 8.0",
        "operationId": "GetPersonImage",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Person",
            "in": "query"
          },
          {
            "name": "2",
            "type": "boolean",
            "required": true,
            "description": "Thumb",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is MetaImage)",
            "schema": {
              "$ref": "#/definitions/MetaImage"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPersonImageURL": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PersonAPI"
        ],
        "description": "Returns the image URL for the specified person\n        @param Person the Person object\n        @param Thumb true if a thumbnail is desired, false if a full size image is desired\n        @return a URL representing the requested image, null if one does not exist\n        @since 8.0",
        "operationId": "GetPersonImageURL",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Person",
            "in": "query"
          },
          {
            "name": "2",
            "type": "boolean",
            "required": true,
            "description": "Thumb",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dHasPersonImage": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PersonAPI"
        ],
        "description": "Returns true if the passed in Person has an image associated with them\n        @param Person the Person object\n        @return true if the passed in Person has an image associated with them, false otherwise\n        @since 8.0",
        "operationId": "HasPersonImage",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Person",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsPersonObject": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PersonAPI"
        ],
        "description": "Returns true if the specified object is a Person object. No automatic type conversion will be performed on the argument.\n        @param Object the object to test to see if it is a Person object\n        @return true if the argument is a Person object, false otherwise\n        @since 9.0",
        "operationId": "IsPersonObject",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "Object",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dAddPlaylist": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PlaylistAPI"
        ],
        "description": "Creates a new Playlist object\n        @param Name the name for the new Playlist\n        @return the newly created Playlist",
        "operationId": "AddPlaylist",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Playlist)",
            "schema": {
              "$ref": "#/definitions/Playlist"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dAddToPlaylist": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PlaylistAPI"
        ],
        "description": "Adds the specified item to this Playlist. The item may be either an Airing, Album, MediaFile or another Playlist.\n        @param Playlist the Playlist object to add the new item to\n        @param NewItem the new item to add to the Playlist; must be an Airing, Album, MediaFile or Playlist",
        "operationId": "AddToPlaylist",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Playlist",
            "in": "query"
          },
          {
            "name": "2",
            "type": "#/definitions/Object",
            "required": true,
            "description": "NewItem",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dDoesPlaylistHaveVideo": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PlaylistAPI"
        ],
        "description": "Returns true if the specified Playlist contains any video files, false otherwise\n        @param Playlist the Playlist object\n        @return true if the specified Playlist contains any video files, false otherwise\n        @since 5.1",
        "operationId": "DoesPlaylistHaveVideo",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Playlist",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetName": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PlaylistAPI"
        ],
        "description": "Gets the name of the specified Playlist\n        @param Playlist the Playlist object\n        @return the name of the specified Playlist",
        "operationId": "GetName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Playlist",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetNowPlayingList": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PlaylistAPI"
        ],
        "description": "Returns the \u0027Now Playing\u0027 playlist. This can be used as a local, client-specific playlist which\n        songs can be added to and then played as a temporary set of songs. i.e. usually playlists are shared between\n        all of the clients that are connected to a SageTV system, but this one is NOT shared\n        @return the Playlist object to use as the \u0027Now Playing\u0027 list\n       \n        @since 5.1",
        "operationId": "GetNowPlayingList",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (value type is Playlist)",
            "schema": {
              "$ref": "#/definitions/Playlist"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetNumberOfPlaylistItems": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PlaylistAPI"
        ],
        "description": "Gets the number of items in the specified Playlist\n        @param Playlist the Playlist object\n        @return the number of items in the specified Playlist",
        "operationId": "GetNumberOfPlaylistItems",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Playlist",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPlaylistItemAt": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PlaylistAPI"
        ],
        "description": "Gets the item in this Playlist at the specified index\n        @param Playlist the Playlist object\n        @param Index the 0-based index into the playlist to get the item from\n        @return the item at the specified index in the Playlist; this will be an Airing, Album, Playlist or null",
        "operationId": "GetPlaylistItemAt",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Playlist",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "Index",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPlaylistItemTypeAt": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PlaylistAPI"
        ],
        "description": "Gets the type of item in the Playlist at the specified index\n        @param Playlist the Playlist object\n        @param Index the 0-based index into the Playlist to get the item type for\n        @return the type of item at the specified index in the Playlist; one of \"Airing\", \"Album\", \"Playlist\" or \"\" (\"Airing\" is used for MediaFile items), \"MediaFile\" will be returned for temporary MediaFile objects that are not in the database",
        "operationId": "GetPlaylistItemTypeAt",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Playlist",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "Index",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPlaylistItems": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PlaylistAPI"
        ],
        "description": "Gets the list of items in the specified Playlist\n        @param Playlist the Playlist object\n        @return a list of the items in the specified Playlist",
        "operationId": "GetPlaylistItems",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Playlist",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Object"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPlaylistProperties": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PlaylistAPI"
        ],
        "description": "Returns a java.util.Properties object that has all of the user-set properties for this Playlist in it.\n        @param Playlist the Playlist object\n        @return a java.util.Properties object that has all of the user-set properties for this Playlist in it; this is a copy of the original one so it is safe to modify it\n        @since 7.1",
        "operationId": "GetPlaylistProperties",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Playlist",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is java.util.Properties)",
            "schema": {
              "$ref": "#/definitions/java.util.Properties"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPlaylistProperty": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PlaylistAPI"
        ],
        "description": "Returns a property value for a specified Playlist. This must have been set using SetPlaylistProperty.\n        Returns the empty string when the property is undefined.\n        @param Playlist the Playlist object\n        @param PropertyName the name of the property\n        @return the property value for the specified Playlist, or the empty string if it is not defined\n        @since 7.0",
        "operationId": "GetPlaylistProperty",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Playlist",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "PropertyName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPlaylists": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PlaylistAPI"
        ],
        "description": "Gets a list of all of the Playlists in the database\n        @return a list of all of the Playlists in the database",
        "operationId": "GetPlaylists",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Playlist"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dInsertIntoPlaylist": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PlaylistAPI"
        ],
        "description": "Inserts a new item into the specified Playlist at the specified position.\n        @param Playlist the Playlist object to add the new item to\n        @param InsertIndex the 0-based index that the new item should be inserted at\n        @param NewItem the new item to insert into the Playlist; must be an Airing, Album, MediaFile or Playlist",
        "operationId": "InsertIntoPlaylist",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Playlist",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "InsertIndex",
            "in": "query"
          },
          {
            "name": "3",
            "type": "#/definitions/Object",
            "required": true,
            "description": "NewItem",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsPlaylistObject": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PlaylistAPI"
        ],
        "description": "Returns true if the passed in argument is a Playlist object\n        @param Playlist the object to test to see if it is a Playlist object\n        @return true if the passed in argument is a Playlist object, false otherwise",
        "operationId": "IsPlaylistObject",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Playlist",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dMovePlaylistItemDown": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PlaylistAPI"
        ],
        "description": "Swaps the position of the item at the specified index in the Playlist with the item at the position (Index + 1)\n        @param Playlist the Playlist object\n        @param Index the position of the item to move down one in the playlist",
        "operationId": "MovePlaylistItemDown",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Playlist",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "Index",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dMovePlaylistItemUp": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PlaylistAPI"
        ],
        "description": "Swaps the position of the item at the specified index in the Playlist with the item at the position (Index - 1)\n        @param Playlist the Playlist object\n        @param Index the position of the item to move up one in the playlist",
        "operationId": "MovePlaylistItemUp",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Playlist",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "Index",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dRemovePlaylist": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PlaylistAPI"
        ],
        "description": "Removes a specified Playlist from the databse completely. The files in the Playlist will NOT be removed.\n        @param Playlist the Playlist object to remove",
        "operationId": "RemovePlaylist",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Playlist",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dRemovePlaylistItem": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PlaylistAPI"
        ],
        "description": "Removes the specified item from the Playlist. If this item appears in the Playlist more than once, only the first occurrence will be removed.\n        @param Playlist the Playlist object\n        @param Item the item to remove from the Playlist, must be an Airing, MediaFile, Album or Playlist",
        "operationId": "RemovePlaylistItem",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Playlist",
            "in": "query"
          },
          {
            "name": "2",
            "type": "#/definitions/Object",
            "required": true,
            "description": "Item",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dRemovePlaylistItemAt": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PlaylistAPI"
        ],
        "description": "Removes the specified item at the specified index from the Playlist.\n        @param Playlist the Playlist object\n        @param ItemIndex the index of the item to remove from the Playlist",
        "operationId": "RemovePlaylistItemAt",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Playlist",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "ItemIndex",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetName": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PlaylistAPI"
        ],
        "description": "Sets the name for this Playlist\n        @param Playlist the Playlist objecxt\n        @param Name the name to set for this Plyalist",
        "operationId": "SetName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Playlist",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetPlaylistProperty": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PlaylistAPI"
        ],
        "description": "Sets a property for this Playlist. This can be any name/value combination (but the name cannot be null). If the value is null;\n        then the specified property will be removed from this Playlist. This only impacts the return values from GetPlaylistProperty and has no other side effects.\n        @param Playlist the Playlist object\n        @param PropertyName the name of the property\n        @param PropertyValue the value of the property\n        @since 7.0",
        "operationId": "SetPlaylistProperty",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Playlist",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "PropertyName",
            "in": "query"
          },
          {
            "name": "3",
            "type": "string",
            "required": true,
            "description": "PropertyValue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dAreClientPluginsSupported": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Returns true if this instance of SageTV supports installation of client plugins. This is true for SageTVClient applications\n        that are not running on the same machine as the SageTV server itself. If they are running on the same machine; then their\n        installations will be shared.\n        @return true if this instance of SageTV supports installation of client plugins, false otherwise\n        @since 7.0",
        "operationId": "AreClientPluginsSupported",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dCanPluginBeDisabled": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Returns whether the specified plugin can be enabled/disabled. Only \u0027Standard\u0027 type plugins w/ an implementation class and STVIs can be enabled/disabled.\n        @param Plugin the specified Plugin object\n        @return true if the specified plugin can be enabled/disabled, false otherwise\n        @since 7.0",
        "operationId": "CanPluginBeDisabled",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dDisablePlugin": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Disables the specified Plugin if it can be disabled. Some plugins, like Themes and STVs are disabled by simply selecting\n        an alternate Theme or STV, so those do not have the ability to be \u0027disabled\u0027 in the sense that this API call refers to.\n        @return true if disabling the plugin succeeded; if it fails its because there\u0027s another plugin dependent on it\n        @param Plugin the specified Plugin object\n        @since 7.0",
        "operationId": "DisablePlugin",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dEnablePlugin": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Enables the specified Plugin if it can be enabled/disabled.\n        @param Plugin the specified Plugin object\n        @return true if it was successfully enabled, false otherwise; this will also return true even if the plugin does not have the ability to be enabled/disabled\n        @since 7.0",
        "operationId": "EnablePlugin",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAllAvailablePlugins": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Returns an array of Plugin objects which represent all the plugins available in the plugin repository.\n        @return an array of Plugin objects which represent all the plugins available in the plugin repository\n        @since 7.0",
        "operationId": "GetAllAvailablePlugins",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Plugin"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAllPluginVersions": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Returns an array of Plugin objects which represent all of the versions available of the specified plugin in the repository\n        @param Plugin the Plugin object to check, this can either be a Plugin object or a String representing a Plugin ID\n        @return an array of Plugin objects which represent all of the versions available of the specified plugin in the repository\n        @since 7.0",
        "operationId": "GetAllPluginVersions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Plugin"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAvailablePluginForID": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Returns the plugin in the repository for the specified plugin ID\n        @param PluginID the plugin identifier\n        @return the plugin in the repository for the specified plugin ID\n        @since 7.0",
        "operationId": "GetAvailablePluginForID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "PluginID",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Plugin)",
            "schema": {
              "$ref": "#/definitions/Plugin"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetClientPluginIncompatabilityReason": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Returns the reason why the specified Plugin object is incompatible and cannot be installed. This can be due to\n        operating system, desktop, STV, STV Version or plugin dependency version conflicts. This version of the API\n        call relates to installation on non-localhost connected SageTVClients.\n        @param Plugin the specified Plugin object\n        @return a String describing the reason why the specified Plugin cannot be installed\n        @since 7.0",
        "operationId": "GetClientPluginIncompatabilityReason",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetClientPluginProgress": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Returns a progress based status message regarding any current plugin installation. This is for non-localhost connected\n        SageTVClients regarding client plugin installation. There is no progress messages\n        for plugin uninstalls since they should happen relatively quickly.\n        @return a String describing the current progress of plugin installation, or an empty string if its not currently in progress\n        @since 7.0",
        "operationId": "GetClientPluginProgress",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetInstalledClientPlugins": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Returns an array of Plugin objects which represent all the plugins that have been installed on the local client (enabled or disabled).\n        This is only needed when dealing with SageTVClient applications that are connected to a non-localhost server.\n        @return an array of Plugin objects which represent all the plugins that have been installed on the local client (enabled or disabled)\n        @since 7.0",
        "operationId": "GetInstalledClientPlugins",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Plugin"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetInstalledPlugins": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Returns an array of Plugin objects which represent all the plugins that have been installed on this SageTV system (enabled or disabled).\n        If using a non-localhost SageTVClient; this will return the plugins that are installed on the server.\n        @return an array of Plugin objects which represent all the plugins that have been installed on this SageTV system (enabled or disabled)\n        @since 7.0",
        "operationId": "GetInstalledPlugins",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Plugin"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPluginAuthor": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Gets the author of the specified Plugin object\n        @param Plugin the specified Plugin object\n        @return the author of the specified Plugin object\n        @since 7.0",
        "operationId": "GetPluginAuthor",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPluginConfigHelpText": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Gets the help text to describe the specified configuration setting for the specified Plugin object.\n        Only enabled plugins can be configured.\n        @param Plugin the specified Plugin object\n        @param SettingName the name of the plugin configuration setting\n        @return a String which is help text to further describe the specified setting\n        @since 7.0",
        "operationId": "GetPluginConfigHelpText",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Plugin",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "SettingName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPluginConfigLabel": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Gets the label to describe the specified configuration setting for the specified Plugin object.\n        This should be used for UI display when presenting this setting to the user instead of the SettingName.\n        Only enabled plugins can be configured.\n        @param Plugin the specified Plugin object\n        @param SettingName the name of the plugin configuration setting\n        @return a String which is a label to describe the specified setting in the UI\n        @since 7.0",
        "operationId": "GetPluginConfigLabel",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Plugin",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "SettingName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPluginConfigOptions": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Gets all the options available for the specified configuration setting for the specified Plugin object.\n        This should be used for plugin settings of type \"Multichoice\" or \"Choice\". These are the different choices\n        that the user will select from. Only enabled plugins can be configured.\n        @param Plugin the specified Plugin object\n        @param SettingName the name of the plugin configuration setting\n        @return a String[] which represents all of the choice options for the specified setting\n        @since 7.0",
        "operationId": "GetPluginConfigOptions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Plugin",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "SettingName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPluginConfigSettings": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Returns a list of the setting names for the specified Plugin object. These are not suitable for\n        display; but should be used as the \u0027SettingName\u0027 for any of the plugin setting operations.\n        Only enabled plugins can be configured.\n        @param Plugin the specified Plugin object\n        @return a String[] of the setting names for the specified Plugin object, a zero-length array will be returned if this Plugin has no configuration settings\n        @since 7.0",
        "operationId": "GetPluginConfigSettings",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPluginConfigType": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Gets the setting type for the specified configuration setting for the specified Plugin object.\n        The possible values are \"Boolean\", \"Integer\", \"Text\", \"Choice\", \"Multichoice\", \"File\", \"Directory\", \"Button\" or \"Password\".\n        Only enabled plugins can be configured.\n        @param Plugin the specified Plugin object\n        @param SettingName the name of the plugin configuration setting\n        @return a String which represents the type of the specified setting, the empty string will be returned if the call is invalid\n        @since 7.0",
        "operationId": "GetPluginConfigType",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Plugin",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "SettingName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPluginConfigValue": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Gets the current value for the specified configuration setting for the specified Plugin object.\n        Only enabled plugins can be configured.\n        @param Plugin the specified Plugin object\n        @param SettingName the name of the plugin configuration setting\n        @return a String which represents the current value of the specified setting\n        @since 7.0",
        "operationId": "GetPluginConfigValue",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Plugin",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "SettingName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPluginConfigValues": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Gets the current values for the specified configuration setting for the specified Plugin object.\n        This should be used for plugin settings of type \"Multichoice\".\n        Only enabled plugins can be configured.\n        @param Plugin the specified Plugin object\n        @param SettingName the name of the plugin configuration setting\n        @return a String[] which represents the current values of the specified setting\n        @since 7.0",
        "operationId": "GetPluginConfigValues",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Plugin",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "SettingName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPluginCreationDate": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Gets the creation date of the specified Plugin object\n        @param Plugin the specified Plugin object\n        @return the creation date of the specified Plugin object\n        @since 7.0",
        "operationId": "GetPluginCreationDate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPluginDemoVideos": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Returns an array of URLs to demo videos for the specified plugin object\n        @param Plugin the specified Plugin object\n        @return an array of URLs to demo videos for the specified plugin object\n        @since 7.0",
        "operationId": "GetPluginDemoVideos",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPluginDependencies": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Returns an array of Strings which specifies the dependencies of this plugin. These strings\n        will be descriptive and indicate the type of dependency (i.e. STV, Plugin, OS or Desktop) and\n        the specifics of that dependency.\n        @param Plugin the specified Plugin object\n        @return an array of Strings which specifies the dependencies of this plugin\n        @since 7.0",
        "operationId": "GetPluginDependencies",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPluginDescription": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Gets the description of the specified Plugin object\n        @param Plugin the specified Plugin object\n        @return the description of the specified Plugin object\n        @since 7.0",
        "operationId": "GetPluginDescription",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPluginIdentifier": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Gets the unique identifier of the specified Plugin object\n        @param Plugin the specified Plugin object\n        @return the unique identifier of the specified Plugin object\n        @since 7.0",
        "operationId": "GetPluginIdentifier",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPluginImplementation": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Returns the actual object that implements the sage.SageTVPlugin interface for the specified Plugin. This will only be valid\n        if the Plugin has an actual implementation and is being called on a plugin that is valid in this context (i.e. you can\u0027t call it on a\n        server plugin in the client JVM). DO NOT use this object to start/stop or perform other behaviors that are normally done by the\n        SageTV core on that object.\n        @param Plugin the specified Plugin object\n        @return the actual plugin implementation object for the specified plugin, or null if it can\u0027t be obtained or doesn\u0027t exist\n        @since 7.0",
        "operationId": "GetPluginImplementation",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is sage.SageTVPlugin)",
            "schema": {
              "$ref": "#/definitions/sage.SageTVPlugin"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPluginIncompatabilityReason": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Returns the reason why the specified Plugin object is incompatible and cannot be installed. This can be due to\n        operating system, desktop, STV, STV Version or plugin dependency version conflicts.\n        @param Plugin the specified Plugin object\n        @return a String describing the reason why the specified Plugin cannot be installed\n        @since 7.0",
        "operationId": "GetPluginIncompatabilityReason",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPluginInstallDate": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Gets the date the specified Plugin object was installed\n        @param Plugin the specified Plugin object (must be an \u0027installed\u0027 Plugin object and not a \u0027repository\u0027 one)\n        @return the date the specified Plugin object was installed\n        @since 7.0",
        "operationId": "GetPluginInstallDate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPluginModificationDate": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Gets the last modification date of the specified Plugin object\n        @param Plugin the specified Plugin object\n        @return the last modification date of the specified Plugin object\n        @since 7.0",
        "operationId": "GetPluginModificationDate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPluginName": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Gets the displayable name of the specified Plugin object\n        @param Plugin the specified Plugin object\n        @return the displayable name of the specified Plugin object\n        @since 7.0",
        "operationId": "GetPluginName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPluginProgress": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Returns a progress based status message regarding any current plugin installation. There is no progress messages\n        for plugin uninstalls since they should happen relatively quickly.\n        @return a String describing the current progress of plugin installation, or an empty string if its not currently in progress\n        @since 7.0",
        "operationId": "GetPluginProgress",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPluginReleaseNotes": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Gets the release notes attached to this specific version of the specified Plugin object\n        @param Plugin the specified Plugin object\n        @return the release notes attached to this specific version of the specified Plugin object\n        @since 7.0",
        "operationId": "GetPluginReleaseNotes",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPluginResourcePath": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Gets the relative path to resources used by the specified Plugin object\n        @param Plugin the specified Plugin object\n        @return the relative path to resources used by the specified Plugin object\n        @since 7.0",
        "operationId": "GetPluginResourcePath",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPluginScreenshots": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Returns an array of URLs to screenshots for the specified plugin object\n        @param Plugin the specified Plugin object\n        @return an array of URLs to screenshots for the specified plugin object\n        @since 7.0",
        "operationId": "GetPluginScreenshots",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPluginType": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Returns the type of the specified plugin object. This wil be one of \"Standard\", \"Theme\", \"STV\",\n        \"STVI\", \"Library\" or \"Images\". The empty string will be returned if an invalid argument is supplied.\n        @param Plugin the specified Plugin object\n        @return the type of the specified plugin object\n        @since 7.0",
        "operationId": "GetPluginType",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPluginVersion": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Gets the version of the specified Plugin object\n        @param Plugin the specified Plugin object\n        @return the version of the specified Plugin object\n        @since 7.0",
        "operationId": "GetPluginVersion",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPluginWebsites": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Returns an array of URLs to websites for the specified plugin object\n        @param Plugin the specified Plugin object\n        @return an array of URLs to websites for the specified plugin object\n        @since 7.0",
        "operationId": "GetPluginWebsites",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSageTVPluginRegistry": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Returns an object which implements the sage.SageTVPluginRegistry interface. Can be used to subscribe/unsubscribe\n        to SageTVEvents.\n        @return an object which implements the sage.SageTVPluginRegistry interface\n        @since 7.0",
        "operationId": "GetSageTVPluginRegistry",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (value type is sage.SageTVPluginRegistry)",
            "schema": {
              "$ref": "#/definitions/sage.SageTVPluginRegistry"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dInstallClientPlugin": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Installs or upgrades the specified Plugin. If there\u0027s a failure in doing so\n        or a restart of SageTV is required after installing the plugin; the return value will indicate that.\n        This version of the API call relates to installation on non-localhost connected SageTVClients.\n        @param Plugin the specified Plugin object\n        @return a String describing the install result; this will be \"OK\" if it was successful, \"RESTART\" if it was successful but a restart of SageTV is required or \"FAILED - XXX\" if a failure occurred with XXX describing the reason why\n        @since 7.0",
        "operationId": "InstallClientPlugin",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dInstallPlugin": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Installs or upgrades the specified Plugin. If there\u0027s a failure in doing so\n        or a restart of SageTV is required after installing the plugin; the return value will indicate that.\n        @param Plugin the specified Plugin object\n        @return a String describing the install result; this will be \"OK\" if it was successful, \"RESTART\" if it was successful but a restart of SageTV is required or \"FAILED - XXX\" if a failure occurred with XXX describing the reason why\n        @since 7.0",
        "operationId": "InstallPlugin",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsClientPluginCompatible": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Returns whether or not the specified Plugin object is compatible and can be installed. This can be due to\n        operating system, desktop, STV, STV Version or plugin dependency version conflicts. This version of the API\n        call relates to installation on non-localhost connected SageTVClients.\n        @param Plugin the specified Plugin object\n        @return true if the specified Plugin object is compatible and can be installed, false otherwise\n        @since 7.0",
        "operationId": "IsClientPluginCompatible",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsClientPluginInstalled": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Returns true if the specified plugin has already been installed into the locally running SageTVClient\n        @param Plugin the Plugin object to check\n        @return true if the specified plugin has already been installed into the locally running SageTVClient\n        @since 7.0",
        "operationId": "IsClientPluginInstalled",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsClientPluginInstalledSameVersion": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Returns true if the specified plugin has already been installed into the locally running SageTVClient and is the same version as this one\n        @param Plugin the Plugin object to check\n        @return true if the specified plugin has already been installed into the locally running SageTVClient and is the same version as this one\n        @since 7.0",
        "operationId": "IsClientPluginInstalledSameVersion",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsPluginBeta": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Returns true if the specified plugin is tagged as a \u0027beta\u0027 version.\n        @param Plugin the Plugin object to check\n        @return true if the specified plugin is tagged as a \u0027beta\u0027 version, false otherwise\n        @since 7.0",
        "operationId": "IsPluginBeta",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsPluginCompatible": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Returns whether or not the specified Plugin object is compatible and can be installed. This can be due to\n        operating system, desktop, STV, STV Version or plugin dependency version conflicts.\n        @param Plugin the specified Plugin object\n        @return true if the specified Plugin object is compatible and can be installed, false otherwise\n        @since 7.0",
        "operationId": "IsPluginCompatible",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsPluginConfigurable": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Returns true if the specified plugin can be configured when enabled. If it is disabled, it can still have its configuration reset.\n        @param Plugin the specified Plugin object\n        @return true if the specified plugin can be configured when enabled; if it is disabled, it can still have its configuration reset\n        @since 7.0",
        "operationId": "IsPluginConfigurable",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsPluginDesktopOnly": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Returns true if the specified plugin is only supported in desktop environments (i.e. not on a headless server, placeshifter or extender)\n        @param Plugin the Plugin object to check\n        @return true if the specified plugin is only supported in desktop environments, false otherwise\n        @since 7.0",
        "operationId": "IsPluginDesktopOnly",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsPluginEnabled": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Returns true if the specified plugin has already been installed and is enabled. This will also\n        return true if the specified plugin does not support being enabled/disabled.\n        @param Plugin the Plugin object to check, this should be from a call to GetInstalledPlugins or GetInstalledClientPlugins\n        @return true if the specified plugin has already been installed and is enabled or it doesn\u0027t support being disabled, false otherwise\n        @since 7.0",
        "operationId": "IsPluginEnabled",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsPluginFailed": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Returns true if the specified plugin has already been installed and is enabled; but the loading of it has failed.\n        @param Plugin the Plugin object to check, this should be from a call to GetInstalledPlugins or GetInstalledClientPlugins\n        @return true if the specified plugin has already been installed and is enabled and the loading of it failed, false otherwise\n        @since 7.0",
        "operationId": "IsPluginFailed",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsPluginInstalled": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Returns true if the specified plugin has already been installed\n        @param Plugin the Plugin object to check\n        @return true if the specified plugin has already been installed\n        @since 7.0",
        "operationId": "IsPluginInstalled",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsPluginInstalledSameVersion": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Returns true if the specified plugin has already been installed and is the same version as this one\n        @param Plugin the Plugin object to check\n        @return true if the specified plugin has already been installed and is the same version as this one\n        @since 7.0",
        "operationId": "IsPluginInstalledSameVersion",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsPluginObject": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Returns true if the specified object is a Plugin object\n        @param Plugin the specified Plugin object\n        @return true if the specified object is a Plugin object, false otherwise\n        @since 7.0",
        "operationId": "IsPluginObject",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsPluginStartupComplete": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Returns true once all of the core plugins that are enabled have completed their startup process. This can be useful because\n        plugins are loaded asynchronously with the UI and sometimes a UI needs to wait for their startup process to be completed before it loads.\n        For client instances; this will return true once client and server plugin startup has completed.\n        @return true once all of the core plugins that are enabled have completed their startup process, false otherwise\n        @since 7.0",
        "operationId": "IsPluginStartupComplete",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dRefreshAvailablePlugins": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Refreshes the plugin repository list by contacting the server to ensure it is up to date (this is done automatically\n        on a regular basis)\n        @since 7.0",
        "operationId": "RefreshAvailablePlugins",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dResetPluginConfiguration": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Resets the configuration for the specified plugin. If this is called on a disabled plugin, then next time it\n        is enabled the configuration will be reset.\n        @param Plugin the specified Plugin object\n        @since 7.0",
        "operationId": "ResetPluginConfiguration",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetPluginConfigValue": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Sets the value for the specified configuration setting for the specified Plugin object.\n        Only enabled plugins can be configured.\n        @param Plugin the specified Plugin object\n        @param SettingName the name of the plugin configuration setting\n        @param SettingValue the value to set the configuration setting to\n        @return null on success, or if an exception occurred while setting the value, a string representation of the exception will be returned\n        @since 7.0",
        "operationId": "SetPluginConfigValue",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Plugin",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "SettingName",
            "in": "query"
          },
          {
            "name": "3",
            "type": "string",
            "required": true,
            "description": "SettingValue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetPluginConfigValues": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Sets the values for the specified configuration setting for the specified Plugin object.\n        This should be used for plugin settings of type \"Multichoice\".\n        Only enabled plugins can be configured.\n        @param Plugin the specified Plugin object\n        @param SettingName the name of the plugin configuration setting\n        @param SettingValues the values to set the configuration setting to\n        @return null on success, or if an exception occurred while setting the value, a string representation of the exception will be returned\n        @since 7.0",
        "operationId": "SetPluginConfigValues",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Plugin",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "SettingName",
            "in": "query"
          },
          {
            "name": "3",
            "type": "string",
            "required": true,
            "description": "SettingValues",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dUninstallPlugin": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "PluginAPI"
        ],
        "description": "Uninstalls the specified Plugin. If there\u0027s a failure in doing so\n        or a restart of SageTV is required after installing the plugin; the return value will indicate that.\n        Failure will also occur if other plugins are dependent on this plugin.\n        @param Plugin the specified Plugin object\n        @return a String describing the install result; this will be \"OK\" if it was successful, \"RESTART\" if it was successful but a restart of SageTV is required or \"FAILED - XXX\" if a failure occurred with XXX describing the reason why\n        @since 7.0",
        "operationId": "UninstallPlugin",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Plugin",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dAddSecurityProfile": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Security"
        ],
        "description": "Adds a new security profile with the specified name. Unless this profile existed before; all permissions will default to false. If the\n        profile existed before; it\u0027s old settings will be the initial settings for this new profile.\n        @param Profile the name for the new security profile\n        @return true if this was added as a new security profile, false otherwise (it\u0027ll only fail if the name is already in use)\n        @since 7.1",
        "operationId": "AddSecurityProfile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Profile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetActiveSecurityProfile": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Security"
        ],
        "description": "Returns the name of the current security profile for the UI client making the API call.\n        @return the name of the current security profile for the UI client making the API call, returns null if there\u0027s no valid UI context for this call\n        @since 7.1",
        "operationId": "GetActiveSecurityProfile",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetDefaultSecurityProfile": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Security"
        ],
        "description": "Returns the name of the default security profile to use when a new client connects that does not have an associated security profile.\n        @return the name of the default security profile to use when a new client connects that does not have an associated security profile\n        @since 7.1",
        "operationId": "GetDefaultSecurityProfile",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPredefinedPermissions": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Security"
        ],
        "description": "Returns a list of all the predefined permission names. Plugins are free to define their own new permissions using any string they like;\n        but those will not be returned from this API call.\n        @return a list of all the predefined permission names\n        @since 7.1",
        "operationId": "GetPredefinedPermissions",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSecurityProfiles": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Security"
        ],
        "description": "Returns the names of the different security profiles.\n        @return the names of the different security profiles\n        @since 7.1",
        "operationId": "GetSecurityProfiles",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dHasPermission": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Security"
        ],
        "description": "Returns true if the specified permission is allowed under the security profile active for the UI making this API call. If this permission has not\n        been explicitly set to false for that profile; this method will return true.\n        @param Permission the name of the permission\n        @return false if the specified permission is denied under the active security profile or if the current context has no security profile, true otherwise\n        @since 7.1",
        "operationId": "HasPermission",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Permission",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dRemoveSecurityProfile": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Security"
        ],
        "description": "Removes the security profile with the specified name. You cannot remove the Administrator profile. If a user session is currently\n        active under the profile being removed; it will continue to remain active under that profile with the current permissions until that\n        user session expires.\n        @param Profile the name for the security profile to remove\n        @return true if this was removed as a security profile, false otherwise (it\u0027ll only fail if the name isn\u0027t in use or is Administrator)\n        @since 7.1",
        "operationId": "RemoveSecurityProfile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Profile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetActiveSecurityProfile": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Security"
        ],
        "description": "Sets the name of the current security profile for the UI client making the API call.\n        @param Profile the name of the security profile\n        @return true if the call succeeded; false if the specified profile does not exist or there is no valid UI context for this call\n        @since 7.1",
        "operationId": "SetActiveSecurityProfile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Profile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetDefaultSecurityProfile": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Security"
        ],
        "description": "Sets the name of the default security profile to use when a new client connects that does not have an associated security profile.\n        @param Profile the name of the default security profile to use when a new client connects that does not have an associated security profile\n        @return true if the call succeeds, false if the specified profile does not exist\n        @since 7.1",
        "operationId": "SetDefaultSecurityProfile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Profile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetPermission": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Security"
        ],
        "description": "Sets whether or not a permission is allowed under a specific security profile.\n        @param Permission the name of the permission to set\n        @param Profile the name of the security profile this permission applies to\n        @param Allowed true if the permission should be granted, false if it should be denied\n        @since 7.1",
        "operationId": "SetPermission",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Permission",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Profile",
            "in": "query"
          },
          {
            "name": "3",
            "type": "boolean",
            "required": true,
            "description": "Allowed",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dAddSeriesInfo": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "SeriesInfoAPI"
        ],
        "description": "Call this to add a SeriesInfo object to the database. If a SeriesInfo with this seriesID is already present, it will be updated\n        to this information. You can use null or String[0] for any fields you don\u0027t want to specify.\n        @param SeriesID the ID of the series, this should match the prefix of corresponding ShowIDs w/out the last 4 digits for proper linkage (i.e. the SeriesID for EP1234567890 would be 123456)\n        @param Title the title of the series\n        @param Network the network that airs the series\n        @param Description a description of this series\n        @param History a historical description of the series\n        @param PremiereDate a String representation of the date the series premiered\n        @param FinaleDate a String representation of the date the series ended\n        @param AirDOW a String representation of the day of the week the series airs\n        @param AirHrMin a String representation of the time the series airs\n        @param ImageURL a URL that links to an image for this series\n        @param People names of people/actors in this show\n        @param Characters must be same length as people array, should give the character names the corresponding people have in the series\n        @return the newly added SeriesInfo object, or the updated object if another SeriesInfo object already existed with the same SeriesID\n        @since 7.0",
        "operationId": "AddSeriesInfo",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "integer",
            "required": true,
            "description": "SeriesID",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Title",
            "in": "query"
          },
          {
            "name": "3",
            "type": "string",
            "required": true,
            "description": "Network",
            "in": "query"
          },
          {
            "name": "4",
            "type": "string",
            "required": true,
            "description": "Description",
            "in": "query"
          },
          {
            "name": "5",
            "type": "string",
            "required": true,
            "description": "History",
            "in": "query"
          },
          {
            "name": "6",
            "type": "string",
            "required": true,
            "description": "PremiereDate",
            "in": "query"
          },
          {
            "name": "7",
            "type": "string",
            "required": true,
            "description": "FinaleDate",
            "in": "query"
          },
          {
            "name": "8",
            "type": "string",
            "required": true,
            "description": "AirDOW",
            "in": "query"
          },
          {
            "name": "9",
            "type": "string",
            "required": true,
            "description": "AirHrMin",
            "in": "query"
          },
          {
            "name": "10",
            "type": "string",
            "required": true,
            "description": "ImageURL",
            "in": "query"
          },
          {
            "name": "11",
            "type": "string",
            "required": true,
            "description": "People",
            "in": "query"
          },
          {
            "name": "12",
            "type": "string",
            "required": true,
            "description": "Characters",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is SeriesInfo)",
            "schema": {
              "$ref": "#/definitions/SeriesInfo"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAllSeriesInfo": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "SeriesInfoAPI"
        ],
        "description": "Returns a list of all of the SeriesInfo which is information about television series\n        @return a list of all of the SeriesInfo\n        @since 5.1",
        "operationId": "GetAllSeriesInfo",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SeriesInfo"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetNumberOfCharactersInSeries": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "SeriesInfoAPI"
        ],
        "description": "Returns the number of characters that we have information on for the specified series\n        @param SeriesInfo the SeriesInfo object\n        @return the number of characters that we have information on for the specified series\n        @since 5.1",
        "operationId": "GetNumberOfCharactersInSeries",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "SeriesInfo",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSeriesActor": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "SeriesInfoAPI"
        ],
        "description": "Returns the name of the actor/actress for the specfied index in the specified SeriesInfo. The range\n        for the index is from 0 to one less than the value of {@link #GetNumberOfCharactersInSeries GetNumberOfCharactersInSeries()}\n        @param SeriesInfo the SeriesInfo object\n        @param Index the 0-based index of the actor to retrieve\n        @return the Person object of the actor/actress for the specfied index in the specified SeriesInfo\n        @since 5.1",
        "operationId": "GetSeriesActor",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "SeriesInfo",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "Index",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Person)",
            "schema": {
              "$ref": "#/definitions/Person"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSeriesActorImage": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "SeriesInfoAPI"
        ],
        "description": "Returns an image of the specified Person in their role in the specified Series\n        @param SeriesInfo the SeriesInfo object\n        @param Person the Person to check for an image\n        @param Thumb true if a thumbnail is preferred, false if a full size image is\n        @return an image of the specified Person in their role in the specified Series\n        @since 8.0",
        "operationId": "GetSeriesActorImage",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "SeriesInfo",
            "in": "query"
          },
          {
            "name": "2",
            "type": "#/definitions/Person",
            "required": true,
            "description": "Person",
            "in": "query"
          },
          {
            "name": "3",
            "type": "boolean",
            "required": true,
            "description": "Thumb",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is MetaImage)",
            "schema": {
              "$ref": "#/definitions/MetaImage"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSeriesActorImageURL": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "SeriesInfoAPI"
        ],
        "description": "Returns an image URL of the specified Person in their role in the specified Series\n        @param SeriesInfo the SeriesInfo object\n        @param Person the Person to check for an image\n        @param Thumb true if a thumbnail is preferred, false if a full size image is\n        @return an image URL of the specified Person in their role in the specified Series\n        @since 8.0",
        "operationId": "GetSeriesActorImageURL",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "SeriesInfo",
            "in": "query"
          },
          {
            "name": "2",
            "type": "#/definitions/Person",
            "required": true,
            "description": "Person",
            "in": "query"
          },
          {
            "name": "3",
            "type": "boolean",
            "required": true,
            "description": "Thumb",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSeriesActorList": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "SeriesInfoAPI"
        ],
        "description": "Returns a list of the names of the actors/actresses in the specified SeriesInfo.\n        @param SeriesInfo the SeriesInfo object\n        @return a list of the Persons of the actors/actresses in the specified SeriesInfo\n        @since 5.1",
        "operationId": "GetSeriesActorList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "SeriesInfo",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Person"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSeriesCategory": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "SeriesInfoAPI"
        ],
        "description": "Returns the category for the specified SeriesInfo\n        @param SeriesInfo the SeriesInfo object\n        @return the category for the SeriesInfo\n        @since V7.0",
        "operationId": "GetSeriesCategory",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "SeriesInfo",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSeriesCharacter": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "SeriesInfoAPI"
        ],
        "description": "Returns the name of the character for the specfied index in the specified SeriesInfo. The range\n        for the index is from 0 to one less than the value of {@link #GetNumberOfCharactersInSeries GetNumberOfCharactersInSeries()}\n        @param SeriesInfo the SeriesInfo object\n        @param Index the 0-based index of the actor to retrieve\n        @return the name of the character for the specfied index in the specified SeriesInfo\n        @since 5.1",
        "operationId": "GetSeriesCharacter",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "SeriesInfo",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "Index",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSeriesCharacterForActor": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "SeriesInfoAPI"
        ],
        "description": "Returns the name of the character that the corresponding actor plays in this series\n        @param SeriesInfo the SeriesInfo object\n        @param Actor the actor\n        @return the name of the character that the corresponding actor plays in this series, the empty string if there\u0027s no correlation\n        @since 7.0",
        "operationId": "GetSeriesCharacterForActor",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "SeriesInfo",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Actor",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSeriesCharacterList": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "SeriesInfoAPI"
        ],
        "description": "Returns a list of the names of the characters in the specified SeriesInfo.\n        @param SeriesInfo the SeriesInfo object\n        @return a list of the names of the characters in the specified SeriesInfo\n        @since 5.1",
        "operationId": "GetSeriesCharacterList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "SeriesInfo",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSeriesDayOfWeek": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "SeriesInfoAPI"
        ],
        "description": "Returns the name of the day of the week the specified SeriesInfo airs on\n        @param SeriesInfo the SeriesInfo object\n        @return the name of the day of the week the specified SeriesInfo airs on\n        @since 5.1",
        "operationId": "GetSeriesDayOfWeek",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "SeriesInfo",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSeriesDescription": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "SeriesInfoAPI"
        ],
        "description": "Returns the description for the specified SeriesInfo\n        @param SeriesInfo the SeriesInfo object\n        @return the description for the specified SeriesInfo\n        @since 5.1",
        "operationId": "GetSeriesDescription",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "SeriesInfo",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSeriesFinaleDate": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "SeriesInfoAPI"
        ],
        "description": "Returns a String describing the finale date for the specified SeriesInfo\n        @param SeriesInfo the SeriesInfo object\n        @return a String describing the finale date for the specified SeriesInfo\n        @since 5.1",
        "operationId": "GetSeriesFinaleDate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "SeriesInfo",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSeriesHistory": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "SeriesInfoAPI"
        ],
        "description": "Returns the history description for the specified SeriesInfo\n        @param SeriesInfo the SeriesInfo object\n        @return the history description for the specified SeriesInfo\n        @since 5.1",
        "operationId": "GetSeriesHistory",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "SeriesInfo",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSeriesHourAndMinuteTimeslot": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "SeriesInfoAPI"
        ],
        "description": "Returns the hour/minute timeslot that the specified SeriesInfo airs at\n        @param SeriesInfo the SeriesInfo object\n        @return the hour/minute timeslot that the specified SeriesInfo airs at\n        @since 5.1",
        "operationId": "GetSeriesHourAndMinuteTimeslot",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "SeriesInfo",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSeriesID": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "SeriesInfoAPI"
        ],
        "description": "Returns the Series ID of the specified SeriesInfo\n        NOTE: V8.0 IDs are not backwards compatible with prior versions\n        @param SeriesInfo the SeriesInfo object\n        @return the Series ID of the specified SeriesInfo object (currently an integer, represented as a String for future expansion)\n        @since 7.0",
        "operationId": "GetSeriesID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "SeriesInfo",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSeriesImage": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "SeriesInfoAPI"
        ],
        "description": "Returns the image that corresponds to this SeriesInfo if there is one\n        @param SeriesInfo the SeriesInfo object\n        @param Thumb true if a thumbnail is preferred, false if a full size image is\n        @return the image that corresponds to this SeriesInfo if there is one\n        @since 8.0",
        "operationId": "GetSeriesImage",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "SeriesInfo",
            "in": "query"
          },
          {
            "name": "2",
            "type": "boolean",
            "required": true,
            "description": "Thumb",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is MetaImage)",
            "schema": {
              "$ref": "#/definitions/MetaImage"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSeriesImageAtIndex": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "SeriesInfoAPI"
        ],
        "description": "Returns the image that corresponds to this SeriesInfo at the specified index (when there are multiple images)\n        @param SeriesInfo the SeriesInfo object\n        @param Index the 0-based index of which image to return\n        @param Thumb true if a thumbnail is preferred, false if a full size image is\n        @return the image that corresponds to this SeriesInfo at the specified index\n        @since 8.0",
        "operationId": "GetSeriesImageAtIndex",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "SeriesInfo",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "Index",
            "in": "query"
          },
          {
            "name": "3",
            "type": "boolean",
            "required": true,
            "description": "Thumb",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is MetaImage)",
            "schema": {
              "$ref": "#/definitions/MetaImage"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSeriesImageCount": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "SeriesInfoAPI"
        ],
        "description": "Returns the number of images available that correspond to this SeriesInfo\n        @param SeriesInfo the SeriesInfo object\n        @return the number of images available that correspond to this SeriesInfo\n        @since 8.0",
        "operationId": "GetSeriesImageCount",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "SeriesInfo",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSeriesImageURL": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "SeriesInfoAPI"
        ],
        "description": "Returns the image URL that corresponds to this SeriesInfo if there is one\n        @param SeriesInfo the SeriesInfo object\n        @param Thumb true if a thumbnail is preferred, false if a full size image is\n        @return the image URL that corresponds to this SeriesInfo if there is one\n        @since 8.0",
        "operationId": "GetSeriesImageURL",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "SeriesInfo",
            "in": "query"
          },
          {
            "name": "2",
            "type": "boolean",
            "required": true,
            "description": "Thumb",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSeriesImageURLAtIndex": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "SeriesInfoAPI"
        ],
        "description": "Returns the image URL that corresponds to this SeriesInfo at the specified index (when there are multiple images)\n        @param SeriesInfo the SeriesInfo object\n        @param Index the 0-based index of which image to return\n        @param Thumb true if a thumbnail is preferred, false if a full size image is\n        @return the image URL that corresponds to this SeriesInfo at the specified index\n        @since 8.0",
        "operationId": "GetSeriesImageURLAtIndex",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "SeriesInfo",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "Index",
            "in": "query"
          },
          {
            "name": "3",
            "type": "boolean",
            "required": true,
            "description": "Thumb",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSeriesInfoForID": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "SeriesInfoAPI"
        ],
        "description": "Returns the SeriesInfo object for the specified Series ID\n        NOTE: V8.0 IDs are not backwards compatible with prior versions\n        @param SeriesID the ID of the desired SeriesInfo object\n        @return the SeriesInfo object with the specified ID, or null if it does not exist\n        @since 7.0",
        "operationId": "GetSeriesInfoForID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "SeriesID",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is SeriesInfo)",
            "schema": {
              "$ref": "#/definitions/SeriesInfo"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSeriesInfoProperty": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "SeriesInfoAPI"
        ],
        "description": "Returns a property value for a specified SeriesInfo object. This must have been set using SetSeriesInfoProperty.\n        Returns the empty string when the property is undefined.\n        @param SeriesInfo the SeriesInfo object\n        @param PropertyName the name of the property\n        @return the property value for the specified SeriesInfo, or the empty string if it is not defined\n        @since 7.0",
        "operationId": "GetSeriesInfoProperty",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "SeriesInfo",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "PropertyName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSeriesNetwork": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "SeriesInfoAPI"
        ],
        "description": "Returns the name of the network the specified SeriesInfo airs on\n        @param SeriesInfo the SeriesInfo object\n        @return the name of the network the specified SeriesInfo airs on\n        @since 5.1",
        "operationId": "GetSeriesNetwork",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "SeriesInfo",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSeriesPremiereDate": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "SeriesInfoAPI"
        ],
        "description": "Returns a String describing the premiere date for the specified SeriesInfo\n        @param SeriesInfo the SeriesInfo object\n        @return a String describing the premiere date for the specified SeriesInfo\n        @since 5.1",
        "operationId": "GetSeriesPremiereDate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "SeriesInfo",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSeriesSubCategory": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "SeriesInfoAPI"
        ],
        "description": "Returns the subcategory for the specified SeriesInfo\n        @param SeriesInfo the SeriesInfo object\n        @return the subcategory for the SeriesInfo\n        @since V7.0",
        "operationId": "GetSeriesSubCategory",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "SeriesInfo",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSeriesTitle": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "SeriesInfoAPI"
        ],
        "description": "Returns the title for the specified SeriesInfo\n        @param SeriesInfo the SeriesInfo object\n        @return the title for the specified SeriesInfo\n        @since 5.1",
        "operationId": "GetSeriesTitle",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "SeriesInfo",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dHasSeriesActorImage": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "SeriesInfoAPI"
        ],
        "description": "Returns true if the specified SeriesInfo has a corresponding image for it for the specified Person in it\n        @param SeriesInfo the SeriesInfo object\n        @param Person the Person to check for an image\n        @return true if the specified SeriesInfo has a corresponding image for it for the specified Person in it\n        @since 8.0",
        "operationId": "HasSeriesActorImage",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "SeriesInfo",
            "in": "query"
          },
          {
            "name": "2",
            "type": "#/definitions/Person",
            "required": true,
            "description": "Person",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dHasSeriesImage": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "SeriesInfoAPI"
        ],
        "description": "Returns true if the specified SeriesInfo has a corresponding image for it\n        @param SeriesInfo the SeriesInfo object\n        @return true if the specified SeriesInfo has a corresponding image for it\n        @since 5.1",
        "operationId": "HasSeriesImage",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "SeriesInfo",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsSeriesInfoObject": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "SeriesInfoAPI"
        ],
        "description": "Returns true if the argument is a SeriesInfo object. Automatic type conversion is NOT done in this call.\n        @param SeriesInfo the object to test\n        @return true if the argument is an SeriesInfo object\n        @since 7.1",
        "operationId": "IsSeriesInfoObject",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "SeriesInfo",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetSeriesInfoProperty": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "SeriesInfoAPI"
        ],
        "description": "Sets a property for this SeriesInfo object. This can be any name/value combination (but the name cannot be null). If the value is null;\n        then the specified property will be removed from this SeriesInfo object. This only impacts the return values from GetSeriesInfoProperty and has no other side effects.\n        @param SeriesInfo the SeriesInfo object\n        @param PropertyName the name of the property\n        @param PropertyValue the value of the property\n        @since 7.0",
        "operationId": "SetSeriesInfoProperty",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "SeriesInfo",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "PropertyName",
            "in": "query"
          },
          {
            "name": "3",
            "type": "string",
            "required": true,
            "description": "PropertyValue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dAddShow": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "Adds a new Show to the database. Null or the empty string (\"\") can be passed in for any unneeded fields.\n        @param Title the title of the Show (for music this should be album name)\n        @param IsFirstRun true if this Show is a first run, false otherwise (this parameter has no effect anymore since Airings determine first/rerun status)\n        @param Episode the episode name for this Show (for music this should be the song title)\n        @param Description the description of the Show\n        @param Duration the duration of the Show, not necessary and can be zero; this is only used for indicating differences between Airing duration and the actual content duration\n        @param Categories an array of the categories of the Show (should be genre for music)\n        @param PeopleList a list of all of the people in the Show, the roles of the people should correspond to the RolesListForPeopleList argument\n        @param RolesListForPeopleList a list of the roles for the people in the Show, this should correspond to the PeopleList argument\n        @param Rated the rating for the Show see {@link #GetShowRated GetShowRated()}\n        @param ExpandedRatingsList the expanded ratings list for the show, see {@link #GetShowExpandedRatings GetShowExpandedRatings()}\n        @param Year the year of the Show\n        @param ParentalRating the parental rating for the Show (this is no longer used since Airing contains the parental rating)\n        @param MiscList miscellaneous metadata for the Show\n        @param ExternalID the global ID which should be used to uniquely identify this Show\n        @param Language the language for the Show\n        @param OriginalAirDate the original airing date of the Show\n        @param SeasonNumber the season number of the Show\n        @param EpisodeNumber the episode number for the specific season for the Show\n        @return the newly created Show object\n        @since 7.1",
        "operationId": "AddShow",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Title",
            "in": "query"
          },
          {
            "name": "2",
            "type": "boolean",
            "required": true,
            "description": "IsFirstRun",
            "in": "query"
          },
          {
            "name": "3",
            "type": "string",
            "required": true,
            "description": "Episode",
            "in": "query"
          },
          {
            "name": "4",
            "type": "string",
            "required": true,
            "description": "Description",
            "in": "query"
          },
          {
            "name": "5",
            "type": "integer",
            "required": true,
            "description": "Duration",
            "in": "query"
          },
          {
            "name": "6",
            "type": "string",
            "required": true,
            "description": "Categories",
            "in": "query"
          },
          {
            "name": "7",
            "type": "string",
            "required": true,
            "description": "PeopleList",
            "in": "query"
          },
          {
            "name": "8",
            "type": "string",
            "required": true,
            "description": "RolesListForPeopleList",
            "in": "query"
          },
          {
            "name": "9",
            "type": "string",
            "required": true,
            "description": "Rated",
            "in": "query"
          },
          {
            "name": "10",
            "type": "string",
            "required": true,
            "description": "ExpandedRatingsList",
            "in": "query"
          },
          {
            "name": "11",
            "type": "string",
            "required": true,
            "description": "Year",
            "in": "query"
          },
          {
            "name": "12",
            "type": "string",
            "required": true,
            "description": "ParentalRating",
            "in": "query"
          },
          {
            "name": "13",
            "type": "string",
            "required": true,
            "description": "MiscList",
            "in": "query"
          },
          {
            "name": "14",
            "type": "string",
            "required": true,
            "description": "ExternalID",
            "in": "query"
          },
          {
            "name": "15",
            "type": "string",
            "required": true,
            "description": "Language",
            "in": "query"
          },
          {
            "name": "16",
            "type": "integer",
            "required": true,
            "description": "OriginalAirDate",
            "in": "query"
          },
          {
            "name": "17",
            "type": "integer",
            "required": true,
            "description": "SeasonNumber",
            "in": "query"
          },
          {
            "name": "18",
            "type": "integer",
            "required": true,
            "description": "EpisodeNumber",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Show)",
            "schema": {
              "$ref": "#/definitions/Show"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAiringsForShow": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "Returns a list of all of the Airings for the specified Show starting after the specified time.\n        @param Show the Show object\n        @param StartingAfterTime the time that all returned Airings should start after\n        @return a list of all of the Airings for the specified Show starting after the specified time",
        "operationId": "GetAiringsForShow",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Show",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "StartingAfterTime",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Airing"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetMovieImage": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "Returns a MetaImage for an image that\u0027s representative of this Movie\n        @param Show the Show object\n        @param Thumb true if it should return a thumbnail image\n        @return a MetaImage for an image that\u0027s representative of this Movie, null if there is no such image\n        @since 8.0",
        "operationId": "GetMovieImage",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Show",
            "in": "query"
          },
          {
            "name": "2",
            "type": "boolean",
            "required": true,
            "description": "Thumb",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is MetaImage)",
            "schema": {
              "$ref": "#/definitions/MetaImage"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetMovieImageAtIndex": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "Returns the image at the specified index for a Show that represents a Movie\n        @param Show the Show object\n        @param Index the 0-based index number of the image to retrieve\n        @param Thumb true if it should return a thumbnail image\n        @return a MetaImage that corresponds to the requested image, or null if it doesn\u0027t exist\n        @since 8.0",
        "operationId": "GetMovieImageAtIndex",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Show",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "Index",
            "in": "query"
          },
          {
            "name": "3",
            "type": "boolean",
            "required": true,
            "description": "Thumb",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is MetaImage)",
            "schema": {
              "$ref": "#/definitions/MetaImage"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetMovieImageCount": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "Returns the number of images available for a Show that represents a Movie\n        @param Show the Show object\n        @return the number of images available for a Show that represents a Movie\n        @since 8.0",
        "operationId": "GetMovieImageCount",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Show",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetMovieImageURL": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "Returns an image URL that\u0027s representative of this Movie\n        @param Show the Show object\n        @param Thumb true if it should return a thumbnail image\n        @return a URL for an image that\u0027s representative of this Movie, null if there is no such image\n        @since 8.0",
        "operationId": "GetMovieImageURL",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Show",
            "in": "query"
          },
          {
            "name": "2",
            "type": "boolean",
            "required": true,
            "description": "Thumb",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetMovieImageURLAtIndex": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "Returns the image URL at the specified index for a Show that represents a Movie\n        @param Show the Show object\n        @param Index the 0-based index number of the image to retrieve\n        @param Thumb true if it should return a thumbnail image\n        @return a URL that corresponds to the requested image, or null if it doesn\u0027t exist\n        @since 8.0",
        "operationId": "GetMovieImageURLAtIndex",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Show",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "Index",
            "in": "query"
          },
          {
            "name": "3",
            "type": "boolean",
            "required": true,
            "description": "Thumb",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetMovieStarRating": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "Returns the star rating for a Movie as a floating point number.\n        @param Show the movie to get the star rating for\n        @return the star rating as a floating point number, zero if there is no star rating for this Show\n        @since 8.1",
        "operationId": "GetMovieStarRating",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Show",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetOriginalAiringDate": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "Gets the date that this Show was originally aired at.\n        @param Show the Show object\n        @return the date that this Show was originally aired at, same units as java.lang.System.currentTimeMillis()",
        "operationId": "GetOriginalAiringDate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Show",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPeopleAndCharacterInShowInRole": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "Gets the people in the specified Show in the specified Role. Returned as a comma separated list.\n        Each name will also append the character they play if known; using the localized format \"Actor as Character\".\n        @param Show the Show object\n        @param Role the role to get the people for\n        @return the people in the specified Show in the specified Role\n        @since 7.0",
        "operationId": "GetPeopleAndCharacterInShowInRole",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Show",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Role",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPeopleAndCharacterInShowInRoles": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "Gets the people in the specified Show in the specified Roles. Returned as a comma separated list.\n        Each name will also append the character they play if known; using the localized format \"Actor as Character\".\n        @param Show the Show object\n        @param RoleList the roles to get the people for\n        @return the people in the specified Show in the specified Roles\n        @since 7.0",
        "operationId": "GetPeopleAndCharacterInShowInRoles",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Show",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "RoleList",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPeopleAndCharacterListInShow": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "Gets a list of all of the people involved in this Show and the character each of them plays if known. The order of the returned list will\n        correlate with the values returned from {@link #GetRolesInShow GetRolesInShow}.\n        @param Show the Show object\n        @return a list of all of the people involved in this Show with the characters they play as a String array\n        @since 7.0",
        "operationId": "GetPeopleAndCharacterListInShow",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Show",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPeopleAndCharacterListInShowInRole": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "Gets the people in the specified Show in the specified Role. Returned as a String array.\n        Each string will also indicate the character they play if known; using the localized format \"Actor as Character\".\n        @param Show the Show object\n        @param Role the role to get the people for\n        @return the people in the specified Show in the specified Role as a String array\n        @since 7.0",
        "operationId": "GetPeopleAndCharacterListInShowInRole",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Show",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Role",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPeopleAndCharacterListInShowInRoles": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "Gets the people in the specified Show in the specified Roles. Returned as a String array.\n        Each string will also indicate the character they play if known; using the localized format \"Actor as Character\".\n        @param Show the Show object\n        @param RoleList the roles to get the people for\n        @return the people in the specified Show in the specified Roles as a String array\n        @since 7.0",
        "operationId": "GetPeopleAndCharacterListInShowInRoles",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Show",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "RoleList",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPeopleInShow": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "Gets a list of all of the people involved in this Show. The order of the returned list will\n        correlate with the values returned from {@link #GetRolesInShow GetRolesInShow}.\n        @param Show the Show object\n        @return a list of all of the people involved in this Show as a comma separated list",
        "operationId": "GetPeopleInShow",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Show",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPeopleInShowInRole": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "Gets the people in the specified Show in the specified Role. Returned as a comma separated list.\n        @param Show the Show object\n        @param Role the role to get the people for\n        @return the people in the specified Show in the specified Role",
        "operationId": "GetPeopleInShowInRole",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Show",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Role",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPeopleInShowInRoles": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "Gets the people in the specified Show in the specified Roles. Returned as a comma separated list.\n        @param Show the Show object\n        @param RoleList the roles to get the people for\n        @return the people in the specified Show in the specified Roles",
        "operationId": "GetPeopleInShowInRoles",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Show",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "RoleList",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPeopleListInShow": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "Gets a list of all of the people involved in this Show. The order of the returned list will\n        correlate with the values returned from {@link #GetRolesInShow GetRolesInShow}.\n        @param Show the Show object\n        @return a list of all of the people involved in this Show as a String array\n        @since 5.1",
        "operationId": "GetPeopleListInShow",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Show",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPeopleListInShowInRole": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "Gets the people in the specified Show in the specified Role. Returned as a String array.\n        @param Show the Show object\n        @param Role the role to get the people for\n        @return the people in the specified Show in the specified Role as a String array\n        @since 5.1",
        "operationId": "GetPeopleListInShowInRole",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Show",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Role",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPeopleListInShowInRoles": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "Gets the people in the specified Show in the specified Roles. Returned as a String array.\n        @param Show the Show object\n        @param RoleList the roles to get the people for\n        @return the people in the specified Show in the specified Roles as a String array\n        @since 5.1",
        "operationId": "GetPeopleListInShowInRoles",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Show",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "RoleList",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPersonListInShow": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "Gets a list of all of the people involved in this Show. The order of the returned list will\n        correlate with the values returned from {@link #GetRolesInShow GetRolesInShow}.\n        @param Show the Show object\n        @return a list of all of the people involved in this Show as a Person array\n        @since 9.0.3",
        "operationId": "GetPersonListInShow",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Show",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Person"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPersonListInShowInRole": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "Gets the people in the specified Show in the specified Role. Returned as a Person array.\n        @param Show the Show object\n        @param Role the role to get the people for\n        @return the people in the specified Show in the specified Role as a Person array\n        @since 9.0.3",
        "operationId": "GetPersonListInShowInRole",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Show",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Role",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Person"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPersonListInShowInRoles": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "Gets the people in the specified Show in the specified Roles. Returned as a Person array.\n        @param Show the Show object\n        @param RoleList the roles to get the people for\n        @return the people in the specified Show in the specified Roles as a Person array\n        @since 9.0.3",
        "operationId": "GetPersonListInShowInRoles",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Show",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "RoleList",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Person"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetRoleTypes": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "Gets a list of all of the valid roles that people can have in a Show\n        @return a list of all of the valid roles that people can have in a Show",
        "operationId": "GetRoleTypes",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetRolesInShow": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "Gets a list of the roles for each of the people in the specified Show. The order of the returned list will\n        correlate with the values returned from {@link #GetPeopleInShow GetPeopleInShow}\n        @param Show the Show object\n        @return a list of the roles for each of the people in the specified Show",
        "operationId": "GetRolesInShow",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Show",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSDEPGInProgressSportStatus": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "Returns the current Schedules Direct provided in progress status for each of the provided external ID\u0027s.\n        The status will be one of the following:\n        0 \u003d Complete\n        1 \u003d In progress\n        2 \u003d Status is not available at the moment (try again in 30 seconds)\n        3 \u003d Program is in the future and will be able to be tracked\n        4 \u003d Program is not trackable\n        5 \u003d Schedules Direct is offline/not available right now (try again in an hour)\n        6 \u003d Schedules Direct authentication failure\n        7 \u003d General failure\n        @param ExternalIDs Array of external ID\u0027s to look up\n        @return int for each corresponding index representing the current status of the requested external ID\u0027s\n        @since 9.0",
        "operationId": "GetSDEPGInProgressSportStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "ExternalIDs",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetShowCategoriesList": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "Returns a String array of categories for the Show. For music files, this will be the genre.\n        @param Show the Show object\n        @return the categories for the Show\n        @since 7.1",
        "operationId": "GetShowCategoriesList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Show",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetShowCategoriesString": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "Returns a String of categories for the Show, separated by the specified delimiter if there are multiple levels of categories. For music files, this will be the genre.\n        @param Show the Show object\n        @param Delimiter the string to use to separate multiple categories\n        @return the categories for the Show\n        @since 8.0",
        "operationId": "GetShowCategoriesString",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Show",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Delimiter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetShowCategory": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "Returns the category for the specified Show. For music files, this will be the genre.\n        @param Show the Show object\n        @return the category for the Show",
        "operationId": "GetShowCategory",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Show",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetShowDescription": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "Returns the description for the specified Show\n        @param Show the Show object\n        @return the desccription for the Show",
        "operationId": "GetShowDescription",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Show",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetShowDuration": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "Returns the duration of the specified Show. Most Shows do not contain duration information, with the exception\n        of movies whose show duration indicates the runing time of the movie.\n        @param Show the Show object\n        @return the duration in milliseconds of the specified Show, 0 if it is not set",
        "operationId": "GetShowDuration",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Show",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetShowEpisode": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "Returns the episode name for the specified Show. For music files, this will be the name of the song.\n        @param Show the Show object\n        @return the episode name for the specified Show. For music files, this will be the name of the song. For imported videos, this will be the title of the file",
        "operationId": "GetShowEpisode",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Show",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetShowEpisodeNumber": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "Returns the episode number of the specified Show. For episodic content; sometimes a numeric value is given to the\n        episode in a season. If that information exists, this will return it.\n        @param Show the Show object\n        @return the episode number of the specified Show, 0 if it is not set\n        @since 7.1",
        "operationId": "GetShowEpisodeNumber",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Show",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetShowExpandedRatings": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "Returns the epxanded ratings information for the specified Show. This includes thigs like\n        Violence, Nudity, Adult Language, etc.\n        @param Show the Show object\n        @return the expanded ratings for the Show",
        "operationId": "GetShowExpandedRatings",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Show",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetShowExternalID": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "Gets the global unique ID which is used to identify Shows. This ID is common among all SageTV users.\n        @param Show the Show object\n        @return the global unique ID which represents this Show",
        "operationId": "GetShowExternalID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Show",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetShowForExternalID": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "Gets a Show based on the global unique ID which is used to identify Shows. This ID is common among all SageTV users.\n        This value can be obtained from {@link #GetShowExternalID GetShowExternalID()}\n       \n        @param ExternalID the external ID to find the corresponding Show for\n        @return the Show which corresponds to the specified externalID, or null if it isn\u0027t found in the database",
        "operationId": "GetShowForExternalID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "ExternalID",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Show)",
            "schema": {
              "$ref": "#/definitions/Show"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetShowImage": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "Returns an image specific to this Show. For the standard implementation, this will only return values for Movies (and not all movies have images).\n        Use {@link #GetShowImageCount GetShowImageCount} to determine what the valid values are for the Index parameter.\n        In the future this will be expanded to support plugin image providers to extend what is returned.\n        @param Show the Show object\n        @param Type the type of image, can be one of \"PhotoTall\", \"PhotoWide\", \"PhotoThumbTall\", \"PhotoThumbWide\", \"PosterTall\", \"PosterWide\", \"PosterThumbTall\" or \"PosterThumbWide\". In the future, there will be support to expand these types using image plugin providers.\n        @param Index the 0-based index of the image to retrieve when multiple images exist for a given Type\n        @param Fallback should be 3 if the returned image must match the requested parameters, 2 if a substitute image may be used that requires a similar type, 1 if a substitute image may be used that requires the same size, or 0 if any image type may be substituted (size is preferred over type)\n        @return a MetaImage corresponding to the requested image, or null if no image matching the requested parameters is found or an invalid Type is specified\n        @since 7.1",
        "operationId": "GetShowImage",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Show",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Type",
            "in": "query"
          },
          {
            "name": "3",
            "type": "integer",
            "required": true,
            "description": "Index",
            "in": "query"
          },
          {
            "name": "4",
            "type": "integer",
            "required": true,
            "description": "Fallback",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is MetaImage)",
            "schema": {
              "$ref": "#/definitions/MetaImage"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetShowImageCount": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "Returns a count of images specific to this Show. For the standard implementation, this will only return non-zero values for Movies (and not all movies have images).\n        In the future this will be expanded to support plugin image providers to extend what is returned.\n        @param Show the Show object\n        @param Type the type of image, can be one of \"PhotoTall\", \"PhotoWide\", \"PhotoThumbTall\", \"PhotoThumbWide\", \"PosterTall\", \"PosterWide\", \"PosterThumbTall\" or \"PosterThumbWide\". If this is null or the empty string, then it will return 1 if any images exist and zero if none exist. In the future, there will be support to expand these types using image plugin providers.\n        @return the number of images that match the requested type for the specified Show\n        @since 7.1",
        "operationId": "GetShowImageCount",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Show",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetShowLanguage": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "Returns the language that the specified Show is in.\n        @param Show the Show object\n        @return the language that the specified Show is in",
        "operationId": "GetShowLanguage",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Show",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetShowMisc": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "Returns the miscellaneous metadata for this Show. This includes things such as\n        the star rating for a movie, the studio a movie was produced at, etc.\n        @param Show the Show object\n        @return the miscellaneous metadata for this Show",
        "operationId": "GetShowMisc",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Show",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetShowParentalRating": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "Returns the parental rating for this show. The parental rating field in Airing is used instead of this in the standard implementation.\n        @deprecated\n        @param Show the Show object\n        @return the parental rating info for this show",
        "operationId": "GetShowParentalRating",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Show",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetShowRated": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "Returns the MPAA rating for the specified Show (only used for movies).\n        @param Show the Show object\n        @return the MPAA rating for this Show, will be one of: G, PG, R, PG-13, etc.",
        "operationId": "GetShowRated",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Show",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetShowSeasonNumber": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "Returns the season number of the specified Show. For episodic content; sometimes a numeric value is given to the\n        season. If that information exists, this will return it.\n        @param Show the Show object\n        @return the season number of the specified Show, 0 if it is not set\n        @since 7.1",
        "operationId": "GetShowSeasonNumber",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Show",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetShowSeriesInfo": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "Gets the SeriesInfo object for a specified Show if that Show is for a television series and there\n        is information on that series.\n       \n        @param Show the Show object\n        @return the SeriesInfo for the specified Show, or null if the Show has no SeriesInfo\n        @since 5.1",
        "operationId": "GetShowSeriesInfo",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Show",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is SeriesInfo)",
            "schema": {
              "$ref": "#/definitions/SeriesInfo"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetShowSubCategory": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "Returns the subcategory for the specified Show\n        @param Show the Show object\n        @return the subcategory for the Show",
        "operationId": "GetShowSubCategory",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Show",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetShowTitle": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "Returns the title of the specified Show. For music this will correspond to the Album name. For imported videos, For imported videos, this will be the title of the file with the relative import path as it\u0027s prefix.\n        @param Show the Show object\n        @return the title of the specified Show",
        "operationId": "GetShowTitle",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Show",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetShowYear": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "Gets the year of the specified Show. This is usually only valid for movies.\n        @param Show the Show object\n        @return the year the specified Show was produced in",
        "operationId": "GetShowYear",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Show",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dHasMovieImage": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "Returns true if the passed in Show that represents a Movie has any imagery associated with it\n        @param Show the Show object\n        @return true if the passed in Show that represents a Movie has any imagery associated with it, false otherwise\n        @since 8.0",
        "operationId": "HasMovieImage",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Show",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsMovie": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "Returns true if the specified Show object is a Movie. This is true if the ExternalID starts with \u0027MV\u0027 or if the primary\n        category for the content is \"Movie\"\n       \n        @param Show the Show to test if its a Movie or not\n        @return true if the specified Show is a Movie\n        @since 8.0",
        "operationId": "IsMovie",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Show",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsSDEPGInProgressSport": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "Returns if the provided external ID\u0027s can be tracked when in progress through Schedules Direct.\n        Note that if the Schedules Direct service is not available, this will always return false\n        for all requested ID\u0027s.\n        @param ExternalIDs Array of external ID\u0027s to look up\n        @return true for the corresponding index of each external ID that can be tracked, otherwise false on the same index\n        @since 9.0",
        "operationId": "IsSDEPGInProgressSport",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "ExternalIDs",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsShowEPGDataUnique": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "If this is true, then two Airings that both represent this Show will contain the same content.\n        If this is false then it means the EPG metadata for the content is \u0027generic\u0027 two different Airings\n        each with this Show for its metadata may actually represent different content\n        @param Show the Show object\n        @return true if all Airings of this Show represent the same content, false otherwise",
        "operationId": "IsShowEPGDataUnique",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Show",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsShowFirstRun": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "Returns true if the specified Airing represents the first run of the Show content.\n        @param Airing the Airing object\n        @return true if the specified Airing represents the first run of its Show content, false otherwise",
        "operationId": "IsShowFirstRun",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Airing",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsShowObject": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "Returns true if the passed in argument is a Show object. No automatic type conversion\n        will be done on the argument.\n        @param Show the object to test to see if its a Show\n        @return true if the passed in argument is a Show object, false otherwise",
        "operationId": "IsShowObject",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Show",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsShowReRun": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "ShowAPI"
        ],
        "description": "Returns true if the specified Airing represents a rerun of the Show content.\n        @param Airing the Airing object\n        @return true if the specified Airing represents a rerun of its Show content, false otherwise",
        "operationId": "IsShowReRun",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Airing",
            "required": true,
            "description": "Airing",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dDeleteAllSystemMessages": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "SystemMessageAPI"
        ],
        "description": "Deletes all the SystemMessages from the queue. This will not have any effect on the global alert level.\n        @since 6.6",
        "operationId": "DeleteAllSystemMessages",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dDeleteSystemMessage": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "SystemMessageAPI"
        ],
        "description": "Deletes the specified SystemMessage from the queue. This will not have any effect on the global alert level.\n        @param message the SystemMessage object to delete\n        @since 6.6",
        "operationId": "DeleteSystemMessage",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/SystemMessage",
            "required": true,
            "description": "message",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSystemAlertLevel": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "SystemMessageAPI"
        ],
        "description": "Gets the global alert level in the system.\n        @return a value from 0-3; with 0\u003dNo Alert, 1\u003dInfo Alert, 2\u003dWarning Alert, 3\u003dError Alert\n        @since 6.6",
        "operationId": "GetSystemAlertLevel",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSystemMessageEndTime": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "SystemMessageAPI"
        ],
        "description": "Gets the time when this SystemMessage was last posted. For messages that did not repeat this will be the same as\n        GetSystemMessageTime. For messages that repeated; this will be the time of the last repeating occurence.\n        @param message the SystemMessage object to get the end time of\n        @return the end time for the specified SystemMessage\n        @since 6.6",
        "operationId": "GetSystemMessageEndTime",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/SystemMessage",
            "required": true,
            "description": "message",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSystemMessageLevel": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "SystemMessageAPI"
        ],
        "description": "Returns the alert level for the SystemMessage that was specified.\n        @param message the SystemMessage object to get the alert level of\n        @return a value from 0-3; with 0\u003dNo Alert, 1\u003dInfo Alert, 2\u003dWarning Alert, 3\u003dError Alert\n        @since 6.6",
        "operationId": "GetSystemMessageLevel",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/SystemMessage",
            "required": true,
            "description": "message",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSystemMessageRepeatCount": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "SystemMessageAPI"
        ],
        "description": "Gets the number of times this message was repeated. For a message that repeated once (i.e. it had 2 occurences), this\n        method will return 2.\n        @param message the SystemMessage object to get the repeat count for\n        @return the repeat count for the specified SystemMessage\n        @since 6.6",
        "operationId": "GetSystemMessageRepeatCount",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/SystemMessage",
            "required": true,
            "description": "message",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSystemMessageString": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "SystemMessageAPI"
        ],
        "description": "Gets the \u0027message string\u0027 associated with this SystemMessage. This is the same result as converting the object to a String.\n        @param message the SystemMessage object to get the \u0027message string\u0027 for\n        @return the \u0027message string\u0027 for the specified SystemMessage\n        @since 6.6",
        "operationId": "GetSystemMessageString",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/SystemMessage",
            "required": true,
            "description": "message",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSystemMessageTime": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "SystemMessageAPI"
        ],
        "description": "Gets the time when this SystemMessage was first posted.\n        @param message the SystemMessage object to get the time of\n        @return the time for the specified SystemMessage\n        @since 6.6",
        "operationId": "GetSystemMessageTime",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/SystemMessage",
            "required": true,
            "description": "message",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSystemMessageTypeCode": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "SystemMessageAPI"
        ],
        "description": "Returns an integer which represents the type of SystemMessage that was specified.\n        @param message the SystemMessage object to get the type of\n        @return the type for the specified SystemMessage\n        @since 6.6",
        "operationId": "GetSystemMessageTypeCode",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/SystemMessage",
            "required": true,
            "description": "message",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSystemMessageTypeName": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "SystemMessageAPI"
        ],
        "description": "Returns a localized string which represents the type of SystemMessage that was specified.\n        @param message the SystemMessage object to get the type of\n        @return the type for the specified SystemMessage\n        @since 6.6",
        "operationId": "GetSystemMessageTypeName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/SystemMessage",
            "required": true,
            "description": "message",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSystemMessageVariable": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "SystemMessageAPI"
        ],
        "description": "Returns the SystemMessage variable property associated with the specified SystemMessage. Depending\n        upon the type of message; different variables will be assigned that can be used to do further analysis/processing\n        on the message or to guide the user through resolution steps.\n        @param message the SystemMessage object to lookup the variable in\n        @param VarName the name of the variable to lookup in this SystemMessage (string based values)\n        @return a String that corresponds to the requested variable or null if it does not exist\n        @since 6.6",
        "operationId": "GetSystemMessageVariable",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/SystemMessage",
            "required": true,
            "description": "message",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "VarName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSystemMessageVariableNames": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "SystemMessageAPI"
        ],
        "description": "Returns the names of the variables associated with the specified SystemMessage. Depending\n        upon the type of message; different variables will be assigned that can be used to do further analysis/processing\n        on the message or to guide the user through resolution steps. The actual values can be retrieved with\n        GetSystemMessageVariable.\n        @param message the SystemMessage object to get the variable names of\n        @return a String array with all the names of the variables for the specified SystemMessage\n        @since 7.0",
        "operationId": "GetSystemMessageVariableNames",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/SystemMessage",
            "required": true,
            "description": "message",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSystemMessages": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "SystemMessageAPI"
        ],
        "description": "Returns the list of SystemMessage objects currently in the queue.\n        @return an array of SystemMessage objects currently in the queue\n        @since 6.6",
        "operationId": "GetSystemMessages",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SystemMessage"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsSystemMessageObject": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "SystemMessageAPI"
        ],
        "description": "Returns true if the passed in argument is a SystemMessage object\n        @param SystemMessage the object to test to see if it is a SystemMessage object\n        @return true if the passed in argument is a SystemMessage object, false otherwise\n        @since 7.0",
        "operationId": "IsSystemMessageObject",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "SystemMessage",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dPostSystemMessage": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "SystemMessageAPI"
        ],
        "description": "Creates a new SystemMessage and posts it to the message queue.\n        Predefined message codes of interest for posting messages are:\n        \u003cbr\u003e\n        SOFTWARE_UPDATE_MSG \u003d 1202\u003cbr\u003e\n        STORAGE_MONITOR_MSG \u003d 1203\u003cbr\u003e\n        GENERAL_MSG \u003d 1204\u003cbr\u003e\n        \u003cbr\u003e You may also use other user-defined message codes which should be greater than 9999. To give those messages a \u0027type name\u0027 which\n        will be visible by the user; you can defined a message variable with the name \u0027typename\u0027 and then that will be displayed.\n        @param MessageCode the integer code that specifies the type of message\n        @param MessageLevel the integer code specifying the level of the message; 0\u003dStatus(does not raise global level),1\u003dInfo, 2\u003dWarning, 3\u003dError\n        @param MessageString a localized message string that explains what the message is in detail\n        @param MessageVariables a java.util.Properties object which has name-\u0026gt;value pairs that represent variables corresponding to the details of this message\n        @since 6.6",
        "operationId": "PostSystemMessage",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "integer",
            "required": true,
            "description": "MessageCode",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "MessageLevel",
            "in": "query"
          },
          {
            "name": "3",
            "type": "string",
            "required": true,
            "description": "MessageString",
            "in": "query"
          },
          {
            "name": "4",
            "type": "#/definitions/java.util.Properties",
            "required": true,
            "description": "MessageVariables",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dResetSystemAlertLevel": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "SystemMessageAPI"
        ],
        "description": "Resets the global alert level in the system back to zero.\n        @since 6.6",
        "operationId": "ResetSystemAlertLevel",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAllTVEditorials": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "TVEditorialAPI"
        ],
        "description": "Returns a list of all of the \u0027TV Editorials\u0027 which are stories about TV shows\n        @return a list of all of the \u0027TV Editorials\u0027\n        @since 5.1",
        "operationId": "GetAllTVEditorials",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TVEditorial"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetEditorialAirDate": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "TVEditorialAPI"
        ],
        "description": "Returns a String representing the airing date for the content the editorial is about\n        @param TVEditorial the TVEditorial object\n        @return a String representing the airing date for the content the editorial is about\n        @since 5.1",
        "operationId": "GetEditorialAirDate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "TVEditorial",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetEditorialImage": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "TVEditorialAPI"
        ],
        "description": "Returns the image that corresponds to this editorial if there is one\n        @param TVEditorial the TVEditorial object\n        @return the image that corresponds to this editorial if there is one\n        @since 5.1",
        "operationId": "GetEditorialImage",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "TVEditorial",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is MetaImage)",
            "schema": {
              "$ref": "#/definitions/MetaImage"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetEditorialNetwork": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "TVEditorialAPI"
        ],
        "description": "Returns the network that the Show for this editorial is broadcast on\n        @param TVEditorial the TVEditorial object\n        @return the network that the Show for this editorial is broadcast on\n        @since 5.1",
        "operationId": "GetEditorialNetwork",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "TVEditorial",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetEditorialShow": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "TVEditorialAPI"
        ],
        "description": "Returns the Show for the specified TVEditorial\n        @param TVEditorial the TVEditorial object\n        @return the Show for the specified TVEditorial\n        @since 5.1",
        "operationId": "GetEditorialShow",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "TVEditorial",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetEditorialText": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "TVEditorialAPI"
        ],
        "description": "Returns the text for the specified TVEditorial\n        @param TVEditorial the TVEditorial object\n        @return the text for the specified TVEditorial\n        @since 5.1",
        "operationId": "GetEditorialText",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "TVEditorial",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetEditorialTitle": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "TVEditorialAPI"
        ],
        "description": "Returns the title for the specified TVEditorial\n        @param TVEditorial the TVEditorial object\n        @return the title for the specified TVEditorial\n        @since 5.1",
        "operationId": "GetEditorialTitle",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "TVEditorial",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dHasEditorialImage": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "TVEditorialAPI"
        ],
        "description": "Returns true if the specified editorial has an image that corresponds to it\n        @param TVEditorial the TVEditorial object\n        @return true if the specified editorial has an image that corresponds to it, false otherwise\n        @since 5.1",
        "operationId": "HasEditorialImage",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "TVEditorial",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dAddTranscodeFormat": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "TranscodeAPI"
        ],
        "description": "Adds the specified transcode format to the list of available formats\n        @param FormatName the name of the new transcode format\n        @param FormatDetails the detailed property string for the new format\n        @since 5.1",
        "operationId": "AddTranscodeFormat",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "FormatName",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "FormatDetails",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dAddTranscodeJob": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "TranscodeAPI"
        ],
        "description": "Adds the specified job to the transcoder\u0027s queue. Returns a Job ID# for future reference of it. This allows specification of the\n        start time and duration for the media which allows extracting a \u0027clip\u0027 from a file.\n        @param SourceMediaFile the source file that is to be transcoded, if it consists of multiple segments, all segments will be transcoded\n        @param FormatName the name of the transcode format to use for this conversion\n        @param DestinationFile the target file path for the conversion or null if SageTV should automatically determine the filename of the target files, if a directory is given then SageTV auto-generates the filename in that directory\n        @param DeleteSourceAfterTranscode if true then the source media files are deleted when the transcoding is done, if false the source files are kept\n        @param ClipTimeStart specifies the time in the file in seconds that the clip starts at (this number is relative to the beginning of the actual file)\n        @param ClipDuration specifies the duration of the clip in seconds to extract from the file (0 to convert until the end of the file)\n        @return the job ID number to reference this transcode job\n        @since 5.1",
        "operationId": "AddTranscodeJob",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/MediaFile",
            "required": true,
            "description": "SourceMediaFile",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "FormatName",
            "in": "query"
          },
          {
            "name": "3",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "DestinationFile",
            "in": "query"
          },
          {
            "name": "4",
            "type": "boolean",
            "required": true,
            "description": "DeleteSourceAfterTranscode",
            "in": "query"
          },
          {
            "name": "5",
            "type": "integer",
            "required": true,
            "description": "ClipTimeStart",
            "in": "query"
          },
          {
            "name": "6",
            "type": "integer",
            "required": true,
            "description": "ClipDuration",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dCanFileBeTranscoded": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "TranscodeAPI"
        ],
        "description": "Returns true if the specified MediaFile can be transcoded, false otherwise. Transcoding may be restricted\n        by certain formats and also by DRM.\n        @param MediaFile the MediaFile object\n        @return true if the specified MediaFile can be transcoded, false otherwise\n        @since 5.1",
        "operationId": "CanFileBeTranscoded",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/MediaFile",
            "required": true,
            "description": "MediaFile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dCancelTranscodeJob": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "TranscodeAPI"
        ],
        "description": "Cancels the specified transcoding ob\n        @param JobID the Job ID of the transcoding job to cancel\n        @return true if the job exists and was cancelled, false otherwise\n        @since 5.1",
        "operationId": "CancelTranscodeJob",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "integer",
            "required": true,
            "description": "JobID",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dClearTranscodedJobs": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "TranscodeAPI"
        ],
        "description": "Removes all of the completed transcode jobs from the transcoder queue\n        @since 5.1",
        "operationId": "ClearTranscodedJobs",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetTranscodeFormatDetails": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "TranscodeAPI"
        ],
        "description": "Gets the format details for the specified format name\n        @param FormatName the name of the transcode format to get the parameter details for\n        @return the full detail string that describes the specified transcode format\n        @since 5.1",
        "operationId": "GetTranscodeFormatDetails",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "FormatName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetTranscodeFormats": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "TranscodeAPI"
        ],
        "description": "Gets the names of the different transcode formats\n        @return a list of the names of the different transcode formats\n        @since 5.1",
        "operationId": "GetTranscodeFormats",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetTranscodeJobClipDuration": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "TranscodeAPI"
        ],
        "description": "Returns the clip duration for the specified transcode job\n        @param JobID the Job ID of the transcoding job to get the destination file for\n        @return the clip duration for the specified transcode job, 0 if the entire file will be trancoded\n        @since 5.1",
        "operationId": "GetTranscodeJobClipDuration",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "integer",
            "required": true,
            "description": "JobID",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetTranscodeJobClipStart": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "TranscodeAPI"
        ],
        "description": "Returns the clip start time for the specified transcode job\n        @param JobID the Job ID of the transcoding job to get the destination file for\n        @return the clip start time for the specified transcode job, 0 if the start time is unspecified\n        @since 5.1",
        "operationId": "GetTranscodeJobClipStart",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "integer",
            "required": true,
            "description": "JobID",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetTranscodeJobCompletePercent": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "TranscodeAPI"
        ],
        "description": "Gets the percent complete (between 0 and 1 as a float) for a transcode job\n        @param JobID the Job ID of the transcoding job to get the percent complete of\n        @return the percent complete for the specified transcoding job\n        @since 5.1",
        "operationId": "GetTranscodeJobCompletePercent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "integer",
            "required": true,
            "description": "JobID",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetTranscodeJobDestFile": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "TranscodeAPI"
        ],
        "description": "Gets the destination file of the specified transcoding job\n        @param JobID the Job ID of the transcoding job to get the destination file for\n        @return the destination file of the specified transcoding job, or null if no destination file was specified\n        @since 5.1",
        "operationId": "GetTranscodeJobDestFile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "integer",
            "required": true,
            "description": "JobID",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is java.io.File)",
            "schema": {
              "$ref": "#/definitions/java.io.File"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetTranscodeJobFormat": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "TranscodeAPI"
        ],
        "description": "Gets the target format of the specified transcoding job\n        @param JobID the Job ID of the transcoding job to get the target format file for\n        @return the target format of the specified transcoding job\n        @since 5.1",
        "operationId": "GetTranscodeJobFormat",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "integer",
            "required": true,
            "description": "JobID",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetTranscodeJobShouldKeepOriginal": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "TranscodeAPI"
        ],
        "description": "Returns whether or not the specified transcoding job retains the original source file\n        @param JobID the Job ID of the transcoding job to get the destination file for\n        @return true if the specified transcoding job keeps its original file when done, false otherwise\n        @since 5.1",
        "operationId": "GetTranscodeJobShouldKeepOriginal",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "integer",
            "required": true,
            "description": "JobID",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetTranscodeJobSourceFile": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "TranscodeAPI"
        ],
        "description": "Gets the source file of the specified transcoding job\n        @param JobID the Job ID of the transcoding job to get the source file for\n        @return the source file of the specified transcoding job\n        @since 5.1",
        "operationId": "GetTranscodeJobSourceFile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "integer",
            "required": true,
            "description": "JobID",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is MediaFile)",
            "schema": {
              "$ref": "#/definitions/MediaFile"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetTranscodeJobStatus": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "TranscodeAPI"
        ],
        "description": "Gets the status of the specified transcoding job\n        @param JobID the Job ID of the transcoding job to get the status of\n        @return the status information for the specified transcoding job, will be one of: COMPLETED, TRANSCODING, WAITING TO START, or FAILED\n        @since 5.1",
        "operationId": "GetTranscodeJobStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "integer",
            "required": true,
            "description": "JobID",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetTranscodeJobs": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "TranscodeAPI"
        ],
        "description": "Returns a list of the job IDs for all the current jobs in the transcode queue.\n        @return the list of job IDs for all the current jobs in the transcode queue\n        @since 5.1",
        "operationId": "GetTranscodeJobs",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dRemoveTranscodeFormat": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "TranscodeAPI"
        ],
        "description": "Removed the specified transcode format to the list of available formats\n        @param FormatName the name of the transcode format to remove\n        @since 5.1",
        "operationId": "RemoveTranscodeFormat",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "FormatName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dAddUserRecord": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "UserRecordAPI"
        ],
        "description": "Creates a new UserRecord object in the database under the specified data \u0027Store\u0027 and with the\n        specified \u0027Key\u0027. If a UserRecord already exists with that Store/Key combination, it will be returned instead.\n        @param Store the data store name to add the user record to\n        @param Key the unique key to use for indexing this record\n        @return the newly created UserRecord object, or if one already exists with this Store/Key combination, that is returned, null is returned if any parameters are null or the empty string\n        @since 7.0",
        "operationId": "AddUserRecord",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Store",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Key",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is UserRecord)",
            "schema": {
              "$ref": "#/definitions/UserRecord"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dDeleteAllUserRecords": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "UserRecordAPI"
        ],
        "description": "Deletes the all the UserRecords from the database under the specified Store.\n        @param Store the Store name that should have all corresponding UserRecords deleted\n        @since 7.0",
        "operationId": "DeleteAllUserRecords",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Store",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dDeleteUserRecord": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "UserRecordAPI"
        ],
        "description": "Deletes the specified UserRecord object from the database.\n        @param UserRecord the UserRecord object to remove from the database\n        @return true if the specified UserRecord was removed from the database, false if it no longer exists in the database\n        @since 7.0",
        "operationId": "DeleteUserRecord",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "UserRecord",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAllUserRecords": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "UserRecordAPI"
        ],
        "description": "Gets all existing UserRecord objects that exist under the specified data Store.\n        @param Store the data store name to retrieve the UserRecords from\n        @return an array of all UserRecord objects in the database under the specified Store\n        @since 7.0",
        "operationId": "GetAllUserRecords",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Store",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserRecord"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAllUserStores": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "UserRecordAPI"
        ],
        "description": "Gets all existing Stores that UserRecord objects have been created under in the database.\n        @return an array of all the Store names that exist for UserRecords in the database\n        @since 7.0",
        "operationId": "GetAllUserStores",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetUserRecord": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "UserRecordAPI"
        ],
        "description": "Gets an existing UserRecord object in the database under the specified data \u0027Store\u0027 and with the\n        specified \u0027Key\u0027.\n        @param Store the data store name to retrieve the UserRecord from\n        @param Key the unique key that was used when creating the UserRecord\n        @return the requested UserRecord object, or null if no matching record was found\n        @since 7.0",
        "operationId": "GetUserRecord",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Store",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Key",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is UserRecord)",
            "schema": {
              "$ref": "#/definitions/UserRecord"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetUserRecordData": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "UserRecordAPI"
        ],
        "description": "Gets the Value from the specified Name that\u0027s stored in the given UserRecord object.\n        @param UserRecord the UserRecord object\n        @param Name the name to retrieve the corresponding value for from the specified UserRecord object, must not be null or the empty String\n        @return the Value from the specified Name that\u0027s stored in the given UserRecord object., null will be returned if the Name has no defined value\n        @since 7.0",
        "operationId": "GetUserRecordData",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "UserRecord",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetUserRecordNames": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "UserRecordAPI"
        ],
        "description": "Gets a list of all the \u0027Name\u0027 values used in name-\u0026gt;value pairs in this UserRecord object\n        @param UserRecord the UserRecord object to get the list of Names stored in\n        @return an array of all the names used to store data within this UserRecord object\n        @since 7.0",
        "operationId": "GetUserRecordNames",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "UserRecord",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsUserRecordObject": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "UserRecordAPI"
        ],
        "description": "Returns true if the passed in argument is a UserRecord object\n        @param UserRecord the object to test to see if it is a UserRecord object\n        @return true if the passed in argument is a UserRecord object, false otherwise\n        @since 7.0",
        "operationId": "IsUserRecordObject",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "UserRecord",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetUserRecordData": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "UserRecordAPI"
        ],
        "description": "Sets the Value for the specified Name that\u0027s stored in the given UserRecord object\n        @param UserRecord the UserRecord object\n        @param Name the Name to set the corresponding Value for in the specified UserRecord object, must not be null or the empty String\n        @param Value the Value to set, use null to clear the existing setting for the specified Name\n        @since 7.0",
        "operationId": "SetUserRecordData",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "UserRecord",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Name",
            "in": "query"
          },
          {
            "name": "3",
            "type": "string",
            "required": true,
            "description": "Value",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dAddElement": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Add the element with the specified value to this data. Works for java.util.Collection implementations.\n        @param Data the java.util.Collection object to add the element to\n        @param Value the value to add to the data\n        @return for java.util.Collections true if the data changed as a result of the call (i.e. the add succeded and was not redundant), false otherwise\n        @since 7.0",
        "operationId": "AddElement",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/java.util.Collection",
            "required": true,
            "description": "Data",
            "in": "query"
          },
          {
            "name": "2",
            "type": "#/definitions/Object",
            "required": true,
            "description": "Value",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dAddToGrouping": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Adds the specified value into the grouping using the specified key. Useful on results from {@link Database#GroupByMethod GroupByMethod()}\n        This works using a Map implementation that has Collections as the values and objects as the keys. So if two objects have the same key\n        they will both still exist in the map by being in the Collection that corresponds to their key.\n        @param Grouping the grouping (Map) to add the new key/value pair to\n        @param Key the key to use to store the value in the map\n        @param Value the value to store\n        @return true is always returned",
        "operationId": "AddToGrouping",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/java.util.Map",
            "required": true,
            "description": "Grouping",
            "in": "query"
          },
          {
            "name": "2",
            "type": "#/definitions/Object",
            "required": true,
            "description": "Key",
            "in": "query"
          },
          {
            "name": "3",
            "type": "#/definitions/Object",
            "required": true,
            "description": "Value",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dAnimate": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Starts an animation for the specified Widget in the specified Layer. If the Widget name ends with a \u0027\u0027 then all Widgets\n        that match will be animated; otherwise only the first visible Widget matching the name will be animated. The Widget must\n        also have the specified Layer as it\u0027s animation layer (i.e. if the Layer is Foreground, then the corresponding Widget\n        should have an Animation property of LayerForeground). The type of animation is controlled by AnimtionName. There\u0027s\n        also suffixes that can be appened to the AnimationName that effect how the timescale for the animation progresses.\n        There\u0027s also other suffixes that can be used to specify other options for the animations.\n        \u003cp\u003e\n        Valid strings for the AnimationName are:\u003cbr\u003e\n        \u003cul\u003e\u003cli\u003e\n        FullSlideDownOut - slides down off the bottom of the screen\u003c/li\u003e\u003cli\u003e\n        FullSlideDownIn - slides down in from the top of the screen\u003c/li\u003e\u003cli\u003e\n        FullSlideUpOut - slides up off the top of the screen\u003c/li\u003e\u003cli\u003e\n        FullSlideUpIn - slides up in from the bottom of the screen\u003c/li\u003e\u003cli\u003e\n        FullSlideLeftOut - slides off to the left of the screen\u003c/li\u003e\u003cli\u003e\n        FullSlideLeftIn - slides in from the left of the screen\u003c/li\u003e\u003cli\u003e\n        FullSlideRightOut - slides off the right of the screen\u003c/li\u003e\u003cli\u003e\n        FullSlideRightIn - slides in from the right of the screen\u003c/li\u003e\u003cli\u003e\n        SlideDownOut - slides down off the bottom of its parent component\u003c/li\u003e\u003cli\u003e\n        SlideDownIn - slides down in from the top of its parent component\u003c/li\u003e\u003cli\u003e\n        SlideUpOut - slides up off the top of its parent component\u003c/li\u003e\u003cli\u003e\n        SlideUpIn - slides up in from the bottom of its parent component\u003c/li\u003e\u003cli\u003e\n        SlideLeftOut - slides off to the left of its parent component\u003c/li\u003e\u003cli\u003e\n        SlideLeftIn - slides in from the left of its parent component\u003c/li\u003e\u003cli\u003e\n        SlideRightOut - slides off the right of its parent component\u003c/li\u003e\u003cli\u003e\n        SlideRightIn - slides in from the right of its parent component\u003c/li\u003e\u003cli\u003e\n        FadeOut - fades out\u003c/li\u003e\u003cli\u003e\n        FadeIn - fades in\u003c/li\u003e\u003cli\u003e\n        Smooth - smoothly transitions from one position \u0026amp; size to another; the destination image is used for the animation\u003c/li\u003e\u003cli\u003e\n        Morph - smoothly transitions from one position \u0026amp; size to another; the image fades between the source and the destination\u003c/li\u003e\u003cli\u003e\n        ZoomOut - shrinks the size down to nothing from its source size\u003c/li\u003e\u003cli\u003e\n        ZoomIn - grows the size from nothing to its destination size\u003c/li\u003e\u003cli\u003e\n        HZoomOut - shrinks the size down to nothing horitonzatlly from its source size\u003c/li\u003e\u003cli\u003e\n        HZoomIn - grows the size from nothing horitonzatlly to its destination size\u003c/li\u003e\u003cli\u003e\n        VZoomOut - shrinks the size down to nothing vertically from its source size\u003c/li\u003e\u003cli\u003e\n        VZoomIn - grows the size from nothing vertically to its destination size\u003c/li\u003e\n        \u003c/ul\u003e\u003cp\u003e\n        Timeline modifications for animations affect how the timescale progresses. For out animations, they are eased out if non-linear.\n        For in animations, they are eased in if non-linear. For animations that are neither; the timescale modification occurs at both ends.\n        Bounce only works properly for \u0027in\u0027 animations.\n        \u003cp\u003e\n        Valid suffixes for any of the animations are (default is Quadratic):\u003cbr\u003e\u003cul\u003e\u003cli\u003e\n        Linear - animation follows a smooth timeline (first order)\u003c/li\u003e\u003cli\u003e\n        Quadratic - animation follows a quadratic timeline (second order)\u003c/li\u003e\u003cli\u003e\n        Cubic - animation follows a cubic timeline (third order)\u003c/li\u003e\u003cli\u003e\n        Bounce - animation follows a timeline that looks like it \u0027bounces\u0027 in\u003c/li\u003e\u003c/ul\u003e\n       \u003cp\u003e\n        Additional options for the animation may also be specified by combining additional suffixes to the\n        AnimationName. The following is a list of valid option suffixes. \u003cbr\u003e\u003cul\u003e\u003cli\u003e\n        Fade - applies an additional fade in/out effect to the animation (i.e. ZoomOutFade) \u003c/li\u003e\u003cli\u003e\n        North - for Zoom animations will center the zoom around the top of the component (i.e. ZoomInNorth) \u003c/li\u003e\u003cli\u003e\n        West - for Zoom animations will center the zoom around the left of the component \u003c/li\u003e\u003cli\u003e\n        South - for Zoom animations will center the zoom around the bottom of the component \u003c/li\u003e\u003cli\u003e\n        East - for Zoom animations will center the zoom around the right of the component \u003c/li\u003e\u003cli\u003e\n        Behind - for Out animations will cause it to be rendered behind the other layers instead of on top as Out animations usually are \u003c/li\u003e\u003cli\u003e\n        Unclipped - for Slide animations will cause the same motion to occur but without clipping the area when drawn \u003c/li\u003e\u003cli\u003e\n        Unease - for In or Out animations it will reverse the \u0027easing\u0027 direction so you can slide in \u0026amp; out the same panel w/ out overlap \u003c/li\u003e\u003c/ul\u003e\n       \u003cp\u003e\n        You may combine the directional suffixes to get an additional four directions (i.e. ZoomOutNorthEast). And this\n        can also be combined with the timeline suffixes as well, or even Fade (i.e. ZoomInQuadraticSouthWestFade)\n        \u003cbr\u003e\n        For delaying the start of an animation; see here {@link #AnimateDelayed AnimateDelayed()}\n       \n        @param WidgetName the name of the Widget that should be animated\n        @param LayerName the name of the Layer the animated Widget must be in\n        @param AnimationName the name of the animation to perform\n        @param Duration the time in milliseconds that it should take for the animation to complete\n        @return returns true if a matching Widget was found to perform the animation on; false otherwise\n       \n        @since 6.2",
        "operationId": "Animate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "WidgetName",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "LayerName",
            "in": "query"
          },
          {
            "name": "3",
            "type": "string",
            "required": true,
            "description": "AnimationName",
            "in": "query"
          },
          {
            "name": "4",
            "type": "integer",
            "required": true,
            "description": "Duration",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dAnimateDelayed": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "This is the same as the Animate API call; but it allows specifiying a delay that should occur before the animation actually starts.\n        Useful for creating sequences of animation effects.\n       \n        For more details see here: {@link #Animate Animate()}\n       \n        @param WidgetName the name of the Widget that should be animated\n        @param LayerName the name of the Layer the animated Widget must be in\n        @param AnimationName the name of the animation to perform\n        @param Duration the time in milliseconds that it should take for the animation to complete\n        @param StartDelay the delay in milliseconds before this animation should start\n        @param Interruptable true if the animation can be interrupted to render the next UI update; false if it must complete (this parameter is optional and defaults to false)\n        @return returns true if a matching Widget was found to perform the animation on; false otherwise\n       \n        @since 6.2",
        "operationId": "AnimateDelayed",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "WidgetName",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "LayerName",
            "in": "query"
          },
          {
            "name": "3",
            "type": "string",
            "required": true,
            "description": "AnimationName",
            "in": "query"
          },
          {
            "name": "4",
            "type": "integer",
            "required": true,
            "description": "Duration",
            "in": "query"
          },
          {
            "name": "5",
            "type": "integer",
            "required": true,
            "description": "StartDelay",
            "in": "query"
          },
          {
            "name": "6",
            "type": "boolean",
            "required": true,
            "description": "Interruptable",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dAnimateTransition": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Performs an Animation between two different Widgets. Normally animations are performed between two different states for a single Widget.\n        This API call allows an animation to occur between two different Widgets and will usually be used with a \u0027Morph\u0027 AnimationName. This\n        may only target a single Widget; so the \u0027\u0027 suffix is not used on the WidgetNames in this call.\n       \u003cbr\u003e\n        For more details on Animations see here: {@link #Animate Animate()}\n       \u003cbr\u003e\n        @param SourceWidgetName the name of the Widget to use as the source for this animation\n        @param TargetWidgetName the name of the Widget to use as the target (destination) for this animation\n        @param LayerName the name of the Layer the animated Widget must be in\n        @param AnimationName the name of the animation to perform\n        @param Duration the time in milliseconds that it should take for the animation to complete\n        @param StartDelay the delay in milliseconds before this animation should start\n        @param Interruptable true if the animation can be interrupted to render the next UI update; false if it must complete (this parameter is optional and defaults to false)\n        @return returns true if a matching Widget was found to perform the animation on; false otherwise\n       \n        @since 6.3",
        "operationId": "AnimateTransition",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "SourceWidgetName",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "TargetWidgetName",
            "in": "query"
          },
          {
            "name": "3",
            "type": "string",
            "required": true,
            "description": "LayerName",
            "in": "query"
          },
          {
            "name": "4",
            "type": "string",
            "required": true,
            "description": "AnimationName",
            "in": "query"
          },
          {
            "name": "5",
            "type": "integer",
            "required": true,
            "description": "Duration",
            "in": "query"
          },
          {
            "name": "6",
            "type": "integer",
            "required": true,
            "description": "StartDelay",
            "in": "query"
          },
          {
            "name": "7",
            "type": "boolean",
            "required": true,
            "description": "Interruptable",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dAnimateVariable": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "For more details on Animations see here: {@link #Animate Animate()}\n       \n        In addition to what\u0027s specified in the Animate API call; this also offers restricting of an\n        Animation by a variable name and value. Usage of the \u0027\u0027 suffix on the WidgetName is allowed.\n       \n        @param WidgetName the name of the Widget that should be animated\n        @param LayerName the name of the Layer the animated Widget must be in\n        @param VarName the name of the variable that must match for the Widget to be animated\n        @param VarValue the value of the variable to match\n        @param AnimationName the name of the animation to perform\n        @param Duration the time in milliseconds that it should take for the animation to complete\n        @param StartDelay the delay in milliseconds before this animation should start\n        @param Interruptable true if the animation can be interrupted to render the next UI update; false if it must complete (this parameter is optional and defaults to false)\n        @return returns true if a matching Widget was found to perform the animation on; false otherwise\n        @since 6.3",
        "operationId": "AnimateVariable",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "WidgetName",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "LayerName",
            "in": "query"
          },
          {
            "name": "3",
            "type": "string",
            "required": true,
            "description": "VarName",
            "in": "query"
          },
          {
            "name": "4",
            "type": "#/definitions/Object",
            "required": true,
            "description": "VarValue",
            "in": "query"
          },
          {
            "name": "5",
            "type": "string",
            "required": true,
            "description": "AnimationName",
            "in": "query"
          },
          {
            "name": "6",
            "type": "integer",
            "required": true,
            "description": "Duration",
            "in": "query"
          },
          {
            "name": "7",
            "type": "integer",
            "required": true,
            "description": "StartDelay",
            "in": "query"
          },
          {
            "name": "8",
            "type": "boolean",
            "required": true,
            "description": "Interruptable",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dAreCoreAnimationsEnabled": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns whether or not animation support is enabled (either layered or Effect based animations; depending upon the STV configuration)\n        @return true if core animations are enabled; false otherwise\n       \n        @since 6.2",
        "operationId": "AreCoreAnimationsEnabled",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dAreCoreAnimationsSupported": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns whether or not animation support is possible in the current UI environment. Certain clients (like the MVP) do not support animations;\n        and animations over remote connections are also disabled due to performance reasons.\n        @return true if core animations are supported; false otherwise\n       \n        @since 7.0",
        "operationId": "AreCoreAnimationsSupported",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dCalculateMD5Sum": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Calculates the MD5 Sum of a given file\n        @param FilePath the path to the file who\u0027s MD sum should be calculated\n        @return the MD5 sum of the specified file as a String, null if the file doesn\u0027t exist or there\u0027s an error reading it\n       \n        @since 6.3",
        "operationId": "CalculateMD5Sum",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "FilePath",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dCalculateSHA1Hash": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Calculates the SHA1 hash of a String\n        @param EncodeString the String to be converted into a SHA1 hash\n        @return the SHA1 sum of the provided String or null if the string was null\n        @since 9.0",
        "operationId": "CalculateSHA1Hash",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "EncodeString",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dClearMenuCache": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Clears the cache that links Widgets to the in memory-menu representations for this UI. This also clears the back/forward history\n        to remove any references contained in there as well.\n       \n        @since 6.2",
        "operationId": "ClearMenuCache",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dConvertNteChars": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "converts a string of NTE key characters (and normal characters) into their\n        default character representation - given by the first character in the\n        NTE chatacter list\u003cbr\u003e\n        The NTE key characters are the Unicode characters u2460-u2468 and u24EA  (Unicode Circled Digits),\n        representing the numeric Text Keys 1-9 and 0.\u003cbr\u003e\n        The characters represented by the keys are defined by the client properties\n        \u003ctt\u003e\"ui/numeric_text_input_\u0026lt;ui/translation_language_code\u0026gt;_\u0026lt;key\u0026gt;_lower\u003c/tt\u003e.\n       \n        @param NteString the string to convert\n        @return the converted string\n        @since 8.0",
        "operationId": "ConvertNteChars",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "NteString",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dCreateArray": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Creates a java.lang.Object array and initializes each element to the passed in argument.\n        NOTE: This method takes a variable number of arguments, and the length of the returned array will be\n        equal to the number of arguments. i.e. calling CreateArray(1, 2) returns an Object array with elements 1 and 2 in it\n        @param Value a value for an element of the array (multiple arguments allowed)\n        @return the newly allocated Object array with its elements set to the arguments\n       \n        @since 6.0",
        "operationId": "CreateArray",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "Value",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Object"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dCreateFilePath": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Creates a new file object for the specified directory and file name or relative path\n        @param Directory the directory name\n        @param File the file within the directory or relative file path\n        @return a new file object for the specified directory and file name or relative path",
        "operationId": "CreateFilePath",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Directory",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "File",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is java.io.File)",
            "schema": {
              "$ref": "#/definitions/java.io.File"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dCreateNewDirectory": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Creates a new directory and any parent directories for the specified directory path.\n        @param DirectoryPath the directory to create\n        @return true if successful, false otherwise",
        "operationId": "CreateNewDirectory",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "DirectoryPath",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dCreateNewLocalDirectory": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Creates a new local directory and any parent directories for the specified directory path.\n        @param DirectoryPath the directory to create\n        @return true if successful, false otherwise\n        @since 6.4",
        "operationId": "CreateNewLocalDirectory",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "DirectoryPath",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dCreateTimeSpan": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns a length 2 Long object array which can be used for specifying a time span in a table. The first element\n        will be the StartTime and the second will be the EndTime\n        @param StartTime the long value which specifies the start value of the time span\n        @param EndTime the long value which specifies the end value of the time span\n        @return an array which represents this time span",
        "operationId": "CreateTimeSpan",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "integer",
            "required": true,
            "description": "StartTime",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "EndTime",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dDateFormat": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns a formatted date string for the specified Date.\n        @param Format null if SageTV\u0027s default date format should be used, otherwise use a formatting string as specified in java.text.SimpleDateFormat\n        @param Date either a java.util.Date object or a long which corresponds to the date\n        @return the date formatted string",
        "operationId": "DateFormat",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Format",
            "in": "query"
          },
          {
            "name": "2",
            "type": "#/definitions/Object",
            "required": true,
            "description": "Date",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dDeleteFilePath": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Deletes the file/directory at the corresponding file path (directories must be empty first)\n        @param FilePath the file path\n        @return true if successful, false otherwise\n        @since 6.3.9",
        "operationId": "DeleteFilePath",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "FilePath",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dDeleteLocalFilePath": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Deletes the file/directory at the corresponding local file path (directories must be empty first)\n        @param FilePath the file path\n        @return true if successful, false otherwise\n        @since 6.4",
        "operationId": "DeleteLocalFilePath",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "FilePath",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dDidImageLoadFail": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Checks whether the passed in MetaImage (from an API call that returns MetaImage), MediaFile, File, URL or Album failed\n        to load successfully. This will return false if the image load has not been attempted yet.\n        @param Image the MetaImage to check, or a MediaFile or an Album or a java.io.File or a java.net.URL\n        @return true if the MetaImage (or the MetaImage that would correspond to the passed in resource) has already tried to load; and the load failed\n        @since 7.0",
        "operationId": "DidImageLoadFail",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "Image",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dDirectoryListing": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns a list of the files in the specified directory. Only directories and file matching the media mask will be returned.\n        @param DirectoryPath the directory to list the files in\n        @param MediaMask the types of content allowed, any combination of \u0027M\u0027\u003dMusic, \u0027P\u0027\u003dPictures or \u0027V\u0027\u003dVideos\n        @return a list of folders and matching files in the specified directory\n        @since 7.0",
        "operationId": "DirectoryListing",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "DirectoryPath",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "MediaMask",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/java.io.File"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dDumpServerThreadStates": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Dumps all the java stack information on the SageTV server process to the server\u0027s debug output stream\n        @since 8.0",
        "operationId": "DumpServerThreadStates",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dDurFormat": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns a formatted duration String for a period of time in milliseconds. The formatting string\n        uses the % character for escapement (%% is not supported, you cannot display the % symbol in a duration string).\n        The \u0027d\u0027, \u0027h\u0027, \u0027m\u0027 and \u0027s\u0027 characters can be used to indicate days, hours, minutes and seconds respectively.\n        Any format character may be prefixed by the \u0027r\u0027 character to indicate it is a required field. \u003cp\u003e\n        For example, the format string %rh:%m for 20 minutes would return 0:20 and for the string $h:%m it would return 20\n        If there\u0027s characters before a field value then that value will be zero padded, i.e. 65 minutes for %h:%m would be 1:05\n        @param Format the duration format string, or null to use SageTV\u0027s default duration formatting\n        @param Duration the duration to print out in milliseconds\n        @return the formatted duration string",
        "operationId": "DurFormat",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Format",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "Duration",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dExecuteProcess": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Executes a new process on the system\n        @param CommandString the command to execute (i.e. C:\\windows\\notepad.exe or ifconfig)\n        @param Arguments the arguments to pass to the command that is executed, if it\u0027s a java.util.Collection or array then each element is an argument, otherwise it is considered a single argument; use null for no arguments\n        @param WorkingDirectory the directory to execute the process from or null to execute it from the current working directory\n        @param ConsoleApp if true then SageTV will consume the stdout and stderr output from the process that is launched; if false it will not\n        @return the java.lang.Process object that represents the launched process",
        "operationId": "ExecuteProcess",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CommandString",
            "in": "query"
          },
          {
            "name": "2",
            "type": "#/definitions/Object",
            "required": true,
            "description": "Arguments",
            "in": "query"
          },
          {
            "name": "3",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "WorkingDirectory",
            "in": "query"
          },
          {
            "name": "4",
            "type": "boolean",
            "required": true,
            "description": "ConsoleApp",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Process)",
            "schema": {
              "$ref": "#/definitions/Process"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dExecuteProcessReturnOutput": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Executes a new process on the system and returns as a String the output of the process\n        @param CommandString the command to execute (i.e. C:\\windows\\notepad.exe or ifconfig)\n        @param Arguments the arguments to pass to the command that is executed, if it\u0027s a java.util.Collection or array then each element is an argument, otherwise it is considered a single argument; use null for no arguments\n        @param WorkingDirectory the directory to execute the process from or null to execute it from the current working directory\n        @param ReturnStdout if true then SageTV will return the data from stdout as part of the return value\n        @param ReturnStderr if true then SageTV will return the data from stderr as part of the return value\n        @return a String which contains the data from stdout/stderr (depending upon the arguments), null if there was a failure\n       \n        @since 6.0",
        "operationId": "ExecuteProcessReturnOutput",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "CommandString",
            "in": "query"
          },
          {
            "name": "2",
            "type": "#/definitions/Object",
            "required": true,
            "description": "Arguments",
            "in": "query"
          },
          {
            "name": "3",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "WorkingDirectory",
            "in": "query"
          },
          {
            "name": "4",
            "type": "boolean",
            "required": true,
            "description": "ReturnStdout",
            "in": "query"
          },
          {
            "name": "5",
            "type": "boolean",
            "required": true,
            "description": "ReturnStderr",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dFindComparativeElement": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Searches a sorted list of data to find the index that the specified criteria exists at; or if it doesn\u0027t exist\n        in the data it will use the index that would be the appropriate insertion point for the criteria in the data\n        in order to maintain sort order. The element at that index is what is returned\n        @param Data the data to sort, this must be a java.util.Collection, a java.util.Map, or an array\n        @param Criteria the object to compare the elements to; this must implement java.lang.Comparable\n        @param Method the method name to execute on each element to get the value to compare; use null to compare the elements themselves\n        @return the element at the comparative insertion point",
        "operationId": "FindComparativeElement",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "Data",
            "in": "query"
          },
          {
            "name": "2",
            "type": "#/definitions/Comparable",
            "required": true,
            "description": "Criteria",
            "in": "query"
          },
          {
            "name": "3",
            "type": "string",
            "required": true,
            "description": "Method",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dFindElementIndex": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns the index in the data that the specified element is found at. If there are multiple occurrences of this element\n        only the first index is returned. This works for arrays and java.util.List implementations.\n        @param Data the java.util.List or array to look in\n        @param Element the value to search the data for\n        @return the 0-based index of the specified element in the data, or -1 if it does not exist",
        "operationId": "FindElementIndex",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "Data",
            "in": "query"
          },
          {
            "name": "2",
            "type": "#/definitions/Object",
            "required": true,
            "description": "Element",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAbsoluteFilePath": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns the full path name from the specified file path..\n        @param FilePath the filepath to get the full path from\n        @return the full path from the specified file path\n        @since 7.0",
        "operationId": "GetAbsoluteFilePath",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "FilePath",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetDNSAddress": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns the DNS address for the currently configured network adapter.\n        NOTE: This is only valid on embedded platforms.\n        @return the DNS address for the currently configured network adapter",
        "operationId": "GetDNSAddress",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetDiskFreeSpace": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns the amount of disk free space in bytes at the specified path\n        @param DrivePath the path string of a disk to get the free space of\n        @return the free space on the specified disk in bytes",
        "operationId": "GetDiskFreeSpace",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "DrivePath",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetDiskTotalSpace": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns the amount of total disk space in bytes at the specified path\n        @param DrivePath the path string of a disk to get the total space of\n        @return the total space on the specified disk in bytes",
        "operationId": "GetDiskTotalSpace",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "DrivePath",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetElement": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns the element at the specified index in this data; works for arrays and java.util.List implementations (i.e. Vector, etc.)\n        @param Data the java.util.List or array object to get the element from\n        @param Index the 0-based index of the element to retrieve\n        @return the element at the specified index or null if there is no such element",
        "operationId": "GetElement",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "Data",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "Index",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetFileAsString": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Opens the file at the specified path and reads the entire contents of it and returns it as a String.\n        This will use the server\u0027s filesystem if executed on SageTVClient.\n        @param FilePath the file path\n        @return a String which represents the contents of the file; the emptry string if there was a failure\n        @since 6.6",
        "operationId": "GetFileAsString",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "FilePath",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetFileExtensionFromPath": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns the file name extension from the specified file path (not including the \u0027.\u0027)\n        @param FilePath the file path to get the extension of\n        @return the extension from the specified file path\n        @since 6.4",
        "operationId": "GetFileExtensionFromPath",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "FilePath",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetFileNameFromPath": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns the file name from the specified file path; this just returns the filename without any path information.\n        @param FilePath the filepath to get the filename for\n        @return the filename from the specified file path",
        "operationId": "GetFileNameFromPath",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "FilePath",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetFilePathSize": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns the size in bytes of the specified file path\n        @param FilePath the file path\n        @return the size in bytes of the specified file path\n        @since 6.4",
        "operationId": "GetFilePathSize",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "FilePath",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetFileSystemRoots": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns the root directories of the file systems (on Linux this\u0027ll just be / and on Windows it\u0027ll be the drive letters)\n        @return the root directories of the file systems",
        "operationId": "GetFileSystemRoots",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/java.io.File"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetFileSystemType": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Gets the name of the filesystem type at the specified path\n        @param DrivePath the path string of a disk to get the filesystem type for\n        @return the name of the filesystem type at the specified path",
        "operationId": "GetFileSystemType",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "DrivePath",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetGatewayAddress": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns the gateway address for the currently configured network adapter.\n        NOTE: This is only valid on embedded platforms.\n        @return the gateway address for the currently configured network adapter",
        "operationId": "GetGatewayAddress",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetImageAsBufferedImage": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns a java.awt.image.BufferedImage object. This can be used to load images from URLs, JAR resources or the file system.\u003cp\u003e\n        @param Resource if this is a MetaImage then the buffered image is taken from that, otherwise its converted to a string and then the image is loaded from that path\n        @return a newly allocated java.awt.image.BufferedImage corresponding to the specified resource\n        @since 4.1",
        "operationId": "GetImageAsBufferedImage",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "Resource",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is java.awt.image.BufferedImage)",
            "schema": {
              "$ref": "#/definitions/java.awt.image.BufferedImage"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetLocalFileAsString": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Opens the file at the specified path and reads the entire contents of it and returns it as a String.\n        @param FilePath the file path\n        @return a String which represents the contents of the file; the emptry string if there was a failure\n        @since 8.0",
        "operationId": "GetLocalFileAsString",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "FilePath",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetLocalFilePathSize": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns the size in bytes of the specified local file path\n        @param FilePath the file path\n        @return the size in bytes of the specified local file path\n        @since 6.4",
        "operationId": "GetLocalFilePathSize",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "FilePath",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetLocalFileSystemRoots": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns the root directories of the local file systems  (on Linux this\u0027ll just be / and on Windows it\u0027ll be the drive letters)\n        @return the root directories of the local file systems\n        @since 6.4",
        "operationId": "GetLocalFileSystemRoots",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/java.io.File"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetLocalIPAddress": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns the IP address of the machine\n        @return the IP address of the machine",
        "operationId": "GetLocalIPAddress",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetLocalPathLastModifiedTime": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns the last modified time of the specified local file path\n        @param FilePath the file path\n        @return the last modified time of the specified local file path\n        @since 6.4",
        "operationId": "GetLocalPathLastModifiedTime",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "FilePath",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetMetaImageAspectRatio": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns the aspect ratio of an image as a floating point number of width/height, zero if the image was a failed load or has not been loaded yet\n        @param MetaImage the MetaImage to get the aspec for\n        @return the aspect ratio of the image as a floating point number of width/height, zero if the image was a failed load or has not been loaded yet\n        @since 8.0",
        "operationId": "GetMetaImageAspectRatio",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/MetaImage",
            "required": true,
            "description": "MetaImage",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetMetaImageBytes": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns a byte array which is the contents of the MetaImage source\u0027s data (i.e. compressed image data)\n        @param MetaImage the MetaImage to get the compressed byte data for\n        @return a byte array which is the contents of the MetaImage source\u0027s data (i.e. compressed image data), null if it cannot load the data or the argument is not a MetaImage\n        @since 8.1",
        "operationId": "GetMetaImageBytes",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/MetaImage",
            "required": true,
            "description": "MetaImage",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "type": "byte"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetMetaImageSourceFile": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns the file path that a MetaImage was loaded from. Since not all MetaImage objects come from file paths, this will return null for any non-file based images.\n        @param MetaImage the MetaImage to get the file path for\n        @return the file path for the specified MetaImage, or null if it wasn\u0027t loaded from a file path\n        @since 7.1",
        "operationId": "GetMetaImageSourceFile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/MetaImage",
            "required": true,
            "description": "MetaImage",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is java.io.File)",
            "schema": {
              "$ref": "#/definitions/java.io.File"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPathLastModifiedTime": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns the last modified time of the specified file path\n        @param FilePath the file path\n        @return the last modified time of the specified file path",
        "operationId": "GetPathLastModifiedTime",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "FilePath",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetPathParentDirectory": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns the parent directory for the specified file path\n        @param FilePath the file path to get the parent directory for\n        @return the parent directory for the specified file path",
        "operationId": "GetPathParentDirectory",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "FilePath",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is java.io.File)",
            "schema": {
              "$ref": "#/definitions/java.io.File"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetScaledImageAsBufferedImage": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns a java.awt.image.BufferedImage object. This can be used to load images from URLs, JAR resources or the file system.\n        The size of the returned image will match the passed in arguments.\n        @param Resource if this is a MetaImage then the buffered image is taken from that, otherwise its converted to a string and then the image is loaded from that path\n        @param Width the desired width of the returned image\n        @param Height the desired height of the returned image\n        @return a newly allocated java.awt.image.BufferedImage corresponding to the specified resource\n        @since 4.1",
        "operationId": "GetScaledImageAsBufferedImage",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "Resource",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "Width",
            "in": "query"
          },
          {
            "name": "3",
            "type": "integer",
            "required": true,
            "description": "Height",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is java.awt.image.BufferedImage)",
            "schema": {
              "$ref": "#/definitions/java.awt.image.BufferedImage"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSubgroup": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Gets the value for the specified key out of a map. Useful for analyzing data from a {@link Database#GroupByMethod GroupByMethod ()} call.\n        @param Grouping the map to get the value from\n        @param Key the key to use for retrieving the value\n        @return the value for the specified key in the specified map",
        "operationId": "GetSubgroup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/java.util.Map",
            "required": true,
            "description": "Grouping",
            "in": "query"
          },
          {
            "name": "2",
            "type": "#/definitions/Object",
            "required": true,
            "description": "Key",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSubnetMask": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns the subnet mask for the currently configured network adapter.\n        NOTE: This is only valid on embedded platforms.\n        @return the subnet mask for the currently configured network adapter",
        "operationId": "GetSubnetMask",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetTimeSinceLastInput": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns the amount of time in milliseconds since the last user input occurred for this UI (used for doing things while the user is idle)\n        @return the amount of time in milliseconds since the last user input occurred\n       \n        @since 6.6",
        "operationId": "GetTimeSinceLastInput",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetUIRefreshLock": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Acquires the lock for this user interface system to prevent other updates from occuring. This can be used\n        at the start of an animation sequence before the refresh call is made to ensure that the animations will\n        all occur on the same refresh cycle. The return value indicates if the lock was acquired. Do NOT release the lock\n        unless you acquired the lock. This lock is re-entrant and is thread-based. You must release it from the same\n        thread that acquired the lock. If this method return false, then you already have the lock.\n        IMPORTANT: It is of CRITICAL IMPORTANCE that ReleaseUIRefreshLock() is called after GetUIRefreshLock() if\n        this method returns true or the user interface system will become completely locked up for this client. It\u0027s also\n        important to not release the lock unless you acquired it.\n        @return true if the lock was acquired (which means it MUST be released), false if it was not\n       \n        @since 6.4",
        "operationId": "GetUIRefreshLock",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetWorkingDirectory": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns the current working directory for the application (if this is a client; it\u0027ll be the working directory of the server)\n        @return the current working directory for the application",
        "operationId": "GetWorkingDirectory",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGuessMajorFileType": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Guesses what media type the specified filename corresponds to. It does this based on the configuration\n        for the import library file types.\n        @param Filename the file path to test\n        @return \"M\", \"V\", \"P\", \"B\" or \"D\" for a music, video, picture, BluRay or DVD file respectively; if it can\u0027t tell it returns \"V\"\n       \n        @since 6.4",
        "operationId": "GuessMajorFileType",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Filename",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dHasLocalFilesystem": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns true if this client has a local file system that can be accessed.\n        @return true if this client has a local file system that can be accessed\n       \n        @since 6.4",
        "operationId": "HasLocalFilesystem",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIf": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns the second argument if the first argument is true, otherwise the third argument is returned. All 3 arguments\n        will be evaluated in all cases. This does NOT have a short-circuit which prevents evaluation of the third argument if the first is true.\n        @param Condition the value to test to see if it is true\n        @param True the value to return if the Condition is true\n        @param False the value to return if the Condition is not true\n        @return the appropriate value based on the condition",
        "operationId": "If",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "boolean",
            "required": true,
            "description": "Condition",
            "in": "query"
          },
          {
            "name": "2",
            "type": "#/definitions/Object",
            "required": true,
            "description": "True",
            "in": "query"
          },
          {
            "name": "3",
            "type": "#/definitions/Object",
            "required": true,
            "description": "False",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsDirectoryPath": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns true if the specified path denotes a directory that exists\n        @param FilePath the file path to test\n        @return true if the specified path denotes a directory that exists",
        "operationId": "IsDirectoryPath",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "FilePath",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsEmpty": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns true if the argument is null, zero, an empty string or a failed image load\n        @param Data the object to test\n        @return true if the argument is null, zero, an empty string or a failed image load\n        @since 7.0",
        "operationId": "IsEmpty",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "Data",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsFilePath": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns true if the specified file path denotes a file that exists and is not a directory\n        @param FilePath the file path to test\n        @return true if the specified file path denotes a file that exists and is not a directory",
        "operationId": "IsFilePath",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "FilePath",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsFilePathHidden": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns true if the specified file path is marked as a hidden file\n        @param FilePath the file path to test\n        @return true if the specified file path is marked as a hidden file",
        "operationId": "IsFilePathHidden",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "FilePath",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsImageLoaded": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Checks whether the passed in MetaImage (from an API call that returns MetaImage), MediaFile, File, URL or Album is loaded\n        into system memory or into the VRAM cache of the corresponding UI making the call.\n        @param Image the MetaImage to check, or a MediaFile or an Album or a java.io.File or a java.net.URL\n        @return true if the MetaImage (or the MetaImage that would correspond to the passed in resource) is loaded into system memory or the calling UI\u0027s VRAM, false otherwise\n        @since 6.1",
        "operationId": "IsImageLoaded",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "Image",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsImportableFileType": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns true if the specified file path has a file extension which would be imported by SageTV into its library.\n        @param Filename the file path to test\n        @return true if the specified file path has a file extension which would be imported by SageTV into its library, false otherwise",
        "operationId": "IsImportableFileType",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Filename",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsLocalDirectoryPath": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns true if the specified local path denotes a directory that exists\n        @param FilePath the file path to test\n        @return true if the specified local path denotes a directory that exists\n        @since 6.4",
        "operationId": "IsLocalDirectoryPath",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "FilePath",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsLocalFilePath": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns true if the specified local file path denotes a file that exists and is not a directory\n        @param FilePath the file path to test\n        @return true if the specified local file path denotes a file that exists and is not a directory\n        @since 6.4",
        "operationId": "IsLocalFilePath",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "FilePath",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsLocalFilePathHidden": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns true if the specified local file path is marked as a hidden file\n        @param FilePath the file path to test\n        @return true if the specified local file path is marked as a hidden file\n        @since 6.4",
        "operationId": "IsLocalFilePathHidden",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "FilePath",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsLocalRestartNeeded": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns true if the local instance of SageTV needs to be restarted due to a plugin install/uninstall\n        @return true if the local instance of SageTV needs to be restarted due to a plugin install/uninstall, false otherwise\n        @since 7.0",
        "operationId": "IsLocalRestartNeeded",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsMetaImage": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns true if the argument is a MetaImage object.\n        @param MetaImage the Object to test\n        @return true if the argument is a MetaImage object, false otherwise\n        @since 7.1",
        "operationId": "IsMetaImage",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "MetaImage",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsServerRestartNeeded": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns true if the server instance of SageTV needs to be restarted due to a plugin install/uninstall\n        @return true if the server instance of SageTV needs to be restarted due to a plugin install/uninstall, false otherwise\n        @since 7.0",
        "operationId": "IsServerRestartNeeded",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dKeystroke": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Executes the specified keystroke in either the SageTV event system or by emulation in the operating system\n        @param Character the keystroke to perform, can contain Ctrl, Shift, Alt and combinations thereof with the specified key name\n        @param System if true then an operating system keystroke should be emulated, if false then keep the keystroke within SageTV",
        "operationId": "Keystroke",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Character",
            "in": "query"
          },
          {
            "name": "2",
            "type": "boolean",
            "required": true,
            "description": "System",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dLoadImage": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns a MetaImage object that refers to a specified image resource. This can be used to load images from URLs, JAR resources or the file system.\u003cp\u003e\n        It also has a secondary purpose where you can pass it a MetaImage and then it will load that image into\n        the current image cache so it will render as fast as possible in the next drawing cycle. Good for preloading\n        the next image in a slideshow. If a MetaImage is passed in; this call will not return until that image is loaded into the cache.\n        @param Resource if this is a MetaImage then the image is loaded into the cache, otherwise its converted to a string and then a MetaImage is returned for that resource\n        @return the MetaImage that refers to the passed specified resource, if a MetaImage was passed in then the same object is returned",
        "operationId": "LoadImage",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "Resource",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is MetaImage)",
            "schema": {
              "$ref": "#/definitions/MetaImage"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dLoadImageFile": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns a MetaImage object that refers to the specified image file. Used for passing images into Widgets.\n        @param FilePath the file path of the image to load\n        @return the loaded image object",
        "operationId": "LoadImageFile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "FilePath",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is MetaImage)",
            "schema": {
              "$ref": "#/definitions/MetaImage"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dLocalDirectoryListing": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns a list of the files in the specified directory on the local filesystem\n        @param DirectoryPath the directory to list the files in\n        @return a list of files in the specified directory\n        @since 6.4",
        "operationId": "LocalDirectoryListing",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "DirectoryPath",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/java.io.File"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dLocalizeString": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns a localized version of the specified string. Uses SageTV\u0027s core translation properties to do this.\n        @param EnglishText the English string to translate from\n        @return the translated version of the specified string in the currently configured language",
        "operationId": "LocalizeString",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "EnglishText",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dLookupIPForLocatorID": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Connects to the SageTV Locator server and submits the specified Locator ID for a IP lookup. The Locator server will\n        then lookup the IP for that GUID and report it back.\n        @param LocatorID the GUID that should be used for the lookup\n        @return an String of IP address:port or null if the lookup failed",
        "operationId": "LookupIPForLocatorID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "LocatorID",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dMax": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns the maximum of the two arguments; the type of the returned argument will be the same as the highest precision argument\n        @param Value1 one of the values\n        @param Value2 the other value\n        @return the maximum of the passed in values",
        "operationId": "Max",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "number",
            "required": true,
            "description": "Value1",
            "in": "query"
          },
          {
            "name": "2",
            "type": "number",
            "required": true,
            "description": "Value2",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dMin": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns the minimum of the two arguments; the type of the returned argument will be the same as the highest precision argument\n        @param Value1 one of the values\n        @param Value2 the other value\n        @return the minimum of the passed in values",
        "operationId": "Min",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "number",
            "required": true,
            "description": "Value1",
            "in": "query"
          },
          {
            "name": "2",
            "type": "number",
            "required": true,
            "description": "Value2",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dNumberFormat": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns a formatted numeric string for the specified number.\n        @param Format a formatting string as specified in java.text.DecimalFormat\n        @param Number the floating point number to format\n        @return the formatted numeric string",
        "operationId": "NumberFormat",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Format",
            "in": "query"
          },
          {
            "name": "2",
            "type": "float",
            "required": true,
            "description": "Number",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dPrintCurrentTime": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns a string that represents the current time.\n        @return a string that represents the current time.",
        "operationId": "PrintCurrentTime",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dPrintDate": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns a formatted date string using the java.text.DateFormat.MEDIUM formatting technique\n        @param Date the date value to format\n        @return a formatted date string",
        "operationId": "PrintDate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "integer",
            "required": true,
            "description": "Date",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dPrintDateFull": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns a formatted date string using the java.text.DateFormat.FULL formatting technique\n        @param Date the date value to format\n        @return a formatted date string",
        "operationId": "PrintDateFull",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "integer",
            "required": true,
            "description": "Date",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dPrintDateLong": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns a formatted date string using SageTV\u0027s default detailed date formatting\n        @param Date the date value to format\n        @return a formatted date string",
        "operationId": "PrintDateLong",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "integer",
            "required": true,
            "description": "Date",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dPrintDateShort": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns a formatted date string using the java.text.DateFormat.SHORT formatting technique\n        @param Date the date value to format\n        @return a formatted date string",
        "operationId": "PrintDateShort",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "integer",
            "required": true,
            "description": "Date",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dPrintDuration": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns a formatted duration string according to SageTV\u0027s verbose duration formating, minutes is the most detailed resolution of this format\n        @param Duration the duration in milliseconds to print\n        @return the formatted duration string",
        "operationId": "PrintDuration",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "integer",
            "required": true,
            "description": "Duration",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dPrintDurationShort": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns a formatted duration string according to SageTV\u0027s concise duration formating, minutes is the most detailed resolution of this format\n        @param Duration the duration in milliseconds to print\n        @return the formatted duration string",
        "operationId": "PrintDurationShort",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "integer",
            "required": true,
            "description": "Duration",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dPrintDurationWithSeconds": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns a formatted duration string according to SageTV\u0027s default duration formating, seconds is the most detailed resolution of this format\n        @param Duration the duration in milliseconds to print\n        @return the formatted duration string",
        "operationId": "PrintDurationWithSeconds",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "integer",
            "required": true,
            "description": "Duration",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dPrintTime": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns a formatted time string using the java.text.DateFormat.MEDIUM formatting technique\n        @param Time the time value to format\n        @return a formatted time string",
        "operationId": "PrintTime",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "integer",
            "required": true,
            "description": "Time",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dPrintTimeFull": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns a formatted time string using the java.text.DateFormat.FULL formatting technique\n        @param Time the time value to format\n        @return a formatted time string",
        "operationId": "PrintTimeFull",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "integer",
            "required": true,
            "description": "Time",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dPrintTimeLong": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns a formatted time string using the java.text.DateFormat.LONG formatting technique\n        @param Time the time value to format\n        @return a formatted time string",
        "operationId": "PrintTimeLong",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "integer",
            "required": true,
            "description": "Time",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dPrintTimeShort": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns a formatted time string using the java.text.DateFormat.SHORT formatting technique\n        @param Time the time value to format\n        @return a formatted time string",
        "operationId": "PrintTimeShort",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "integer",
            "required": true,
            "description": "Time",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dQueryServerMacAddress": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Gets the MAC address of the SageTV server at the specified hostname. This will only work if SageTV is running on that host.\n        This call uses a 3 second timeout internally.\n        @param Hostname the hostname/IP of the SageTV server\n        @return a String in the format 00:xx:xx:xx:xx:xx that represents the MAC of the server, or null if it fails\n        @since 7.0",
        "operationId": "QueryServerMacAddress",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Hostname",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dReformatDeviceAtPathAsEXT3": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Determines the device that is mounted at the specified path, and then repartitions it to have a single EXT3 partition and then\n        formats that partition. WARNING: THIS WILL DESTROY ALL INFORMATION ON THE TARGET DEVICE AND REFORMAT IT\n        NOTE: This is only valid on embedded platforms.\n        @param DrivePath the path string of a disk to reformat\n        @return zero upon success, -1 if it is unable to find a device that corresponds to the requested path, -2 if it is unable to unmount that path, -3 if there was a problem re-partitioning or reformatting the drive, and -4 if there was a failure remounting the newly formatted drive\n        @since 7.1",
        "operationId": "ReformatDeviceAtPathAsEXT3",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "DrivePath",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dReleaseUIRefreshLock": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Releases the lock for this user interface system to allow other updates to occur. This must ONLY be used\n        after GetUIRefreshLock() was called and ONLY if GetUIRefreshLock() actually returned true. This must also be called\n        from the same thread that called GetUIRefreshLock()\n       \n        @since 6.4",
        "operationId": "ReleaseUIRefreshLock",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dReloadNameserverCache": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Reloads the name server cache. Should be used after reconfiguring the network adapter.\n        NOTE: This is only valid on embedded platforms.",
        "operationId": "ReloadNameserverCache",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dRemoveElement": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Removes the element at with the specified value from this data. Works for java.util.Collection or java.util.Map implementations.\n        If the value appears multiple times in the data (for Collections) only the first occurrence is removed.\n        @param Data the java.util.Collection or java.util.Map object to remove the element from; for maps it removes based on key\n        @param Value the value to remove from the data\n        @return for java.util.Collections true if the element exists and was removed, false otherwise; for java.util.Maps it returns the value that the specified key corresponded to",
        "operationId": "RemoveElement",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "Data",
            "in": "query"
          },
          {
            "name": "2",
            "type": "#/definitions/Object",
            "required": true,
            "description": "Value",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dRemoveElementAtIndex": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Removes the element at the specified index in this data; works java.util.List implementations (i.e. Vector, etc.)\n        @param Data the java.util.List object to remove the element from\n        @param Index the 0-based index of the element to remove\n        @return the element at the specified index or null if there is no such element",
        "operationId": "RemoveElementAtIndex",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/java.util.List",
            "required": true,
            "description": "Data",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "Index",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dRenameFilePath": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Renames a file/directory\n        @param OriginalFilePath the file path to rename\n        @param NewFilePath the new name for the file path\n        @return true if successful, false otherwise\n        @since 6.3.9",
        "operationId": "RenameFilePath",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "OriginalFilePath",
            "in": "query"
          },
          {
            "name": "2",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "NewFilePath",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dRestart": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Restarts the local instance of SageTV. Sometimes needed after a plugin install/uninstall. If you want to restart\n        the local and server instance; then perform the restart on the server first. This is only supported on\n        Windows and Linux currently. If this is called from a SageTVClient running on the same machine as the server, this will invoke\n        a restart of the locally running server as well in order to ensure proper file upgrade synchronization.\n        @return true if restarting is supported (Although the restart will likely complete and the method will never return), false otherwise (Mac OS X does not have restart support)\n        @since 7.0",
        "operationId": "Restart",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dRound": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Rounds a floating point number to an integral value. For Doubles a Long is returned, for Floats an Integer is returned\n        @param Number the number to round\n        @return the rounded value",
        "operationId": "Round",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "Number",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSaveImageToFile": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Saves a MetaImage object to a file using the specified image size. The supported formats are JPG and PNG. The format is determined by the file extension, which must be either .jpg or .png.\n        Use zero for the width and height to save it at the original image size.\n        NOTE: This call is a NOOP on embedded platforms\n        @param MetaImage the MetaImage object that should be saved to the specified file\n        @param File the file to save the image to\n        @param Width the width to use in the saved image file\n        @param Height the height to use in the saved image file\n        @return returns true on success or false on failure\n        @since 7.1",
        "operationId": "SaveImageToFile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/MetaImage",
            "required": true,
            "description": "MetaImage",
            "in": "query"
          },
          {
            "name": "2",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "File",
            "in": "query"
          },
          {
            "name": "3",
            "type": "integer",
            "required": true,
            "description": "Width",
            "in": "query"
          },
          {
            "name": "4",
            "type": "integer",
            "required": true,
            "description": "Height",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dScaleBufferedImage": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Scales a java.awt.image.BufferedImage object using optimized techniques\n        @param JavaBufferedImage the BufferedImage object that is the source for the scaling\n        @param Width the width of the target image\n        @param Height the height of the target image\n        @param Alpha true if the scaling should be done in ARGB, false if it should be done in RGB\n        @return a new BufferedImage that is a scaled version of the specified image",
        "operationId": "ScaleBufferedImage",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/java.awt.image.BufferedImage",
            "required": true,
            "description": "JavaBufferedImage",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "Width",
            "in": "query"
          },
          {
            "name": "3",
            "type": "integer",
            "required": true,
            "description": "Height",
            "in": "query"
          },
          {
            "name": "4",
            "type": "boolean",
            "required": true,
            "description": "Alpha",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is java.awt.image.BufferedImage)",
            "schema": {
              "$ref": "#/definitions/java.awt.image.BufferedImage"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dScanWirelessAPs": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Scans for wireless access points and returns the results as a map. The keys are the SSID names and the values are Security;Strength where\n        Security will be WEP/WPA/None and strength will be an integer between 0 and 100\n        NOTE: This is only valid on embedded platforms.\n        @return a Map describing the results of the access point scan\n        @since 6.6",
        "operationId": "ScanWirelessAPs",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (value type is java.util.Map)",
            "schema": {
              "$ref": "#/definitions/java.util.Map"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSendNetworkCommand": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Opens a TCP/IP socket connection to the specified hostname on the specified port and then sends the specified command. After that\n        the socket is closed.\n        @param Hostname the hostname to connect to\n        @param Port the port to connect on\n        @param Command either a byte[] or a String to send across the socket\n        @return true if successful, false otherwise",
        "operationId": "SendNetworkCommand",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Hostname",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "Port",
            "in": "query"
          },
          {
            "name": "3",
            "type": "#/definitions/Object",
            "required": true,
            "description": "Command",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dServerRestart": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Restarts the server instance of SageTV. Sometimes needed after a plugin install/uninstall. If you want to restart\n        the local and server instance; then perform the restart on the server first. This is only supported on\n        Windows servers and Linux servers currently.\n        @return true if restarting is supported (Although the restart will likely complete and the method will never return), false otherwise (Mac OS X server does not have restart support)\n        @since 7.0",
        "operationId": "ServerRestart",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetCoreAnimationsEnabled": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Sets whether or not animation support is enabled (either layered or Effect based animations; depending upon the STV configuration)\n        @param Enabled true to enable core animations; false otherwise\n       \n        @since 6.2",
        "operationId": "SetCoreAnimationsEnabled",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "boolean",
            "required": true,
            "description": "Enabled",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetElement": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Sets the element at the specified index in this data; works for arrays and java.util.List implementations (i.e. Vector, etc.)\n        @param Data the java.util.List or array object to set the element for\n        @param Index the 0-based index of the element to set\n        @param Value the value to set\n        @return the Value parameters is returned",
        "operationId": "SetElement",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "Data",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "Index",
            "in": "query"
          },
          {
            "name": "3",
            "type": "#/definitions/Object",
            "required": true,
            "description": "Value",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetScrollPosition": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Scrolls the closest pageable UI parent component (or sibling of a parent) to the specified position.\n        @param RelativeX the X position to scroll to between 0.0 and 1.0 (use a negative number to not change the X position)\n        @param RelativeY the Y position to scroll to between 0.0 and 1.0 (use a negative number to not change the Y position)\n       \n        @since 6.2",
        "operationId": "SetScrollPosition",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "float",
            "required": true,
            "description": "RelativeX",
            "in": "query"
          },
          {
            "name": "2",
            "type": "float",
            "required": true,
            "description": "RelativeY",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSize": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns the size of the specified data.\n        @param Data the object to get the data size of\n        @return for a Collection or Map, the size of it; for an array, the length; for a string, the length, otherwise 0 is returned",
        "operationId": "Size",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Object",
            "required": true,
            "description": "Data",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dStringEndsWith": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns true if the first string ends with the second, uses java.lang.String.endsWith\n        @param FullString the string to search in\n        @param MatchString the string to search for\n        @return true if FullString ends with MatchString, false otherwise",
        "operationId": "StringEndsWith",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "FullString",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "MatchString",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dStringIndexOf": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns the index of the second string within the first string, -1 if it is not found. Uses java.lang.String.indexOf\n        @param FullString the string to search in\n        @param MatchString the string to search for\n        @return the first 0-based index in FullString that MatchString occurs at or -1 if it is not found",
        "operationId": "StringIndexOf",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "FullString",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "MatchString",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dStringIndexOfNTE": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns the index of MatchStringNTE string within FullString, -1 if it is not found.\u003cbr\u003e\n        Search is case-insentive\u003cbr\u003e\n        The MatchStringNTE may contain the Unicode characters u2460-u2468 and u24EA  (Unicode Circled Digits) representing\n        numeric Text Keys 1-9 and 0. The characters represented by the keys are defined by the client properties\n        \u003ctt\u003e\"ui/numeric_text_input_\u0026lt;ui/translation_language_code\u0026gt;_\u0026lt;key\u0026gt;_lower\u003c/tt\u003e.\n        @param FullString the string to search in\n        @param MatchStringNTE the string to search for\n        @return the first 0-based index in FullString that MatchStringNTE occurs at or -1 if it is not found\n        @since 8.0",
        "operationId": "StringIndexOfNTE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "FullString",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "MatchStringNTE",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dStringLastIndexOf": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns the last index of the second string within the first string, -1 if it is not found. Uses java.lang.String.lastIndexOf\n        @param FullString the string to search in\n        @param MatchString the string to search for\n        @return the last 0-based index in FullString that MatchString occurs at or -1 if it is not found",
        "operationId": "StringLastIndexOf",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "FullString",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "MatchString",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dStringStartsWith": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns true if the first string starts with the second, uses java.lang.String.startsWith\n        @param FullString the string to search in\n        @param MatchString the string to search for\n        @return true if FullString starts with MatchString, false otherwise",
        "operationId": "StringStartsWith",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "FullString",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "MatchString",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dStringStartsWithNTE": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns true if the Full String starts with characters matching MatchStringNTE\u003cbr\u003e\n        Search is case-insentive\u003cbr\u003e\n        The MatchStringNTE may contain the Unicode characters u2460-u2468 and u24EA  (Unicode Circled Digits) representing\n        numeric Text Keys 1-9 and 0. The characters represented by the keys are defined by the client properties\n        \u003ctt\u003e\"ui/numeric_text_input_\u0026lt;ui/translation_language_code\u0026gt;_\u0026lt;key\u0026gt;_lower\u003c/tt\u003e.\n        @param FullString the string to search in\n        @param MatchStringNTE the string to search for\n        @return true if FullString starts with characters matching MatchStringNTE\n        @since 8.0",
        "operationId": "StringStartsWithNTE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "FullString",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "MatchStringNTE",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSubstring": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns the substring from a specified string. Same as java.lang.String.substring(int startIndex, int endIndex)\n        @param String the string to get the substring of\n        @param StartIndex the 0-based index that the substring starts at\n        @param EndIndex the 0-based index that the substring ends at or -1 if the substring goes to the end of the string\n        @return the substring from the specified string",
        "operationId": "Substring",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "String",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "StartIndex",
            "in": "query"
          },
          {
            "name": "3",
            "type": "integer",
            "required": true,
            "description": "EndIndex",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSubstringBegin": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns the substring from a specified string. The substring will start at the beginning of the string and end\n        EndIndex characters before the end of the string. Same as Substring(String, 0, Size(String) - EndOffset).\n        @param String the string to get the substring of\n        @param EndOffset the number of characters from the end of the string to terminate the substring (0 implies return the entire string)\n        @return the substring from the specified string\n        @since 7.0",
        "operationId": "SubstringBegin",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "String",
            "in": "query"
          },
          {
            "name": "2",
            "type": "integer",
            "required": true,
            "description": "EndOffset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dTestPlaceshifterConnectivity": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Connects to the SageTV Locator server and submits the specified Locator ID for a \u0027ping\u0027. The Locator server will\n        then attempt to connect to the IP for that GUID and report back the status.  The return code is an integer as follows:\n        -1 - Unable to connect to the locator server (internet connection is down or locator server is down)\n        0 - The locator server did not have an IP address registered for this GUID\n        1 - The locator server could not connect to the IP address registered for the GUID\n        2 - The locator server can connect to the IP address registered for the GUID, but not to the Placeshifter port\n        3 - The locator server can connect to the IP address/port for the GUID, but the server that is there is not the Placeshifter\n        10 - The ping was successful. External connections to the Placeshifter should work correctly.\n        @param LocatorID the GUID that should be used for the \u0027ping\u0027\n        @return an integer status code as described above.",
        "operationId": "TestPlaceshifterConnectivity",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "LocatorID",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dTime": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Returns the current time; see java.lang.System.currentTimeMillis() for the explanation of the units.\n        @return the current time",
        "operationId": "Time",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dUnloadImage": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Unloads the specified image resource from memory. NOTE: This does not care about the internal reference\n        count in SageTV for this image which could mean bad things will happen if you use this on images other than ones\n        that you are explicitly managing.\n        @param ResPath the path to the image resource, can be a url, JAR resource path or a file path",
        "operationId": "UnloadImage",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "ResPath",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dWait": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Causes the currently executing thread to sleep for the specified amount of time in milliseconds.\n        @param Time the amount of time to sleep this thread for in milliseconds",
        "operationId": "Wait",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "integer",
            "required": true,
            "description": "Time",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dWriteStringToFile": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Opens the file at the specified path and writes out the specified String as its contents.\n        This will use the server\u0027s filesystem if executed on SageTVClient.\n        @param FilePath the file path\n        @param Data the contents to write to the file\n        @return true if successful, false if there was an error writing to the file\n        @since 9.0",
        "operationId": "WriteStringToFile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "FilePath",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Data",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dWriteStringToLocalFile": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "Utility"
        ],
        "description": "Opens the file at the specified path and writes out the specified String as its contents.\n        @param FilePath the file path\n        @param Data the contents to write to the file\n        @return true if successful, false if there was an error writing to the file\n        @since 9.0",
        "operationId": "WriteStringToLocalFile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "FilePath",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Data",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dAddWidget": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "WidgetAPI"
        ],
        "description": "Creates a new Widget of the specified type and adds it to the STV\n        @param WidgetType the type of the new Widget\n        @return the newly created Widget",
        "operationId": "AddWidget",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "WidgetType",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Widget)",
            "schema": {
              "$ref": "#/definitions/Widget"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dAddWidgetChild": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "WidgetAPI"
        ],
        "description": "Creates a parent-child relationship between two Widgets. If the relationship already exists, this call has no effect.\n        This new child will be the last child of the parent.\n        @param WidgetParent the Widget (or a String which represents the symbol for that Widget) that should be the parent in the relationship\n        @param WidgetChild the Widget (or a String which represents the symbol for that Widget) that should be the child in the relationship",
        "operationId": "AddWidgetChild",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Widget",
            "required": true,
            "description": "WidgetParent",
            "in": "query"
          },
          {
            "name": "2",
            "type": "#/definitions/Widget",
            "required": true,
            "description": "WidgetChild",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dAddWidgetWithSymbol": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "WidgetAPI"
        ],
        "description": "Creates a new Widget of the specified type and adds it to the STV. This also allows specifying the desired symbol to use for the Widget.\n        If the symbol is already in use; then a new symbol will automatically be assigned to this Widget instead.\n        @param WidgetType the type of the new Widget\n        @param Symbol the symbol name for the new widget (UID)\n        @return the newly created Widget\n        @since 7.0",
        "operationId": "AddWidgetWithSymbol",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "WidgetType",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Symbol",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Widget)",
            "schema": {
              "$ref": "#/definitions/Widget"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dEvaluateExpression": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "WidgetAPI"
        ],
        "description": "Evaluates the passed in expression and returns the result. This is executed in a new variable context w/out any\n        user interface context.\n        @param Expression the expression string to evaluate\n        @return the result of evaluating the specified expression",
        "operationId": "EvaluateExpression",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Expression",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dExecuteWidgetChain": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "WidgetAPI"
        ],
        "description": "Executes a Widget and the chain of child Widgets underneath it\n        @param Widget the root of the Widget (or a String which represents the symbol for that Widget) action chain to execute\n        @return the value returned by the last executed Widget in the chain",
        "operationId": "ExecuteWidgetChain",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Widget",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dExecuteWidgetChainInCurrentMenuContext": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "WidgetAPI"
        ],
        "description": "Executes a Widget and the chain of child Widgets underneath it. This will use the context of the currently loaded menu to do this which\n        is useful if you want to launch an OptionsMenu programatically w/ the proper parent context. NOTE: If this does launch an OptionsMenu then the\n        value returned from this function will not be usable and this call will return once the OptionsMenu is launched. Once it is closed the core\n        will resume execution of the widget chain using one of its own internal threads at that point.\n        @param Widget the root of the Widget (or a String which represents the symbol for that Widget) action chain to execute\n        @return the value returned by the last executed Widget in the chain\n        @since 7.0",
        "operationId": "ExecuteWidgetChainInCurrentMenuContext",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Widget",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dFindWidgetBySymbol": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "WidgetAPI"
        ],
        "description": "Returns the Widget represented by the specified UID symbol\n        @param Symbol the UID symbol to lookup the Widget for\n        @return the Widget who\u0027s symbol matches the argument, null if it cannot be found\n        @since 6.4",
        "operationId": "FindWidgetBySymbol",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Symbol",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Widget)",
            "schema": {
              "$ref": "#/definitions/Widget"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetAllWidgets": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "WidgetAPI"
        ],
        "description": "Gets all of the Widgets that are in the currently loaded STV\n        @return all of the Widgets that are in the currently loaded STV",
        "operationId": "GetAllWidgets",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Widget"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetCurrentMenuWidget": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "WidgetAPI"
        ],
        "description": "Gets the Widget the defines the menu that is currently loaded by the system\n        @return the Widget the defines the menu that is currently loaded by the system",
        "operationId": "GetCurrentMenuWidget",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (value type is Widget)",
            "schema": {
              "$ref": "#/definitions/Widget"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetCurrentSTVFile": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "WidgetAPI"
        ],
        "description": "Gets the STV file that is currently loaded by the system\n        @return the STV file that is currently loaded by the system",
        "operationId": "GetCurrentSTVFile",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetDefaultSTVFile": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "WidgetAPI"
        ],
        "description": "Returns the file path for the default STV file\n        @return the file path for the default STV file\n        @since 6.4",
        "operationId": "GetDefaultSTVFile",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (value type is java.io.File)",
            "schema": {
              "$ref": "#/definitions/java.io.File"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSTVName": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "WidgetAPI"
        ],
        "description": "Returns the value of the \u0027STVName\u0027 Attribute under the Global Theme Widget. This is used for dependencies relating to plugins.\n        @return the value of the \u0027STVName\u0027 Attribute under the Global Theme Widget\n        @since 7.0",
        "operationId": "GetSTVName",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetSTVVersion": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "WidgetAPI"
        ],
        "description": "Returns the value of the \u0027STVVersion\u0027 Attribute under the Global Theme Widget. This is used for dependencies relating to plugins.\n        @return the value of the \u0027STVVersion\u0027 Attribute under the Global Theme Widget\n        @since 7.0",
        "operationId": "GetSTVVersion",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetUIWidgetContext": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "WidgetAPI"
        ],
        "description": "Returns the Widget for the corresponding UI component that this execution originated from. For\n        \u0027green\u0027 process chains; this will correspond to the UI component that received the event. For \u0027blue\u0027\n        UI chains; this will correspond to the UI component who\u0027s conditionality is being determined or who\u0027s data\n        is being evaluated. This will be null if there is no UI context; such as for non-UI hooks and calls made from\n        Java directly.\n        @return the Widget that corresponds to the UI context used for the current evaluation, null if there is no context\n        @since 6.6",
        "operationId": "GetUIWidgetContext",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response (value type is Widget)",
            "schema": {
              "$ref": "#/definitions/Widget"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetWidgetChild": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "WidgetAPI"
        ],
        "description": "Searches the children of the specified Widget for one with the specified type and name. If no match\n        is found then null is returned. If there are multiple matches then the first one is returned.\n        @param Widget the Widget (or a String which represents the symbol for that Widget) who\u0027s children should be searched\n        @param Type the type of the Widget to search for, if null than any type will match\n        @param Name the name that the Widget to search for must match, if null than any name will match\n        @return the Widget child of the specified Widget of the specified type and name",
        "operationId": "GetWidgetChild",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Widget",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Type",
            "in": "query"
          },
          {
            "name": "3",
            "type": "string",
            "required": true,
            "description": "Name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Widget)",
            "schema": {
              "$ref": "#/definitions/Widget"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetWidgetChildren": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "WidgetAPI"
        ],
        "description": "Gets the list of Widgets that are children of the specified Widget. The ordering of this list does have an effect.\n        @param Widget the Widget object (or a String which represents the symbol for that Widget)\n        @return a list of Widgets which are all children of the specified Widget",
        "operationId": "GetWidgetChildren",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Widget",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Widget"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetWidgetMenuBackHistory": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "WidgetAPI"
        ],
        "description": "Gets a list of the Widgets that have defined the menus that were recently displayed in the UI.\n        Unlike {@link #GetWidgetMenuHistory GetWidgetMenuHistory()} this only returns Menus that are\n        \u0027Back\u0027 (not Forward) in the navigations the user has performed. Similar to getting only the \u0027Back\u0027\n        history in a web browser.\n        @return a list of the Widgets that have defined the menus that were recently displayed in the UI\n        @since 5.1",
        "operationId": "GetWidgetMenuBackHistory",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Widget"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetWidgetMenuHistory": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "WidgetAPI"
        ],
        "description": "Gets a list of the Widgets that have defined the menus that were recently displayed in the UI\n        @return a list of the Widgets that have defined the menus that were recently displayed in the UI",
        "operationId": "GetWidgetMenuHistory",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Widget"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetWidgetName": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "WidgetAPI"
        ],
        "description": "Returns the name of the specified Widget\n        @param Widget the Widget object (or a String which represents the symbol for that Widget)\n        @return the name of the specified Widget",
        "operationId": "GetWidgetName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Widget",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetWidgetParent": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "WidgetAPI"
        ],
        "description": "Searches the parents of the specified Widget for one with the specified type and name. If no match\n        is found then null is returned. If there are multiple matches then the first one is returned.\n        @param Widget the Widget (or a String which represents the symbol for that Widget) who\u0027s parents should be searched\n        @param Type the type of the Widget to search for, if null than any type will match\n        @param Name the name that the Widget to search for must match, if null than any name will match\n        @return the Widget parent of the specified Widget of the specified type and name",
        "operationId": "GetWidgetParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Widget",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Type",
            "in": "query"
          },
          {
            "name": "3",
            "type": "string",
            "required": true,
            "description": "Name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Widget)",
            "schema": {
              "$ref": "#/definitions/Widget"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetWidgetParents": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "WidgetAPI"
        ],
        "description": "Gets the list of Widgets that are parents of the specified Widget. The ordering of this list has no effect.\n        @param Widget the Widget object (or a String which represents the symbol for that Widget)\n        @return a list of Widgets which are all parents of the specified Widget",
        "operationId": "GetWidgetParents",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Widget",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Widget"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetWidgetProperty": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "WidgetAPI"
        ],
        "description": "Returns the value for a specified property in a Widget\n        @param Widget the Widget object (or a String which represents the symbol for that Widget)\n        @param PropertyName the name of the property to get\n        @return the value for a specified property in a Widget",
        "operationId": "GetWidgetProperty",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Widget",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "PropertyName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetWidgetSymbol": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "WidgetAPI"
        ],
        "description": "Returns the UID symbol for the specified Widget\n        @param Widget the Widget object\n        @return the UID symbol which is used to represent this widget uniquely\n        @since 6.4",
        "operationId": "GetWidgetSymbol",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Widget",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetWidgetType": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "WidgetAPI"
        ],
        "description": "Returns the type of a Widget\n        @param Widget the Widget (or a String which represents the symbol for that Widget) object\n        @return the type name of the specified Widget",
        "operationId": "GetWidgetType",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Widget",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dGetWidgetsByType": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "WidgetAPI"
        ],
        "description": "Gets all of the Widgets that are in the currently loaded STV that are of the specified type\n        @param WidgetType the name of the widget type\n        @return all of the Widgets that are in the currently loaded STV that are of the specified type",
        "operationId": "GetWidgetsByType",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "WidgetType",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Widget"
              }
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dHasWidgetProperty": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "WidgetAPI"
        ],
        "description": "Returns true if the specified Widget has a property defined with the specified name\n        @param Widget the Widget object (or a String which represents the symbol for that Widget)\n        @param PropertyName the name of the property to check existence of\n        @return true if the specified Widget has a property defined with the specified name, false otherwise",
        "operationId": "HasWidgetProperty",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Widget",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "PropertyName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dImportSTVFile": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "WidgetAPI"
        ],
        "description": "Imports a SageTV Application Definition file into the current STV file that is loaded. This will essentially merge the two together.\n        @param STVFile the .stv file that should be imported into the currently loaded one\n        @return true if it was succesful, otherwise an error string",
        "operationId": "ImportSTVFile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "STVFile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dInsertWidgetChild": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "WidgetAPI"
        ],
        "description": "Creates a parent-child relationship between two Widgets. Since parent-child relationships are ordered, this allows\n        specifying where in that order this relationship should be.\n        @param WidgetParent the Widget (or a String which represents the symbol for that Widget) that should be the parent in the relationship\n        @param WidgetChild the Widget (or a String which represents the symbol for that Widget) that should be the child in the relationship\n        @param ChildIndex the 0-based index in the parent\u0027s child relationships list that the new relationship should occupy",
        "operationId": "InsertWidgetChild",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Widget",
            "required": true,
            "description": "WidgetParent",
            "in": "query"
          },
          {
            "name": "2",
            "type": "#/definitions/Widget",
            "required": true,
            "description": "WidgetChild",
            "in": "query"
          },
          {
            "name": "3",
            "type": "integer",
            "required": true,
            "description": "ChildIndex",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsSTVModified": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "WidgetAPI"
        ],
        "description": "Returns true if the currently loaded STV has been modified at all since its last save\n        @return true if the currently loaded STV has been modified at all since its last save\n        @since 6.1",
        "operationId": "IsSTVModified",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dIsWidgetParentOf": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "WidgetAPI"
        ],
        "description": "Returns true if the specified Widgets have a parent-child relationship.\n        @param WidgetParent the parent Widget (or a String which represents the symbol for that Widget) to test\n        @param WidgetChild the child Widget (or a String which represents the symbol for that Widget) to test\n        @return true if the specified parent has a parent-child relationship with the specified child, false otherwise",
        "operationId": "IsWidgetParentOf",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Widget",
            "required": true,
            "description": "WidgetParent",
            "in": "query"
          },
          {
            "name": "2",
            "type": "#/definitions/Widget",
            "required": true,
            "description": "WidgetChild",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dLaunchMenuWidget": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "WidgetAPI"
        ],
        "description": "Launches a new menu in SageTV with the specified Widget as the menu\u0027s definition.\n        @param Widget the Widget object (or a String which represents the symbol for that Widget) to use for the launched menu, this must be a Menu type Widget",
        "operationId": "LaunchMenuWidget",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Widget",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dLoadSTVFile": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "WidgetAPI"
        ],
        "description": "Loads a new SageTV Application Definition file that defines the entire user interface for SageTV\n        @param STVFile the new .stv file that should be loaded for the UI\n        @return true if it was succesful, otherwise an error string",
        "operationId": "LoadSTVFile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "STVFile",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (value type is Object)",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dRemoveWidget": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "WidgetAPI"
        ],
        "description": "Removes a Widget from the STV\n        @param Widget the Widget (or a String which represents the symbol for that Widget) to remove",
        "operationId": "RemoveWidget",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Widget",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dRemoveWidgetChild": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "WidgetAPI"
        ],
        "description": "Breaks a parent-child relationships between two Widgets. If the Widgets do not have the specified parent-child relationship\n        then there is no effect.\n        @param WidgetParent the parent of the Widget (or a String which represents the symbol for that Widget) relationship to break\n        @param WidgetChild the child of the Widget (or a String which represents the symbol for that Widget) relationship to break",
        "operationId": "RemoveWidgetChild",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/Widget",
            "required": true,
            "description": "WidgetParent",
            "in": "query"
          },
          {
            "name": "2",
            "type": "#/definitions/Widget",
            "required": true,
            "description": "WidgetChild",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSaveWidgetsAsXML": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "WidgetAPI"
        ],
        "description": "Saves all of the current Widgets as an XML file. Same as the \"Save a Copy as XML...\" in the Studio.\n        @param File the file to write to\n        @param Overwrite if true then if the File exists it will be overwritten\n        @return true if successful, false if not",
        "operationId": "SaveWidgetsAsXML",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "#/definitions/java.io.File",
            "required": true,
            "description": "File",
            "in": "query"
          },
          {
            "name": "2",
            "type": "boolean",
            "required": true,
            "description": "Overwrite",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response",
            "schema": {
              "$ref": "#/definitions/ResponseModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetWidgetName": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "WidgetAPI"
        ],
        "description": "Sets the name for a Widget\n        @param Widget the Widget object (or a String which represents the symbol for that Widget)\n        @param Name the value to set the name to for this Widget",
        "operationId": "SetWidgetName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Widget",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "Name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "?c\u003dSetWidgetProperty": {
      "parameters": [
        {
          "$ref": "#/parameters/encoder"
        },
        {
          "$ref": "#/parameters/context"
        },
        {
          "$ref": "#/parameters/filter"
        }
      ],
      "get": {
        "tags": [
          "WidgetAPI"
        ],
        "description": "Sets a property in a Widget to a specified value. If that property is already defined, this will overwrite it.\n        @param Widget the Widget object (or a String which represents the symbol for that Widget)\n        @param PropertyName the name of the property to set in the Widget\n        @param PropertyValue the value to set the property to",
        "operationId": "SetWidgetProperty",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "1",
            "type": "string",
            "required": true,
            "description": "Widget",
            "in": "query"
          },
          {
            "name": "2",
            "type": "string",
            "required": true,
            "description": "PropertyName",
            "in": "query"
          },
          {
            "name": "3",
            "type": "string",
            "required": true,
            "description": "PropertyValue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Normal response (code: 0 - OK)",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          },
          "500": {
            "description": "Unexpected Error",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    }
  }
}